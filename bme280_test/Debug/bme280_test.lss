
bme280_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000ab2  00000b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800166  00800166  00000bac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ed  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db2  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a57  00000000  00000000  000031cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00004c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011c0e  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bd  00000000  00000000  000169ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000170ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001316  00000000  00000000  00017143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3c       	cpi	r26, 0xC0	; 192
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	c4 d1       	rcall	.+904    	; 0x424 <main>
  9c:	08 c5       	rjmp	.+2576   	; 0xaae <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <spixfer>:
 * This function transfers 8 bits via SPI
 */ 
uint8_t spixfer(uint8_t x) {
	// Hardware SPI transfer used
	// Write to MOSI pin and receive on MISO pin
	SPDR = x;
  a0:	8e bd       	out	0x2e, r24	; 46
	
	// NOP to introduce delay to prevent wait
	// Loop form iterating when running at the maximum speed
	// This gives about 10% more speed,
	// even if it seems counter-intuitive at lower speeds it is unnoticed.
	asm volatile("nop");
  a2:	00 00       	nop
	while (!(SPSR & _BV(SPIF))) ; // wait
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <spixfer+0x4>
	return SPDR;
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	08 95       	ret

000000ae <read8>:

/*
 * This function reads 8 bits from sensor
 * With a given reg
 */ 
uint8_t read8(uint8_t reg) {
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
	spi_begin_txn(500000, MSBFIRST, SPI_MODE0);
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 e2       	ldi	r22, 0x20	; 32
  b8:	71 ea       	ldi	r23, 0xA1	; 161
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	3a d0       	rcall	.+116    	; 0x134 <spi_begin_txn>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  c0:	2a 98       	cbi	0x05, 2	; 5
	ioport_set_pin_low(SPI_HARDWARE_SS);			// SS set to low - select slave
	spixfer(reg | 0x80);							// read, bit 7 high
  c2:	8c 2f       	mov	r24, r28
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	ec df       	rcall	.-40     	; 0xa0 <spixfer>
	uint8_t value = spixfer(0);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	ea df       	rcall	.-44     	; 0xa0 <spixfer>
  cc:	2a 9a       	sbi	0x05, 2	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  ce:	cf 91       	pop	r28
	ioport_set_pin_high(SPI_HARDWARE_SS);			// SS set to high - de-select slave
	//spi_end_txn();
	
	return value;
}
  d0:	08 95       	ret

000000d2 <bme280_init>:
  d2:	80 ed       	ldi	r24, 0xD0	; 208
 * This function verifies if sensor is initialized
 * Assumes that SPI has been initialized already
 */ 
int bme280_init(void) {
	// Check if read successfully from sensor ID
	uint8_t sensor_id = read8(BME280_REGISTER_CHIPID);
  d4:	ec df       	rcall	.-40     	; 0xae <read8>
	if (sensor_id != 0x60) return BME_INIT_ERR;
  d6:	80 36       	cpi	r24, 0x60	; 96
  d8:	71 f4       	brne	.+28     	; 0xf6 <bme280_init+0x24>
	
	printf("Sensor ID: 0x%x\r\n", sensor_id);
  da:	1f 92       	push	r1
  dc:	8f 93       	push	r24
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	9f 93       	push	r25
  e4:	8f 93       	push	r24
  e6:	e7 d1       	rcall	.+974    	; 0x4b6 <printf>
	
	return BME_INIT_NO_ERR;
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret
 * Assumes that SPI has been initialized already
 */ 
int bme280_init(void) {
	// Check if read successfully from sensor ID
	uint8_t sensor_id = read8(BME280_REGISTER_CHIPID);
	if (sensor_id != 0x60) return BME_INIT_ERR;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	
	printf("Sensor ID: 0x%x\r\n", sensor_id);
	
	return BME_INIT_NO_ERR;
}
  fa:	08 95       	ret

000000fc <spi_init>:
	if (num_initialized) num_initialized--;
	
	// If no more usage of SPI bus, release the SPI bus
	// Disable SPI
	if (num_initialized == 0) {
		SPCR &= ~(1<<SPE);
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	22 9a       	sbi	0x04, 2	; 4
 100:	8c b5       	in	r24, 0x2c	; 44
 102:	80 61       	ori	r24, 0x10	; 16
 104:	8c bd       	out	0x2c, r24	; 44
 106:	8c b5       	in	r24, 0x2c	; 44
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8c bd       	out	0x2c, r24	; 44
 10c:	25 9a       	sbi	0x04, 5	; 4
 10e:	23 9a       	sbi	0x04, 3	; 4
 110:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <__data_end+0x1>
 114:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
 118:	08 95       	ret

0000011a <get_clock_divider_bits>:
	
	// Compensate for the duplicate fosc/64
	if (clockDiv == 6) clockDiv = 7;
	
	return clockDiv;
}
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	08 95       	ret

0000011e <set_clock_divider>:
/*
 * This function sets the clock mode given a clock div value
 */ 
void set_clock_divider(uint8_t clockDiv) {
	// Invert the SPI2X bit
	uint8_t clock_div_invert = clockDiv ^ 0x1;
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	89 27       	eor	r24, r25
	
	SPCR |= ((clock_div_invert >> 1) & SPI_CLOCK_MASK);
 122:	2c b5       	in	r18, 0x2c	; 44
 124:	98 2f       	mov	r25, r24
 126:	96 95       	lsr	r25
 128:	93 70       	andi	r25, 0x03	; 3
 12a:	92 2b       	or	r25, r18
 12c:	9c bd       	out	0x2c, r25	; 44
	SPSR = (clock_div_invert & SPI_2XCLOCK_MASK);
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	8d bd       	out	0x2d, r24	; 45
 132:	08 95       	ret

00000134 <spi_begin_txn>:
 *
 * Example:
 *		SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
 *		SPISettings(500000, MSBFIRST, SPI_MODE0)
 */ 
void spi_begin_txn(uint32_t clock, uint8_t bit_order, uint8_t data_mode) {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	86 2f       	mov	r24, r22
 13a:	d4 2f       	mov	r29, r20
 13c:	c2 2f       	mov	r28, r18
	// Setup SPI in master, again
	SPCR |= (1<<SPE);
 13e:	9c b5       	in	r25, 0x2c	; 44
 140:	90 64       	ori	r25, 0x40	; 64
 142:	9c bd       	out	0x2c, r25	; 44
	SPCR |= (1<<MSTR);
 144:	9c b5       	in	r25, 0x2c	; 44
 146:	90 61       	ori	r25, 0x10	; 16
 148:	9c bd       	out	0x2c, r25	; 44
	
	// Setup clock
	uint8_t clock_div_bits = get_clock_divider_bits(clock);
 14a:	e7 df       	rcall	.-50     	; 0x11a <get_clock_divider_bits>
	set_clock_divider(clock_div_bits);
 14c:	e8 df       	rcall	.-48     	; 0x11e <set_clock_divider>
 14e:	8c b5       	in	r24, 0x2c	; 44
	
	// Setup data mode
	SPCR |= (data_mode & SPI_MODE_MASK);
 150:	2c 2f       	mov	r18, r28
 152:	2c 70       	andi	r18, 0x0C	; 12
 154:	28 2b       	or	r18, r24
 156:	2c bd       	out	0x2c, r18	; 44
 158:	8c b5       	in	r24, 0x2c	; 44
	
	// Setup bit order
	SPCR |= ((bit_order == LSBFIRST) ? (1<<DORD) : 0);
 15a:	dd 23       	and	r29, r29
 15c:	11 f0       	breq	.+4      	; 0x162 <spi_begin_txn+0x2e>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 c0       	rjmp	.+2      	; 0x164 <spi_begin_txn+0x30>
 162:	90 e2       	ldi	r25, 0x20	; 32
 164:	89 2b       	or	r24, r25
 166:	8c bd       	out	0x2c, r24	; 44
 168:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
	
	num_initialized++;
 16c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <__data_end+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <__data_end+0x1>
 176:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
 17a:	df 91       	pop	r29
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24

  if (c == '\a')
 184:	87 30       	cpi	r24, 0x07	; 7
 186:	61 f4       	brne	.+24     	; 0x1a0 <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
 188:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__iob+0x4>
 18c:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <__iob+0x5>
 190:	47 e0       	ldi	r20, 0x07	; 7
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	5a d1       	rcall	.+692    	; 0x452 <fwrite>
      return 0;
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <uart_putchar+0x36>
    }

  if (c == '\n')
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <uart_putchar+0x28>
    uart_putchar('\r', stream);
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	ec df       	rcall	.-40     	; 0x180 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 1a8:	e0 ec       	ldi	r30, 0xC0	; 192
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	85 ff       	sbrs	r24, 5
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <uart_putchar+0x2c>
  UDR0 = c;
 1b2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

  return 0;
}
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 1be:	6f 92       	push	r6
 1c0:	7f 92       	push	r7
 1c2:	8f 92       	push	r8
 1c4:	9f 92       	push	r9
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 1da:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <rxp.2118>
 1de:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <rxp.2118+0x1>
 1e2:	23 2b       	or	r18, r19
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <uart_getchar+0x2a>
 1e6:	cc c0       	rjmp	.+408    	; 0x380 <uart_getchar+0x1c2>
 1e8:	8c 01       	movw	r16, r24
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f8 e6       	ldi	r31, 0x68	; 104
 1ee:	8f 2e       	mov	r8, r31
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	9f 2e       	mov	r9, r31
 1f4:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 1f6:	c0 ec       	ldi	r28, 0xC0	; 192
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 1fa:	0f 2e       	mov	r0, r31
 1fc:	f6 ec       	ldi	r31, 0xC6	; 198
 1fe:	cf 2e       	mov	r12, r31
 200:	d1 2c       	mov	r13, r1
 202:	f0 2d       	mov	r31, r0
 204:	54 01       	movw	r10, r8
 206:	0f 2e       	mov	r0, r31
 208:	f7 e6       	ldi	r31, 0x67	; 103
 20a:	6f 2e       	mov	r6, r31
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	7f 2e       	mov	r7, r31
 210:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 212:	88 81       	ld	r24, Y
 214:	88 23       	and	r24, r24
 216:	ec f7       	brge	.-6      	; 0x212 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 218:	88 81       	ld	r24, Y
 21a:	84 fd       	sbrc	r24, 4
 21c:	c4 c0       	rjmp	.+392    	; 0x3a6 <uart_getchar+0x1e8>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 21e:	88 81       	ld	r24, Y
 220:	83 fd       	sbrc	r24, 3
 222:	c4 c0       	rjmp	.+392    	; 0x3ac <uart_getchar+0x1ee>
	  return _FDEV_ERR;
	c = UDR0;
 224:	f6 01       	movw	r30, r12
 226:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 228:	8d 30       	cpi	r24, 0x0D	; 13
 22a:	11 f0       	breq	.+4      	; 0x230 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 22c:	8a 30       	cpi	r24, 0x0A	; 10
 22e:	61 f4       	brne	.+24     	; 0x248 <uart_getchar+0x8a>
	  {
	    *cp = c;
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	f4 01       	movw	r30, r8
 234:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 236:	b8 01       	movw	r22, r16
 238:	a3 df       	rcall	.-186    	; 0x180 <uart_putchar>
	    rxp = b;
 23a:	88 e6       	ldi	r24, 0x68	; 104
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <rxp.2118+0x1>
 242:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <rxp.2118>
	    break;
 246:	9c c0       	rjmp	.+312    	; 0x380 <uart_getchar+0x1c2>
	  }
	else if (c == '\t')
 248:	89 30       	cpi	r24, 0x09	; 9
 24a:	39 f0       	breq	.+14     	; 0x25a <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 24c:	90 ee       	ldi	r25, 0xE0	; 224
 24e:	98 0f       	add	r25, r24
 250:	9f 35       	cpi	r25, 0x5F	; 95
 252:	20 f0       	brcs	.+8      	; 0x25c <uart_getchar+0x9e>
 254:	80 3a       	cpi	r24, 0xA0	; 160
 256:	a8 f0       	brcs	.+42     	; 0x282 <uart_getchar+0xc4>
 258:	01 c0       	rjmp	.+2      	; 0x25c <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 25a:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 25c:	f7 eb       	ldi	r31, 0xB7	; 183
 25e:	8f 16       	cp	r8, r31
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	9f 06       	cpc	r9, r31
 264:	21 f4       	brne	.+8      	; 0x26e <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 266:	b8 01       	movw	r22, r16
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	8a df       	rcall	.-236    	; 0x180 <uart_putchar>
 26c:	d2 cf       	rjmp	.-92     	; 0x212 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 26e:	74 01       	movw	r14, r8
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	e9 1a       	sub	r14, r25
 274:	f9 0a       	sbc	r15, r25
 276:	f4 01       	movw	r30, r8
		uart_putchar(c, stream);
 278:	80 83       	st	Z, r24
 27a:	b8 01       	movw	r22, r16
 27c:	81 df       	rcall	.-254    	; 0x180 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 27e:	47 01       	movw	r8, r14
 280:	c8 cf       	rjmp	.-112    	; 0x212 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 282:	82 31       	cpi	r24, 0x12	; 18
 284:	b9 f1       	breq	.+110    	; 0x2f4 <uart_getchar+0x136>
 286:	30 f4       	brcc	.+12     	; 0x294 <uart_getchar+0xd6>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	09 f4       	brne	.+2      	; 0x28e <uart_getchar+0xd0>
 28c:	92 c0       	rjmp	.+292    	; 0x3b2 <uart_getchar+0x1f4>
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	e9 f0       	breq	.+58     	; 0x2cc <uart_getchar+0x10e>
 292:	bf cf       	rjmp	.-130    	; 0x212 <uart_getchar+0x54>
 294:	87 31       	cpi	r24, 0x17	; 23
 296:	29 f0       	breq	.+10     	; 0x2a2 <uart_getchar+0xe4>
 298:	8f 37       	cpi	r24, 0x7F	; 127
 29a:	c1 f0       	breq	.+48     	; 0x2cc <uart_getchar+0x10e>
 29c:	85 31       	cpi	r24, 0x15	; 21
 29e:	79 f0       	breq	.+30     	; 0x2be <uart_getchar+0x100>
 2a0:	b8 cf       	rjmp	.-144    	; 0x212 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 2a2:	f8 e6       	ldi	r31, 0x68	; 104
 2a4:	8f 16       	cp	r8, r31
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	9f 06       	cpc	r9, r31
 2aa:	09 f0       	breq	.+2      	; 0x2ae <uart_getchar+0xf0>
 2ac:	08 f4       	brcc	.+2      	; 0x2b0 <uart_getchar+0xf2>
 2ae:	b1 cf       	rjmp	.-158    	; 0x212 <uart_getchar+0x54>
 2b0:	f4 01       	movw	r30, r8
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	80 81       	ld	r24, Z
 2b6:	80 32       	cpi	r24, 0x20	; 32
 2b8:	09 f0       	breq	.+2      	; 0x2bc <uart_getchar+0xfe>
 2ba:	4a c0       	rjmp	.+148    	; 0x350 <uart_getchar+0x192>
 2bc:	aa cf       	rjmp	.-172    	; 0x212 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 2be:	88 e6       	ldi	r24, 0x68	; 104
 2c0:	88 16       	cp	r8, r24
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	98 06       	cpc	r9, r24
 2c6:	09 f0       	breq	.+2      	; 0x2ca <uart_getchar+0x10c>
 2c8:	70 f5       	brcc	.+92     	; 0x326 <uart_getchar+0x168>
 2ca:	a3 cf       	rjmp	.-186    	; 0x212 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 2cc:	98 e6       	ldi	r25, 0x68	; 104
 2ce:	89 16       	cp	r8, r25
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	99 06       	cpc	r9, r25
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <uart_getchar+0x11a>
 2d6:	08 f4       	brcc	.+2      	; 0x2da <uart_getchar+0x11c>
	      {
		uart_putchar('\b', stream);
 2d8:	9c cf       	rjmp	.-200    	; 0x212 <uart_getchar+0x54>
 2da:	b8 01       	movw	r22, r16
 2dc:	88 e0       	ldi	r24, 0x08	; 8
		uart_putchar(' ', stream);
 2de:	50 df       	rcall	.-352    	; 0x180 <uart_putchar>
 2e0:	b8 01       	movw	r22, r16
 2e2:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 2e4:	4d df       	rcall	.-358    	; 0x180 <uart_putchar>
 2e6:	b8 01       	movw	r22, r16
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	4a df       	rcall	.-364    	; 0x180 <uart_putchar>
		cp--;
 2ec:	e1 e0       	ldi	r30, 0x01	; 1
 2ee:	8e 1a       	sub	r8, r30
 2f0:	91 08       	sbc	r9, r1
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 2f2:	8f cf       	rjmp	.-226    	; 0x212 <uart_getchar+0x54>
 2f4:	b8 01       	movw	r22, r16
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	43 df       	rcall	.-378    	; 0x180 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 2fa:	f8 e6       	ldi	r31, 0x68	; 104
 2fc:	8f 16       	cp	r8, r31
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	9f 06       	cpc	r9, r31
 302:	09 f0       	breq	.+2      	; 0x306 <uart_getchar+0x148>
 304:	08 f4       	brcc	.+2      	; 0x308 <uart_getchar+0x14a>
 306:	85 cf       	rjmp	.-246    	; 0x212 <uart_getchar+0x54>
 308:	0f 2e       	mov	r0, r31
 30a:	f8 e6       	ldi	r31, 0x68	; 104
 30c:	ef 2e       	mov	r14, r31
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	ff 2e       	mov	r15, r31
	      uart_putchar(*cp2, stream);
 312:	f0 2d       	mov	r31, r0
 314:	b8 01       	movw	r22, r16
 316:	f7 01       	movw	r30, r14
 318:	81 91       	ld	r24, Z+
 31a:	7f 01       	movw	r14, r30
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 31c:	31 df       	rcall	.-414    	; 0x180 <uart_putchar>
 31e:	8e 14       	cp	r8, r14
 320:	9f 04       	cpc	r9, r15
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 322:	c1 f7       	brne	.-16     	; 0x314 <uart_getchar+0x156>
 324:	76 cf       	rjmp	.-276    	; 0x212 <uart_getchar+0x54>
 326:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	2a df       	rcall	.-428    	; 0x180 <uart_putchar>
 32c:	b8 01       	movw	r22, r16
 32e:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 330:	27 df       	rcall	.-434    	; 0x180 <uart_putchar>
 332:	b8 01       	movw	r22, r16
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	24 df       	rcall	.-440    	; 0x180 <uart_putchar>
		cp--;
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	8f 1a       	sub	r8, r31
 33c:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 33e:	88 e6       	ldi	r24, 0x68	; 104
 340:	88 16       	cp	r8, r24
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	98 06       	cpc	r9, r24
 346:	79 f7       	brne	.-34     	; 0x326 <uart_getchar+0x168>
 348:	f3 01       	movw	r30, r6
 34a:	31 96       	adiw	r30, 0x01	; 1
 34c:	4f 01       	movw	r8, r30
 34e:	61 cf       	rjmp	.-318    	; 0x212 <uart_getchar+0x54>
 350:	74 01       	movw	r14, r8
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	ef 1a       	sub	r14, r31
 356:	f1 08       	sbc	r15, r1
 358:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	11 df       	rcall	.-478    	; 0x180 <uart_putchar>
 35e:	b8 01       	movw	r22, r16
 360:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 362:	0e df       	rcall	.-484    	; 0x180 <uart_putchar>
 364:	b8 01       	movw	r22, r16
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	0b df       	rcall	.-490    	; 0x180 <uart_putchar>
		cp--;
 36a:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 36c:	ae 14       	cp	r10, r14
 36e:	bf 04       	cpc	r11, r15
 370:	09 f4       	brne	.+2      	; 0x374 <uart_getchar+0x1b6>
 372:	4f cf       	rjmp	.-354    	; 0x212 <uart_getchar+0x54>
 374:	f7 01       	movw	r30, r14
 376:	82 91       	ld	r24, -Z
 378:	7f 01       	movw	r14, r30
 37a:	80 32       	cpi	r24, 0x20	; 32
 37c:	69 f7       	brne	.-38     	; 0x358 <uart_getchar+0x19a>
 37e:	49 cf       	rjmp	.-366    	; 0x212 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 380:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <rxp.2118>
 384:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <rxp.2118+0x1>
 388:	cf 01       	movw	r24, r30
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <rxp.2118+0x1>
 390:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <rxp.2118>
 394:	80 81       	ld	r24, Z
  if (c == '\n')
 396:	8a 30       	cpi	r24, 0x0A	; 10
 398:	21 f4       	brne	.+8      	; 0x3a2 <uart_getchar+0x1e4>
    rxp = 0;
 39a:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rxp.2118+0x1>
 39e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <rxp.2118>

  return c;
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <uart_getchar+0x1f8>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 3a6:	8e ef       	ldi	r24, 0xFE	; 254
 3a8:	9f ef       	ldi	r25, 0xFF	; 255
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <uart_getchar+0x1f8>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	9f ef       	ldi	r25, 0xFF	; 255
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <uart_getchar+0x1f8>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	bf 90       	pop	r11
 3c8:	af 90       	pop	r10
 3ca:	9f 90       	pop	r9
 3cc:	8f 90       	pop	r8
 3ce:	7f 90       	pop	r7
 3d0:	6f 90       	pop	r6
 3d2:	08 95       	ret

000003d4 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
	UBRR0H = (uint8_t) (MYUBRR >> 8);
 3d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) MYUBRR;
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 3de:	88 e1       	ldi	r24, 0x18	; 24
 3e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3 << UCSZ00);
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	stdout = stdin = &usart0_str;
 3ea:	ea eb       	ldi	r30, 0xBA	; 186
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	91 83       	std	Z+1, r25	; 0x01
 3f4:	80 83       	st	Z, r24
 3f6:	93 83       	std	Z+3, r25	; 0x03
 3f8:	82 83       	std	Z+2, r24	; 0x02
 3fa:	08 95       	ret

000003fc <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 3fc:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 3fe:	84 b1       	in	r24, 0x04	; 4
 400:	80 62       	ori	r24, 0x20	; 32
 402:	8f 77       	andi	r24, 0x7F	; 127
 404:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 406:	89 2f       	mov	r24, r25
 408:	80 6a       	ori	r24, 0xA0	; 160
 40a:	85 b9       	out	0x05, r24	; 5
 40c:	08 95       	ret

0000040e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 40e:	04 c0       	rjmp	.+8      	; 0x418 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 410:	61 50       	subi	r22, 0x01	; 1
 412:	71 09       	sbc	r23, r1
 414:	81 09       	sbc	r24, r1
 416:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 418:	61 15       	cp	r22, r1
 41a:	71 05       	cpc	r23, r1
 41c:	81 05       	cpc	r24, r1
 41e:	91 05       	cpc	r25, r1
 420:	b9 f7       	brne	.-18     	; 0x410 <__portable_avr_delay_cycles+0x2>
 422:	08 95       	ret

00000424 <main>:
#define MY_LED    IOPORT_CREATE_PIN(PORTB, 5)

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
 424:	eb df       	rcall	.-42     	; 0x3fc <board_init>

	ioport_init();
	uart_init();
 426:	d6 df       	rcall	.-84     	; 0x3d4 <uart_init>
	
	// Sensors initialization
	spi_init();
 428:	69 de       	rcall	.-814    	; 0xfc <spi_init>
 42a:	53 de       	rcall	.-858    	; 0xd2 <bme280_init>
	int ret = bme280_init();
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	21 f4       	brne	.+8      	; 0x438 <main+0x14>
	
	if (ret == BME_INIT_NO_ERR) printf("Sensor Initialized\r\n");
 430:	88 e2       	ldi	r24, 0x28	; 40
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	53 d0       	rcall	.+166    	; 0x4dc <puts>
 436:	04 c0       	rjmp	.+8      	; 0x440 <main+0x1c>
 438:	8c e3       	ldi	r24, 0x3C	; 60
	else {
		printf("Sensor initialization failed!\r\n");
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	4f d0       	rcall	.+158    	; 0x4dc <puts>
 43e:	ff cf       	rjmp	.-2      	; 0x43e <main+0x1a>
 440:	8b e5       	ldi	r24, 0x5B	; 91
	}
		
	while (1) {
		//ioport_toggle_pin_level(SPI_HARDWARE_SS);
		//ioport_set_pin_low(MY_LED);
		printf("Continue\r\n");
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	4b d0       	rcall	.+150    	; 0x4dc <puts>
 446:	66 e3       	ldi	r22, 0x36	; 54
		delay_ms(5000);
 448:	77 eb       	ldi	r23, 0xB7	; 183
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	df df       	rcall	.-66     	; 0x40e <__portable_avr_delay_cycles>
 450:	f7 cf       	rjmp	.-18     	; 0x440 <main+0x1c>

00000452 <fwrite>:
 452:	a0 e0       	ldi	r26, 0x00	; 0
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	ee e2       	ldi	r30, 0x2E	; 46
 458:	f2 e0       	ldi	r31, 0x02	; 2
 45a:	f8 c2       	rjmp	.+1520   	; 0xa4c <__prologue_saves__+0xc>
 45c:	5b 01       	movw	r10, r22
 45e:	4a 01       	movw	r8, r20
 460:	79 01       	movw	r14, r18
 462:	d9 01       	movw	r26, r18
 464:	13 96       	adiw	r26, 0x03	; 3
 466:	2c 91       	ld	r18, X
 468:	21 ff       	sbrs	r18, 1
 46a:	1d c0       	rjmp	.+58     	; 0x4a6 <fwrite+0x54>
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	d0 e0       	ldi	r29, 0x00	; 0
 470:	c8 15       	cp	r28, r8
 472:	d9 05       	cpc	r29, r9
 474:	d9 f0       	breq	.+54     	; 0x4ac <fwrite+0x5a>
 476:	8c 01       	movw	r16, r24
 478:	6c 01       	movw	r12, r24
 47a:	ca 0c       	add	r12, r10
 47c:	db 1c       	adc	r13, r11
 47e:	c8 01       	movw	r24, r16
 480:	0c 15       	cp	r16, r12
 482:	1d 05       	cpc	r17, r13
 484:	71 f0       	breq	.+28     	; 0x4a2 <fwrite+0x50>
 486:	0f 5f       	subi	r16, 0xFF	; 255
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	d7 01       	movw	r26, r14
 48c:	18 96       	adiw	r26, 0x08	; 8
 48e:	ed 91       	ld	r30, X+
 490:	fc 91       	ld	r31, X
 492:	19 97       	sbiw	r26, 0x09	; 9
 494:	b7 01       	movw	r22, r14
 496:	dc 01       	movw	r26, r24
 498:	8c 91       	ld	r24, X
 49a:	09 95       	icall
 49c:	89 2b       	or	r24, r25
 49e:	79 f3       	breq	.-34     	; 0x47e <fwrite+0x2c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <fwrite+0x5a>
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	e5 cf       	rjmp	.-54     	; 0x470 <fwrite+0x1e>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <fwrite+0x5c>
 4ac:	ce 01       	movw	r24, r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	ec e0       	ldi	r30, 0x0C	; 12
 4b4:	e7 c2       	rjmp	.+1486   	; 0xa84 <__epilogue_restores__+0xc>

000004b6 <printf>:
 4b6:	a0 e0       	ldi	r26, 0x00	; 0
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	e0 e6       	ldi	r30, 0x60	; 96
 4bc:	f2 e0       	ldi	r31, 0x02	; 2
 4be:	d0 c2       	rjmp	.+1440   	; 0xa60 <__prologue_saves__+0x20>
 4c0:	ae 01       	movw	r20, r28
 4c2:	4b 5f       	subi	r20, 0xFB	; 251
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	fa 01       	movw	r30, r20
 4c8:	61 91       	ld	r22, Z+
 4ca:	71 91       	ld	r23, Z+
 4cc:	af 01       	movw	r20, r30
 4ce:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__iob+0x2>
 4d2:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__iob+0x3>
 4d6:	32 d0       	rcall	.+100    	; 0x53c <vfprintf>
 4d8:	e2 e0       	ldi	r30, 0x02	; 2
 4da:	de c2       	rjmp	.+1468   	; 0xa98 <__epilogue_restores__+0x20>

000004dc <puts>:
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__iob+0x2>
 4e8:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__iob+0x3>
 4ec:	23 81       	ldd	r18, Z+3	; 0x03
 4ee:	21 ff       	sbrs	r18, 1
 4f0:	1b c0       	rjmp	.+54     	; 0x528 <puts+0x4c>
 4f2:	8c 01       	movw	r16, r24
 4f4:	d0 e0       	ldi	r29, 0x00	; 0
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
 4f8:	f8 01       	movw	r30, r16
 4fa:	81 91       	ld	r24, Z+
 4fc:	8f 01       	movw	r16, r30
 4fe:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <__iob+0x2>
 502:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <__iob+0x3>
 506:	db 01       	movw	r26, r22
 508:	18 96       	adiw	r26, 0x08	; 8
 50a:	ed 91       	ld	r30, X+
 50c:	fc 91       	ld	r31, X
 50e:	19 97       	sbiw	r26, 0x09	; 9
 510:	88 23       	and	r24, r24
 512:	31 f0       	breq	.+12     	; 0x520 <puts+0x44>
 514:	09 95       	icall
 516:	89 2b       	or	r24, r25
 518:	79 f3       	breq	.-34     	; 0x4f8 <puts+0x1c>
 51a:	df ef       	ldi	r29, 0xFF	; 255
 51c:	cf ef       	ldi	r28, 0xFF	; 255
 51e:	ec cf       	rjmp	.-40     	; 0x4f8 <puts+0x1c>
 520:	8a e0       	ldi	r24, 0x0A	; 10
 522:	09 95       	icall
 524:	89 2b       	or	r24, r25
 526:	19 f0       	breq	.+6      	; 0x52e <puts+0x52>
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	02 c0       	rjmp	.+4      	; 0x532 <puts+0x56>
 52e:	8d 2f       	mov	r24, r29
 530:	9c 2f       	mov	r25, r28
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	08 95       	ret

0000053c <vfprintf>:
 53c:	ab e0       	ldi	r26, 0x0B	; 11
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e3 ea       	ldi	r30, 0xA3	; 163
 542:	f2 e0       	ldi	r31, 0x02	; 2
 544:	7d c2       	rjmp	.+1274   	; 0xa40 <__prologue_saves__>
 546:	6c 01       	movw	r12, r24
 548:	7b 01       	movw	r14, r22
 54a:	8a 01       	movw	r16, r20
 54c:	fc 01       	movw	r30, r24
 54e:	17 82       	std	Z+7, r1	; 0x07
 550:	16 82       	std	Z+6, r1	; 0x06
 552:	83 81       	ldd	r24, Z+3	; 0x03
 554:	81 ff       	sbrs	r24, 1
 556:	bf c1       	rjmp	.+894    	; 0x8d6 <vfprintf+0x39a>
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	3c 01       	movw	r6, r24
 55e:	f6 01       	movw	r30, r12
 560:	93 81       	ldd	r25, Z+3	; 0x03
 562:	f7 01       	movw	r30, r14
 564:	93 fd       	sbrc	r25, 3
 566:	85 91       	lpm	r24, Z+
 568:	93 ff       	sbrs	r25, 3
 56a:	81 91       	ld	r24, Z+
 56c:	7f 01       	movw	r14, r30
 56e:	88 23       	and	r24, r24
 570:	09 f4       	brne	.+2      	; 0x574 <vfprintf+0x38>
 572:	ad c1       	rjmp	.+858    	; 0x8ce <vfprintf+0x392>
 574:	85 32       	cpi	r24, 0x25	; 37
 576:	39 f4       	brne	.+14     	; 0x586 <vfprintf+0x4a>
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	85 32       	cpi	r24, 0x25	; 37
 584:	21 f4       	brne	.+8      	; 0x58e <vfprintf+0x52>
 586:	b6 01       	movw	r22, r12
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	c0 d1       	rcall	.+896    	; 0x90c <fputc>
 58c:	e8 cf       	rjmp	.-48     	; 0x55e <vfprintf+0x22>
 58e:	91 2c       	mov	r9, r1
 590:	21 2c       	mov	r2, r1
 592:	31 2c       	mov	r3, r1
 594:	ff e1       	ldi	r31, 0x1F	; 31
 596:	f3 15       	cp	r31, r3
 598:	d8 f0       	brcs	.+54     	; 0x5d0 <vfprintf+0x94>
 59a:	8b 32       	cpi	r24, 0x2B	; 43
 59c:	79 f0       	breq	.+30     	; 0x5bc <vfprintf+0x80>
 59e:	38 f4       	brcc	.+14     	; 0x5ae <vfprintf+0x72>
 5a0:	80 32       	cpi	r24, 0x20	; 32
 5a2:	79 f0       	breq	.+30     	; 0x5c2 <vfprintf+0x86>
 5a4:	83 32       	cpi	r24, 0x23	; 35
 5a6:	a1 f4       	brne	.+40     	; 0x5d0 <vfprintf+0x94>
 5a8:	23 2d       	mov	r18, r3
 5aa:	20 61       	ori	r18, 0x10	; 16
 5ac:	1d c0       	rjmp	.+58     	; 0x5e8 <vfprintf+0xac>
 5ae:	8d 32       	cpi	r24, 0x2D	; 45
 5b0:	61 f0       	breq	.+24     	; 0x5ca <vfprintf+0x8e>
 5b2:	80 33       	cpi	r24, 0x30	; 48
 5b4:	69 f4       	brne	.+26     	; 0x5d0 <vfprintf+0x94>
 5b6:	23 2d       	mov	r18, r3
 5b8:	21 60       	ori	r18, 0x01	; 1
 5ba:	16 c0       	rjmp	.+44     	; 0x5e8 <vfprintf+0xac>
 5bc:	83 2d       	mov	r24, r3
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	38 2e       	mov	r3, r24
 5c2:	e3 2d       	mov	r30, r3
 5c4:	e4 60       	ori	r30, 0x04	; 4
 5c6:	3e 2e       	mov	r3, r30
 5c8:	2a c0       	rjmp	.+84     	; 0x61e <vfprintf+0xe2>
 5ca:	f3 2d       	mov	r31, r3
 5cc:	f8 60       	ori	r31, 0x08	; 8
 5ce:	1d c0       	rjmp	.+58     	; 0x60a <vfprintf+0xce>
 5d0:	37 fc       	sbrc	r3, 7
 5d2:	2d c0       	rjmp	.+90     	; 0x62e <vfprintf+0xf2>
 5d4:	20 ed       	ldi	r18, 0xD0	; 208
 5d6:	28 0f       	add	r18, r24
 5d8:	2a 30       	cpi	r18, 0x0A	; 10
 5da:	40 f0       	brcs	.+16     	; 0x5ec <vfprintf+0xb0>
 5dc:	8e 32       	cpi	r24, 0x2E	; 46
 5de:	b9 f4       	brne	.+46     	; 0x60e <vfprintf+0xd2>
 5e0:	36 fc       	sbrc	r3, 6
 5e2:	75 c1       	rjmp	.+746    	; 0x8ce <vfprintf+0x392>
 5e4:	23 2d       	mov	r18, r3
 5e6:	20 64       	ori	r18, 0x40	; 64
 5e8:	32 2e       	mov	r3, r18
 5ea:	19 c0       	rjmp	.+50     	; 0x61e <vfprintf+0xe2>
 5ec:	36 fe       	sbrs	r3, 6
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <vfprintf+0xc0>
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	98 9e       	mul	r9, r24
 5f4:	20 0d       	add	r18, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	92 2e       	mov	r9, r18
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <vfprintf+0xe2>
 5fc:	ea e0       	ldi	r30, 0x0A	; 10
 5fe:	2e 9e       	mul	r2, r30
 600:	20 0d       	add	r18, r0
 602:	11 24       	eor	r1, r1
 604:	22 2e       	mov	r2, r18
 606:	f3 2d       	mov	r31, r3
 608:	f0 62       	ori	r31, 0x20	; 32
 60a:	3f 2e       	mov	r3, r31
 60c:	08 c0       	rjmp	.+16     	; 0x61e <vfprintf+0xe2>
 60e:	8c 36       	cpi	r24, 0x6C	; 108
 610:	21 f4       	brne	.+8      	; 0x61a <vfprintf+0xde>
 612:	83 2d       	mov	r24, r3
 614:	80 68       	ori	r24, 0x80	; 128
 616:	38 2e       	mov	r3, r24
 618:	02 c0       	rjmp	.+4      	; 0x61e <vfprintf+0xe2>
 61a:	88 36       	cpi	r24, 0x68	; 104
 61c:	41 f4       	brne	.+16     	; 0x62e <vfprintf+0xf2>
 61e:	f7 01       	movw	r30, r14
 620:	93 fd       	sbrc	r25, 3
 622:	85 91       	lpm	r24, Z+
 624:	93 ff       	sbrs	r25, 3
 626:	81 91       	ld	r24, Z+
 628:	7f 01       	movw	r14, r30
 62a:	81 11       	cpse	r24, r1
 62c:	b3 cf       	rjmp	.-154    	; 0x594 <vfprintf+0x58>
 62e:	98 2f       	mov	r25, r24
 630:	9f 7d       	andi	r25, 0xDF	; 223
 632:	95 54       	subi	r25, 0x45	; 69
 634:	93 30       	cpi	r25, 0x03	; 3
 636:	28 f4       	brcc	.+10     	; 0x642 <vfprintf+0x106>
 638:	0c 5f       	subi	r16, 0xFC	; 252
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	9f e3       	ldi	r25, 0x3F	; 63
 63e:	99 83       	std	Y+1, r25	; 0x01
 640:	0d c0       	rjmp	.+26     	; 0x65c <vfprintf+0x120>
 642:	83 36       	cpi	r24, 0x63	; 99
 644:	31 f0       	breq	.+12     	; 0x652 <vfprintf+0x116>
 646:	83 37       	cpi	r24, 0x73	; 115
 648:	71 f0       	breq	.+28     	; 0x666 <vfprintf+0x12a>
 64a:	83 35       	cpi	r24, 0x53	; 83
 64c:	09 f0       	breq	.+2      	; 0x650 <vfprintf+0x114>
 64e:	55 c0       	rjmp	.+170    	; 0x6fa <vfprintf+0x1be>
 650:	20 c0       	rjmp	.+64     	; 0x692 <vfprintf+0x156>
 652:	f8 01       	movw	r30, r16
 654:	80 81       	ld	r24, Z
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	0e 5f       	subi	r16, 0xFE	; 254
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	88 24       	eor	r8, r8
 65e:	83 94       	inc	r8
 660:	91 2c       	mov	r9, r1
 662:	53 01       	movw	r10, r6
 664:	12 c0       	rjmp	.+36     	; 0x68a <vfprintf+0x14e>
 666:	28 01       	movw	r4, r16
 668:	f2 e0       	ldi	r31, 0x02	; 2
 66a:	4f 0e       	add	r4, r31
 66c:	51 1c       	adc	r5, r1
 66e:	f8 01       	movw	r30, r16
 670:	a0 80       	ld	r10, Z
 672:	b1 80       	ldd	r11, Z+1	; 0x01
 674:	36 fe       	sbrs	r3, 6
 676:	03 c0       	rjmp	.+6      	; 0x67e <vfprintf+0x142>
 678:	69 2d       	mov	r22, r9
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <vfprintf+0x146>
 67e:	6f ef       	ldi	r22, 0xFF	; 255
 680:	7f ef       	ldi	r23, 0xFF	; 255
 682:	c5 01       	movw	r24, r10
 684:	38 d1       	rcall	.+624    	; 0x8f6 <strnlen>
 686:	4c 01       	movw	r8, r24
 688:	82 01       	movw	r16, r4
 68a:	f3 2d       	mov	r31, r3
 68c:	ff 77       	andi	r31, 0x7F	; 127
 68e:	3f 2e       	mov	r3, r31
 690:	15 c0       	rjmp	.+42     	; 0x6bc <vfprintf+0x180>
 692:	28 01       	movw	r4, r16
 694:	22 e0       	ldi	r18, 0x02	; 2
 696:	42 0e       	add	r4, r18
 698:	51 1c       	adc	r5, r1
 69a:	f8 01       	movw	r30, r16
 69c:	a0 80       	ld	r10, Z
 69e:	b1 80       	ldd	r11, Z+1	; 0x01
 6a0:	36 fe       	sbrs	r3, 6
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <vfprintf+0x16e>
 6a4:	69 2d       	mov	r22, r9
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <vfprintf+0x172>
 6aa:	6f ef       	ldi	r22, 0xFF	; 255
 6ac:	7f ef       	ldi	r23, 0xFF	; 255
 6ae:	c5 01       	movw	r24, r10
 6b0:	17 d1       	rcall	.+558    	; 0x8e0 <strnlen_P>
 6b2:	4c 01       	movw	r8, r24
 6b4:	f3 2d       	mov	r31, r3
 6b6:	f0 68       	ori	r31, 0x80	; 128
 6b8:	3f 2e       	mov	r3, r31
 6ba:	82 01       	movw	r16, r4
 6bc:	33 fc       	sbrc	r3, 3
 6be:	19 c0       	rjmp	.+50     	; 0x6f2 <vfprintf+0x1b6>
 6c0:	82 2d       	mov	r24, r2
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	88 16       	cp	r8, r24
 6c6:	99 06       	cpc	r9, r25
 6c8:	a0 f4       	brcc	.+40     	; 0x6f2 <vfprintf+0x1b6>
 6ca:	b6 01       	movw	r22, r12
 6cc:	80 e2       	ldi	r24, 0x20	; 32
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	1d d1       	rcall	.+570    	; 0x90c <fputc>
 6d2:	2a 94       	dec	r2
 6d4:	f5 cf       	rjmp	.-22     	; 0x6c0 <vfprintf+0x184>
 6d6:	f5 01       	movw	r30, r10
 6d8:	37 fc       	sbrc	r3, 7
 6da:	85 91       	lpm	r24, Z+
 6dc:	37 fe       	sbrs	r3, 7
 6de:	81 91       	ld	r24, Z+
 6e0:	5f 01       	movw	r10, r30
 6e2:	b6 01       	movw	r22, r12
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	12 d1       	rcall	.+548    	; 0x90c <fputc>
 6e8:	21 10       	cpse	r2, r1
 6ea:	2a 94       	dec	r2
 6ec:	21 e0       	ldi	r18, 0x01	; 1
 6ee:	82 1a       	sub	r8, r18
 6f0:	91 08       	sbc	r9, r1
 6f2:	81 14       	cp	r8, r1
 6f4:	91 04       	cpc	r9, r1
 6f6:	79 f7       	brne	.-34     	; 0x6d6 <vfprintf+0x19a>
 6f8:	e1 c0       	rjmp	.+450    	; 0x8bc <vfprintf+0x380>
 6fa:	84 36       	cpi	r24, 0x64	; 100
 6fc:	11 f0       	breq	.+4      	; 0x702 <vfprintf+0x1c6>
 6fe:	89 36       	cpi	r24, 0x69	; 105
 700:	39 f5       	brne	.+78     	; 0x750 <vfprintf+0x214>
 702:	f8 01       	movw	r30, r16
 704:	37 fe       	sbrs	r3, 7
 706:	07 c0       	rjmp	.+14     	; 0x716 <vfprintf+0x1da>
 708:	60 81       	ld	r22, Z
 70a:	71 81       	ldd	r23, Z+1	; 0x01
 70c:	82 81       	ldd	r24, Z+2	; 0x02
 70e:	93 81       	ldd	r25, Z+3	; 0x03
 710:	0c 5f       	subi	r16, 0xFC	; 252
 712:	1f 4f       	sbci	r17, 0xFF	; 255
 714:	08 c0       	rjmp	.+16     	; 0x726 <vfprintf+0x1ea>
 716:	60 81       	ld	r22, Z
 718:	71 81       	ldd	r23, Z+1	; 0x01
 71a:	07 2e       	mov	r0, r23
 71c:	00 0c       	add	r0, r0
 71e:	88 0b       	sbc	r24, r24
 720:	99 0b       	sbc	r25, r25
 722:	0e 5f       	subi	r16, 0xFE	; 254
 724:	1f 4f       	sbci	r17, 0xFF	; 255
 726:	f3 2d       	mov	r31, r3
 728:	ff 76       	andi	r31, 0x6F	; 111
 72a:	3f 2e       	mov	r3, r31
 72c:	97 ff       	sbrs	r25, 7
 72e:	09 c0       	rjmp	.+18     	; 0x742 <vfprintf+0x206>
 730:	90 95       	com	r25
 732:	80 95       	com	r24
 734:	70 95       	com	r23
 736:	61 95       	neg	r22
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	f0 68       	ori	r31, 0x80	; 128
 740:	3f 2e       	mov	r3, r31
 742:	2a e0       	ldi	r18, 0x0A	; 10
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	a3 01       	movw	r20, r6
 748:	1d d1       	rcall	.+570    	; 0x984 <__ultoa_invert>
 74a:	88 2e       	mov	r8, r24
 74c:	86 18       	sub	r8, r6
 74e:	44 c0       	rjmp	.+136    	; 0x7d8 <vfprintf+0x29c>
 750:	85 37       	cpi	r24, 0x75	; 117
 752:	31 f4       	brne	.+12     	; 0x760 <vfprintf+0x224>
 754:	23 2d       	mov	r18, r3
 756:	2f 7e       	andi	r18, 0xEF	; 239
 758:	b2 2e       	mov	r11, r18
 75a:	2a e0       	ldi	r18, 0x0A	; 10
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	25 c0       	rjmp	.+74     	; 0x7aa <vfprintf+0x26e>
 760:	93 2d       	mov	r25, r3
 762:	99 7f       	andi	r25, 0xF9	; 249
 764:	b9 2e       	mov	r11, r25
 766:	8f 36       	cpi	r24, 0x6F	; 111
 768:	c1 f0       	breq	.+48     	; 0x79a <vfprintf+0x25e>
 76a:	18 f4       	brcc	.+6      	; 0x772 <vfprintf+0x236>
 76c:	88 35       	cpi	r24, 0x58	; 88
 76e:	79 f0       	breq	.+30     	; 0x78e <vfprintf+0x252>
 770:	ae c0       	rjmp	.+348    	; 0x8ce <vfprintf+0x392>
 772:	80 37       	cpi	r24, 0x70	; 112
 774:	19 f0       	breq	.+6      	; 0x77c <vfprintf+0x240>
 776:	88 37       	cpi	r24, 0x78	; 120
 778:	21 f0       	breq	.+8      	; 0x782 <vfprintf+0x246>
 77a:	a9 c0       	rjmp	.+338    	; 0x8ce <vfprintf+0x392>
 77c:	e9 2f       	mov	r30, r25
 77e:	e0 61       	ori	r30, 0x10	; 16
 780:	be 2e       	mov	r11, r30
 782:	b4 fe       	sbrs	r11, 4
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <vfprintf+0x264>
 786:	fb 2d       	mov	r31, r11
 788:	f4 60       	ori	r31, 0x04	; 4
 78a:	bf 2e       	mov	r11, r31
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <vfprintf+0x264>
 78e:	34 fe       	sbrs	r3, 4
 790:	0a c0       	rjmp	.+20     	; 0x7a6 <vfprintf+0x26a>
 792:	29 2f       	mov	r18, r25
 794:	26 60       	ori	r18, 0x06	; 6
 796:	b2 2e       	mov	r11, r18
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x26a>
 79a:	28 e0       	ldi	r18, 0x08	; 8
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <vfprintf+0x26e>
 7a0:	20 e1       	ldi	r18, 0x10	; 16
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x26e>
 7a6:	20 e1       	ldi	r18, 0x10	; 16
 7a8:	32 e0       	ldi	r19, 0x02	; 2
 7aa:	f8 01       	movw	r30, r16
 7ac:	b7 fe       	sbrs	r11, 7
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <vfprintf+0x282>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	82 81       	ldd	r24, Z+2	; 0x02
 7b6:	93 81       	ldd	r25, Z+3	; 0x03
 7b8:	0c 5f       	subi	r16, 0xFC	; 252
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0x28e>
 7be:	60 81       	ld	r22, Z
 7c0:	71 81       	ldd	r23, Z+1	; 0x01
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 5f       	subi	r16, 0xFE	; 254
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	a3 01       	movw	r20, r6
 7cc:	db d0       	rcall	.+438    	; 0x984 <__ultoa_invert>
 7ce:	88 2e       	mov	r8, r24
 7d0:	86 18       	sub	r8, r6
 7d2:	fb 2d       	mov	r31, r11
 7d4:	ff 77       	andi	r31, 0x7F	; 127
 7d6:	3f 2e       	mov	r3, r31
 7d8:	36 fe       	sbrs	r3, 6
 7da:	0d c0       	rjmp	.+26     	; 0x7f6 <vfprintf+0x2ba>
 7dc:	23 2d       	mov	r18, r3
 7de:	2e 7f       	andi	r18, 0xFE	; 254
 7e0:	a2 2e       	mov	r10, r18
 7e2:	89 14       	cp	r8, r9
 7e4:	58 f4       	brcc	.+22     	; 0x7fc <vfprintf+0x2c0>
 7e6:	34 fe       	sbrs	r3, 4
 7e8:	0b c0       	rjmp	.+22     	; 0x800 <vfprintf+0x2c4>
 7ea:	32 fc       	sbrc	r3, 2
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x2c4>
 7ee:	83 2d       	mov	r24, r3
 7f0:	8e 7e       	andi	r24, 0xEE	; 238
 7f2:	a8 2e       	mov	r10, r24
 7f4:	05 c0       	rjmp	.+10     	; 0x800 <vfprintf+0x2c4>
 7f6:	b8 2c       	mov	r11, r8
 7f8:	a3 2c       	mov	r10, r3
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <vfprintf+0x2c6>
 7fc:	b8 2c       	mov	r11, r8
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <vfprintf+0x2c6>
 800:	b9 2c       	mov	r11, r9
 802:	a4 fe       	sbrs	r10, 4
 804:	0f c0       	rjmp	.+30     	; 0x824 <vfprintf+0x2e8>
 806:	fe 01       	movw	r30, r28
 808:	e8 0d       	add	r30, r8
 80a:	f1 1d       	adc	r31, r1
 80c:	80 81       	ld	r24, Z
 80e:	80 33       	cpi	r24, 0x30	; 48
 810:	21 f4       	brne	.+8      	; 0x81a <vfprintf+0x2de>
 812:	9a 2d       	mov	r25, r10
 814:	99 7e       	andi	r25, 0xE9	; 233
 816:	a9 2e       	mov	r10, r25
 818:	09 c0       	rjmp	.+18     	; 0x82c <vfprintf+0x2f0>
 81a:	a2 fe       	sbrs	r10, 2
 81c:	06 c0       	rjmp	.+12     	; 0x82a <vfprintf+0x2ee>
 81e:	b3 94       	inc	r11
 820:	b3 94       	inc	r11
 822:	04 c0       	rjmp	.+8      	; 0x82c <vfprintf+0x2f0>
 824:	8a 2d       	mov	r24, r10
 826:	86 78       	andi	r24, 0x86	; 134
 828:	09 f0       	breq	.+2      	; 0x82c <vfprintf+0x2f0>
 82a:	b3 94       	inc	r11
 82c:	a3 fc       	sbrc	r10, 3
 82e:	10 c0       	rjmp	.+32     	; 0x850 <vfprintf+0x314>
 830:	a0 fe       	sbrs	r10, 0
 832:	06 c0       	rjmp	.+12     	; 0x840 <vfprintf+0x304>
 834:	b2 14       	cp	r11, r2
 836:	80 f4       	brcc	.+32     	; 0x858 <vfprintf+0x31c>
 838:	28 0c       	add	r2, r8
 83a:	92 2c       	mov	r9, r2
 83c:	9b 18       	sub	r9, r11
 83e:	0d c0       	rjmp	.+26     	; 0x85a <vfprintf+0x31e>
 840:	b2 14       	cp	r11, r2
 842:	58 f4       	brcc	.+22     	; 0x85a <vfprintf+0x31e>
 844:	b6 01       	movw	r22, r12
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	60 d0       	rcall	.+192    	; 0x90c <fputc>
 84c:	b3 94       	inc	r11
 84e:	f8 cf       	rjmp	.-16     	; 0x840 <vfprintf+0x304>
 850:	b2 14       	cp	r11, r2
 852:	18 f4       	brcc	.+6      	; 0x85a <vfprintf+0x31e>
 854:	2b 18       	sub	r2, r11
 856:	02 c0       	rjmp	.+4      	; 0x85c <vfprintf+0x320>
 858:	98 2c       	mov	r9, r8
 85a:	21 2c       	mov	r2, r1
 85c:	a4 fe       	sbrs	r10, 4
 85e:	0f c0       	rjmp	.+30     	; 0x87e <vfprintf+0x342>
 860:	b6 01       	movw	r22, r12
 862:	80 e3       	ldi	r24, 0x30	; 48
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	52 d0       	rcall	.+164    	; 0x90c <fputc>
 868:	a2 fe       	sbrs	r10, 2
 86a:	16 c0       	rjmp	.+44     	; 0x898 <vfprintf+0x35c>
 86c:	a1 fc       	sbrc	r10, 1
 86e:	03 c0       	rjmp	.+6      	; 0x876 <vfprintf+0x33a>
 870:	88 e7       	ldi	r24, 0x78	; 120
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <vfprintf+0x33e>
 876:	88 e5       	ldi	r24, 0x58	; 88
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	b6 01       	movw	r22, r12
 87c:	0c c0       	rjmp	.+24     	; 0x896 <vfprintf+0x35a>
 87e:	8a 2d       	mov	r24, r10
 880:	86 78       	andi	r24, 0x86	; 134
 882:	51 f0       	breq	.+20     	; 0x898 <vfprintf+0x35c>
 884:	a1 fe       	sbrs	r10, 1
 886:	02 c0       	rjmp	.+4      	; 0x88c <vfprintf+0x350>
 888:	8b e2       	ldi	r24, 0x2B	; 43
 88a:	01 c0       	rjmp	.+2      	; 0x88e <vfprintf+0x352>
 88c:	80 e2       	ldi	r24, 0x20	; 32
 88e:	a7 fc       	sbrc	r10, 7
 890:	8d e2       	ldi	r24, 0x2D	; 45
 892:	b6 01       	movw	r22, r12
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	3a d0       	rcall	.+116    	; 0x90c <fputc>
 898:	89 14       	cp	r8, r9
 89a:	30 f4       	brcc	.+12     	; 0x8a8 <vfprintf+0x36c>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e3       	ldi	r24, 0x30	; 48
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	34 d0       	rcall	.+104    	; 0x90c <fputc>
 8a4:	9a 94       	dec	r9
 8a6:	f8 cf       	rjmp	.-16     	; 0x898 <vfprintf+0x35c>
 8a8:	8a 94       	dec	r8
 8aa:	f3 01       	movw	r30, r6
 8ac:	e8 0d       	add	r30, r8
 8ae:	f1 1d       	adc	r31, r1
 8b0:	80 81       	ld	r24, Z
 8b2:	b6 01       	movw	r22, r12
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	2a d0       	rcall	.+84     	; 0x90c <fputc>
 8b8:	81 10       	cpse	r8, r1
 8ba:	f6 cf       	rjmp	.-20     	; 0x8a8 <vfprintf+0x36c>
 8bc:	22 20       	and	r2, r2
 8be:	09 f4       	brne	.+2      	; 0x8c2 <vfprintf+0x386>
 8c0:	4e ce       	rjmp	.-868    	; 0x55e <vfprintf+0x22>
 8c2:	b6 01       	movw	r22, r12
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	21 d0       	rcall	.+66     	; 0x90c <fputc>
 8ca:	2a 94       	dec	r2
 8cc:	f7 cf       	rjmp	.-18     	; 0x8bc <vfprintf+0x380>
 8ce:	f6 01       	movw	r30, r12
 8d0:	86 81       	ldd	r24, Z+6	; 0x06
 8d2:	97 81       	ldd	r25, Z+7	; 0x07
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x39e>
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	2b 96       	adiw	r28, 0x0b	; 11
 8dc:	e2 e1       	ldi	r30, 0x12	; 18
 8de:	cc c0       	rjmp	.+408    	; 0xa78 <__epilogue_restores__>

000008e0 <strnlen_P>:
 8e0:	fc 01       	movw	r30, r24
 8e2:	05 90       	lpm	r0, Z+
 8e4:	61 50       	subi	r22, 0x01	; 1
 8e6:	70 40       	sbci	r23, 0x00	; 0
 8e8:	01 10       	cpse	r0, r1
 8ea:	d8 f7       	brcc	.-10     	; 0x8e2 <strnlen_P+0x2>
 8ec:	80 95       	com	r24
 8ee:	90 95       	com	r25
 8f0:	8e 0f       	add	r24, r30
 8f2:	9f 1f       	adc	r25, r31
 8f4:	08 95       	ret

000008f6 <strnlen>:
 8f6:	fc 01       	movw	r30, r24
 8f8:	61 50       	subi	r22, 0x01	; 1
 8fa:	70 40       	sbci	r23, 0x00	; 0
 8fc:	01 90       	ld	r0, Z+
 8fe:	01 10       	cpse	r0, r1
 900:	d8 f7       	brcc	.-10     	; 0x8f8 <strnlen+0x2>
 902:	80 95       	com	r24
 904:	90 95       	com	r25
 906:	8e 0f       	add	r24, r30
 908:	9f 1f       	adc	r25, r31
 90a:	08 95       	ret

0000090c <fputc>:
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	fb 01       	movw	r30, r22
 916:	23 81       	ldd	r18, Z+3	; 0x03
 918:	21 fd       	sbrc	r18, 1
 91a:	03 c0       	rjmp	.+6      	; 0x922 <fputc+0x16>
 91c:	8f ef       	ldi	r24, 0xFF	; 255
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	2c c0       	rjmp	.+88     	; 0x97a <fputc+0x6e>
 922:	22 ff       	sbrs	r18, 2
 924:	16 c0       	rjmp	.+44     	; 0x952 <fputc+0x46>
 926:	46 81       	ldd	r20, Z+6	; 0x06
 928:	57 81       	ldd	r21, Z+7	; 0x07
 92a:	24 81       	ldd	r18, Z+4	; 0x04
 92c:	35 81       	ldd	r19, Z+5	; 0x05
 92e:	42 17       	cp	r20, r18
 930:	53 07       	cpc	r21, r19
 932:	44 f4       	brge	.+16     	; 0x944 <fputc+0x38>
 934:	a0 81       	ld	r26, Z
 936:	b1 81       	ldd	r27, Z+1	; 0x01
 938:	9d 01       	movw	r18, r26
 93a:	2f 5f       	subi	r18, 0xFF	; 255
 93c:	3f 4f       	sbci	r19, 0xFF	; 255
 93e:	31 83       	std	Z+1, r19	; 0x01
 940:	20 83       	st	Z, r18
 942:	8c 93       	st	X, r24
 944:	26 81       	ldd	r18, Z+6	; 0x06
 946:	37 81       	ldd	r19, Z+7	; 0x07
 948:	2f 5f       	subi	r18, 0xFF	; 255
 94a:	3f 4f       	sbci	r19, 0xFF	; 255
 94c:	37 83       	std	Z+7, r19	; 0x07
 94e:	26 83       	std	Z+6, r18	; 0x06
 950:	14 c0       	rjmp	.+40     	; 0x97a <fputc+0x6e>
 952:	8b 01       	movw	r16, r22
 954:	ec 01       	movw	r28, r24
 956:	fb 01       	movw	r30, r22
 958:	00 84       	ldd	r0, Z+8	; 0x08
 95a:	f1 85       	ldd	r31, Z+9	; 0x09
 95c:	e0 2d       	mov	r30, r0
 95e:	09 95       	icall
 960:	89 2b       	or	r24, r25
 962:	e1 f6       	brne	.-72     	; 0x91c <fputc+0x10>
 964:	d8 01       	movw	r26, r16
 966:	16 96       	adiw	r26, 0x06	; 6
 968:	8d 91       	ld	r24, X+
 96a:	9c 91       	ld	r25, X
 96c:	17 97       	sbiw	r26, 0x07	; 7
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	17 96       	adiw	r26, 0x07	; 7
 972:	9c 93       	st	X, r25
 974:	8e 93       	st	-X, r24
 976:	16 97       	sbiw	r26, 0x06	; 6
 978:	ce 01       	movw	r24, r28
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <__ultoa_invert>:
 984:	fa 01       	movw	r30, r20
 986:	aa 27       	eor	r26, r26
 988:	28 30       	cpi	r18, 0x08	; 8
 98a:	51 f1       	breq	.+84     	; 0x9e0 <__ultoa_invert+0x5c>
 98c:	20 31       	cpi	r18, 0x10	; 16
 98e:	81 f1       	breq	.+96     	; 0x9f0 <__ultoa_invert+0x6c>
 990:	e8 94       	clt
 992:	6f 93       	push	r22
 994:	6e 7f       	andi	r22, 0xFE	; 254
 996:	6e 5f       	subi	r22, 0xFE	; 254
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	af 4f       	sbci	r26, 0xFF	; 255
 9a0:	b1 e0       	ldi	r27, 0x01	; 1
 9a2:	3e d0       	rcall	.+124    	; 0xa20 <__ultoa_invert+0x9c>
 9a4:	b4 e0       	ldi	r27, 0x04	; 4
 9a6:	3c d0       	rcall	.+120    	; 0xa20 <__ultoa_invert+0x9c>
 9a8:	67 0f       	add	r22, r23
 9aa:	78 1f       	adc	r23, r24
 9ac:	89 1f       	adc	r24, r25
 9ae:	9a 1f       	adc	r25, r26
 9b0:	a1 1d       	adc	r26, r1
 9b2:	68 0f       	add	r22, r24
 9b4:	79 1f       	adc	r23, r25
 9b6:	8a 1f       	adc	r24, r26
 9b8:	91 1d       	adc	r25, r1
 9ba:	a1 1d       	adc	r26, r1
 9bc:	6a 0f       	add	r22, r26
 9be:	71 1d       	adc	r23, r1
 9c0:	81 1d       	adc	r24, r1
 9c2:	91 1d       	adc	r25, r1
 9c4:	a1 1d       	adc	r26, r1
 9c6:	20 d0       	rcall	.+64     	; 0xa08 <__ultoa_invert+0x84>
 9c8:	09 f4       	brne	.+2      	; 0x9cc <__ultoa_invert+0x48>
 9ca:	68 94       	set
 9cc:	3f 91       	pop	r19
 9ce:	2a e0       	ldi	r18, 0x0A	; 10
 9d0:	26 9f       	mul	r18, r22
 9d2:	11 24       	eor	r1, r1
 9d4:	30 19       	sub	r19, r0
 9d6:	30 5d       	subi	r19, 0xD0	; 208
 9d8:	31 93       	st	Z+, r19
 9da:	de f6       	brtc	.-74     	; 0x992 <__ultoa_invert+0xe>
 9dc:	cf 01       	movw	r24, r30
 9de:	08 95       	ret
 9e0:	46 2f       	mov	r20, r22
 9e2:	47 70       	andi	r20, 0x07	; 7
 9e4:	40 5d       	subi	r20, 0xD0	; 208
 9e6:	41 93       	st	Z+, r20
 9e8:	b3 e0       	ldi	r27, 0x03	; 3
 9ea:	0f d0       	rcall	.+30     	; 0xa0a <__ultoa_invert+0x86>
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__ultoa_invert+0x5c>
 9ee:	f6 cf       	rjmp	.-20     	; 0x9dc <__ultoa_invert+0x58>
 9f0:	46 2f       	mov	r20, r22
 9f2:	4f 70       	andi	r20, 0x0F	; 15
 9f4:	40 5d       	subi	r20, 0xD0	; 208
 9f6:	4a 33       	cpi	r20, 0x3A	; 58
 9f8:	18 f0       	brcs	.+6      	; 0xa00 <__ultoa_invert+0x7c>
 9fa:	49 5d       	subi	r20, 0xD9	; 217
 9fc:	31 fd       	sbrc	r19, 1
 9fe:	40 52       	subi	r20, 0x20	; 32
 a00:	41 93       	st	Z+, r20
 a02:	02 d0       	rcall	.+4      	; 0xa08 <__ultoa_invert+0x84>
 a04:	a9 f7       	brne	.-22     	; 0x9f0 <__ultoa_invert+0x6c>
 a06:	ea cf       	rjmp	.-44     	; 0x9dc <__ultoa_invert+0x58>
 a08:	b4 e0       	ldi	r27, 0x04	; 4
 a0a:	a6 95       	lsr	r26
 a0c:	97 95       	ror	r25
 a0e:	87 95       	ror	r24
 a10:	77 95       	ror	r23
 a12:	67 95       	ror	r22
 a14:	ba 95       	dec	r27
 a16:	c9 f7       	brne	.-14     	; 0xa0a <__ultoa_invert+0x86>
 a18:	00 97       	sbiw	r24, 0x00	; 0
 a1a:	61 05       	cpc	r22, r1
 a1c:	71 05       	cpc	r23, r1
 a1e:	08 95       	ret
 a20:	9b 01       	movw	r18, r22
 a22:	ac 01       	movw	r20, r24
 a24:	0a 2e       	mov	r0, r26
 a26:	06 94       	lsr	r0
 a28:	57 95       	ror	r21
 a2a:	47 95       	ror	r20
 a2c:	37 95       	ror	r19
 a2e:	27 95       	ror	r18
 a30:	ba 95       	dec	r27
 a32:	c9 f7       	brne	.-14     	; 0xa26 <__ultoa_invert+0xa2>
 a34:	62 0f       	add	r22, r18
 a36:	73 1f       	adc	r23, r19
 a38:	84 1f       	adc	r24, r20
 a3a:	95 1f       	adc	r25, r21
 a3c:	a0 1d       	adc	r26, r0
 a3e:	08 95       	ret

00000a40 <__prologue_saves__>:
 a40:	2f 92       	push	r2
 a42:	3f 92       	push	r3
 a44:	4f 92       	push	r4
 a46:	5f 92       	push	r5
 a48:	6f 92       	push	r6
 a4a:	7f 92       	push	r7
 a4c:	8f 92       	push	r8
 a4e:	9f 92       	push	r9
 a50:	af 92       	push	r10
 a52:	bf 92       	push	r11
 a54:	cf 92       	push	r12
 a56:	df 92       	push	r13
 a58:	ef 92       	push	r14
 a5a:	ff 92       	push	r15
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
 a68:	ca 1b       	sub	r28, r26
 a6a:	db 0b       	sbc	r29, r27
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	de bf       	out	0x3e, r29	; 62
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	cd bf       	out	0x3d, r28	; 61
 a76:	09 94       	ijmp

00000a78 <__epilogue_restores__>:
 a78:	2a 88       	ldd	r2, Y+18	; 0x12
 a7a:	39 88       	ldd	r3, Y+17	; 0x11
 a7c:	48 88       	ldd	r4, Y+16	; 0x10
 a7e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a80:	6e 84       	ldd	r6, Y+14	; 0x0e
 a82:	7d 84       	ldd	r7, Y+13	; 0x0d
 a84:	8c 84       	ldd	r8, Y+12	; 0x0c
 a86:	9b 84       	ldd	r9, Y+11	; 0x0b
 a88:	aa 84       	ldd	r10, Y+10	; 0x0a
 a8a:	b9 84       	ldd	r11, Y+9	; 0x09
 a8c:	c8 84       	ldd	r12, Y+8	; 0x08
 a8e:	df 80       	ldd	r13, Y+7	; 0x07
 a90:	ee 80       	ldd	r14, Y+6	; 0x06
 a92:	fd 80       	ldd	r15, Y+5	; 0x05
 a94:	0c 81       	ldd	r16, Y+4	; 0x04
 a96:	1b 81       	ldd	r17, Y+3	; 0x03
 a98:	aa 81       	ldd	r26, Y+2	; 0x02
 a9a:	b9 81       	ldd	r27, Y+1	; 0x01
 a9c:	ce 0f       	add	r28, r30
 a9e:	d1 1d       	adc	r29, r1
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	f8 94       	cli
 aa4:	de bf       	out	0x3e, r29	; 62
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	cd bf       	out	0x3d, r28	; 61
 aaa:	ed 01       	movw	r28, r26
 aac:	08 95       	ret

00000aae <_exit>:
 aae:	f8 94       	cli

00000ab0 <__stop_program>:
 ab0:	ff cf       	rjmp	.-2      	; 0xab0 <__stop_program>
