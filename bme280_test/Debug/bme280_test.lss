
bme280_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000011e6  0000127a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  008001aa  008001aa  00001324  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002656  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f57  00000000  00000000  00003b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f5f  00000000  00000000  00004ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00006a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001220e  00000000  00000000  00006d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f51  00000000  00000000  00018f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00019ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001397  00000000  00000000  00019fc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3a       	cpi	r26, 0xAA	; 170
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa ea       	ldi	r26, 0xAA	; 170
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 32       	cpi	r26, 0x25	; 37
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	09 d4       	rcall	.+2066   	; 0x8ae <main>
      9c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <__portable_avr_delay_cycles>:
     @param reg the register address to read from
     @returns the 16 bit data value read from the device
*/
int16_t readS16(uint8_t reg) {
    return (int16_t)read16(reg);
}
      a2:	04 c0       	rjmp	.+8      	; 0xac <__portable_avr_delay_cycles+0xa>
      a4:	61 50       	subi	r22, 0x01	; 1
      a6:	71 09       	sbc	r23, r1
      a8:	81 09       	sbc	r24, r1
      aa:	91 09       	sbc	r25, r1
      ac:	61 15       	cp	r22, r1
      ae:	71 05       	cpc	r23, r1
      b0:	81 05       	cpc	r24, r1
      b2:	91 05       	cpc	r25, r1
      b4:	b9 f7       	brne	.-18     	; 0xa4 <__portable_avr_delay_cycles+0x2>
      b6:	08 95       	ret

000000b8 <spixfer>:
      b8:	8e bd       	out	0x2e, r24	; 46
      ba:	00 00       	nop
      bc:	0d b4       	in	r0, 0x2d	; 45
      be:	07 fe       	sbrs	r0, 7
      c0:	fd cf       	rjmp	.-6      	; 0xbc <spixfer+0x4>
      c2:	8e b5       	in	r24, 0x2e	; 46
      c4:	08 95       	ret

000000c6 <read8>:
      c6:	cf 93       	push	r28
      c8:	c8 2f       	mov	r28, r24
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	41 e0       	ldi	r20, 0x01	; 1
      ce:	60 e2       	ldi	r22, 0x20	; 32
      d0:	71 ea       	ldi	r23, 0xA1	; 161
      d2:	87 e0       	ldi	r24, 0x07	; 7
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	41 d2       	rcall	.+1154   	; 0x55a <spi_begin_txn>
      d8:	2a 98       	cbi	0x05, 2	; 5
      da:	8c 2f       	mov	r24, r28
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	ec df       	rcall	.-40     	; 0xb8 <spixfer>
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	ea df       	rcall	.-44     	; 0xb8 <spixfer>
      e4:	2a 9a       	sbi	0x05, 2	; 5
      e6:	cf 91       	pop	r28
      e8:	08 95       	ret

000000ea <is_reading_calibration>:
      ea:	83 ef       	ldi	r24, 0xF3	; 243
      ec:	ec df       	rcall	.-40     	; 0xc6 <read8>
      ee:	81 70       	andi	r24, 0x01	; 1
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <write8>:
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	d8 2f       	mov	r29, r24
      fa:	c6 2f       	mov	r28, r22
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	41 e0       	ldi	r20, 0x01	; 1
     100:	60 e2       	ldi	r22, 0x20	; 32
     102:	71 ea       	ldi	r23, 0xA1	; 161
     104:	87 e0       	ldi	r24, 0x07	; 7
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	28 d2       	rcall	.+1104   	; 0x55a <spi_begin_txn>
     10a:	2a 98       	cbi	0x05, 2	; 5
     10c:	8d 2f       	mov	r24, r29
     10e:	8f 77       	andi	r24, 0x7F	; 127
     110:	d3 df       	rcall	.-90     	; 0xb8 <spixfer>
     112:	8c 2f       	mov	r24, r28
     114:	d1 df       	rcall	.-94     	; 0xb8 <spixfer>
     116:	2a 9a       	sbi	0x05, 2	; 5
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	08 95       	ret

0000011e <set_sampling>:
     11e:	af 92       	push	r10
     120:	bf 92       	push	r11
     122:	cf 92       	push	r12
     124:	df 92       	push	r13
     126:	ef 92       	push	r14
     128:	ff 92       	push	r15
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	c4 e0       	ldi	r28, 0x04	; 4
     134:	d1 e0       	ldi	r29, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	9d 83       	std	Y+5, r25	; 0x05
     13a:	8c 83       	std	Y+4, r24	; 0x04
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	79 83       	std	Y+1, r23	; 0x01
     140:	68 83       	st	Y, r22
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	5b 83       	std	Y+3, r21	; 0x03
     146:	4a 83       	std	Y+2, r20	; 0x02
     148:	0f 2e       	mov	r0, r31
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	af 2e       	mov	r10, r31
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	bf 2e       	mov	r11, r31
     152:	f0 2d       	mov	r31, r0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	f5 01       	movw	r30, r10
     158:	33 83       	std	Z+3, r19	; 0x03
     15a:	22 83       	std	Z+2, r18	; 0x02
     15c:	0f 2e       	mov	r0, r31
     15e:	fa e0       	ldi	r31, 0x0A	; 10
     160:	cf 2e       	mov	r12, r31
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	df 2e       	mov	r13, r31
     166:	f0 2d       	mov	r31, r0
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	f6 01       	movw	r30, r12
     16c:	13 83       	std	Z+3, r17	; 0x03
     16e:	02 83       	std	Z+2, r16	; 0x02
     170:	f1 2c       	mov	r15, r1
     172:	f1 82       	std	Z+1, r15	; 0x01
     174:	e0 82       	st	Z, r14
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	84 ef       	ldi	r24, 0xF4	; 244
     17a:	bc df       	rcall	.-136    	; 0xf4 <write8>
     17c:	f5 01       	movw	r30, r10
     17e:	62 81       	ldd	r22, Z+2	; 0x02
     180:	82 ef       	ldi	r24, 0xF2	; 242
     182:	b8 df       	rcall	.-144    	; 0xf4 <write8>
     184:	f6 01       	movw	r30, r12
     186:	60 81       	ld	r22, Z
     188:	71 81       	ldd	r23, Z+1	; 0x01
     18a:	66 0f       	add	r22, r22
     18c:	77 1f       	adc	r23, r23
     18e:	62 95       	swap	r22
     190:	72 95       	swap	r23
     192:	70 7f       	andi	r23, 0xF0	; 240
     194:	76 27       	eor	r23, r22
     196:	60 7f       	andi	r22, 0xF0	; 240
     198:	76 27       	eor	r23, r22
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	93 81       	ldd	r25, Z+3	; 0x03
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	68 2b       	or	r22, r24
     1a8:	79 2b       	or	r23, r25
     1aa:	86 81       	ldd	r24, Z+6	; 0x06
     1ac:	97 81       	ldd	r25, Z+7	; 0x07
     1ae:	68 2b       	or	r22, r24
     1b0:	79 2b       	or	r23, r25
     1b2:	85 ef       	ldi	r24, 0xF5	; 245
     1b4:	9f df       	rcall	.-194    	; 0xf4 <write8>
     1b6:	68 81       	ld	r22, Y
     1b8:	79 81       	ldd	r23, Y+1	; 0x01
     1ba:	66 0f       	add	r22, r22
     1bc:	77 1f       	adc	r23, r23
     1be:	62 95       	swap	r22
     1c0:	72 95       	swap	r23
     1c2:	70 7f       	andi	r23, 0xF0	; 240
     1c4:	76 27       	eor	r23, r22
     1c6:	60 7f       	andi	r22, 0xF0	; 240
     1c8:	76 27       	eor	r23, r22
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	9b 81       	ldd	r25, Y+3	; 0x03
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	68 2b       	or	r22, r24
     1d8:	79 2b       	or	r23, r25
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	68 2b       	or	r22, r24
     1e0:	79 2b       	or	r23, r25
     1e2:	84 ef       	ldi	r24, 0xF4	; 244
     1e4:	87 df       	rcall	.-242    	; 0xf4 <write8>
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	df 90       	pop	r13
     1f4:	cf 90       	pop	r12
     1f6:	bf 90       	pop	r11
     1f8:	af 90       	pop	r10
     1fa:	08 95       	ret

000001fc <read16>:
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	c8 2f       	mov	r28, r24
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	41 e0       	ldi	r20, 0x01	; 1
     206:	60 e2       	ldi	r22, 0x20	; 32
     208:	71 ea       	ldi	r23, 0xA1	; 161
     20a:	87 e0       	ldi	r24, 0x07	; 7
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	a5 d1       	rcall	.+842    	; 0x55a <spi_begin_txn>
     210:	2a 98       	cbi	0x05, 2	; 5
     212:	8c 2f       	mov	r24, r28
     214:	80 68       	ori	r24, 0x80	; 128
     216:	50 df       	rcall	.-352    	; 0xb8 <spixfer>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	4e df       	rcall	.-356    	; 0xb8 <spixfer>
     21c:	d8 2f       	mov	r29, r24
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	4b df       	rcall	.-362    	; 0xb8 <spixfer>
     222:	c8 2f       	mov	r28, r24
     224:	2a 9a       	sbi	0x05, 2	; 5
     226:	7b d1       	rcall	.+758    	; 0x51e <spi_end_txn>
     228:	8c 2f       	mov	r24, r28
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9d 2b       	or	r25, r29
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <read16_LE>:
     234:	e3 df       	rcall	.-58     	; 0x1fc <read16>
     236:	98 27       	eor	r25, r24
     238:	89 27       	eor	r24, r25
     23a:	98 27       	eor	r25, r24
     23c:	08 95       	ret

0000023e <read_coefficients>:
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	88 e8       	ldi	r24, 0x88	; 136
     246:	f6 df       	rcall	.-20     	; 0x234 <read16_LE>
     248:	ce ef       	ldi	r28, 0xFE	; 254
     24a:	d1 e0       	ldi	r29, 0x01	; 1
     24c:	99 83       	std	Y+1, r25	; 0x01
     24e:	88 83       	st	Y, r24
     250:	8a e8       	ldi	r24, 0x8A	; 138
     252:	f0 df       	rcall	.-32     	; 0x234 <read16_LE>
     254:	9b 83       	std	Y+3, r25	; 0x03
     256:	8a 83       	std	Y+2, r24	; 0x02
     258:	8c e8       	ldi	r24, 0x8C	; 140
     25a:	ec df       	rcall	.-40     	; 0x234 <read16_LE>
     25c:	9d 83       	std	Y+5, r25	; 0x05
     25e:	8c 83       	std	Y+4, r24	; 0x04
     260:	8e e8       	ldi	r24, 0x8E	; 142
     262:	e8 df       	rcall	.-48     	; 0x234 <read16_LE>
     264:	9f 83       	std	Y+7, r25	; 0x07
     266:	8e 83       	std	Y+6, r24	; 0x06
     268:	80 e9       	ldi	r24, 0x90	; 144
     26a:	e4 df       	rcall	.-56     	; 0x234 <read16_LE>
     26c:	99 87       	std	Y+9, r25	; 0x09
     26e:	88 87       	std	Y+8, r24	; 0x08
     270:	82 e9       	ldi	r24, 0x92	; 146
     272:	e0 df       	rcall	.-64     	; 0x234 <read16_LE>
     274:	9b 87       	std	Y+11, r25	; 0x0b
     276:	8a 87       	std	Y+10, r24	; 0x0a
     278:	84 e9       	ldi	r24, 0x94	; 148
     27a:	dc df       	rcall	.-72     	; 0x234 <read16_LE>
     27c:	9d 87       	std	Y+13, r25	; 0x0d
     27e:	8c 87       	std	Y+12, r24	; 0x0c
     280:	86 e9       	ldi	r24, 0x96	; 150
     282:	d8 df       	rcall	.-80     	; 0x234 <read16_LE>
     284:	9f 87       	std	Y+15, r25	; 0x0f
     286:	8e 87       	std	Y+14, r24	; 0x0e
     288:	88 e9       	ldi	r24, 0x98	; 152
     28a:	d4 df       	rcall	.-88     	; 0x234 <read16_LE>
     28c:	99 8b       	std	Y+17, r25	; 0x11
     28e:	88 8b       	std	Y+16, r24	; 0x10
     290:	8a e9       	ldi	r24, 0x9A	; 154
     292:	d0 df       	rcall	.-96     	; 0x234 <read16_LE>
     294:	9b 8b       	std	Y+19, r25	; 0x13
     296:	8a 8b       	std	Y+18, r24	; 0x12
     298:	8c e9       	ldi	r24, 0x9C	; 156
     29a:	cc df       	rcall	.-104    	; 0x234 <read16_LE>
     29c:	9d 8b       	std	Y+21, r25	; 0x15
     29e:	8c 8b       	std	Y+20, r24	; 0x14
     2a0:	8e e9       	ldi	r24, 0x9E	; 158
     2a2:	c8 df       	rcall	.-112    	; 0x234 <read16_LE>
     2a4:	9f 8b       	std	Y+23, r25	; 0x17
     2a6:	8e 8b       	std	Y+22, r24	; 0x16
     2a8:	81 ea       	ldi	r24, 0xA1	; 161
     2aa:	0d df       	rcall	.-486    	; 0xc6 <read8>
     2ac:	88 8f       	std	Y+24, r24	; 0x18
     2ae:	81 ee       	ldi	r24, 0xE1	; 225
     2b0:	c1 df       	rcall	.-126    	; 0x234 <read16_LE>
     2b2:	9a 8f       	std	Y+26, r25	; 0x1a
     2b4:	89 8f       	std	Y+25, r24	; 0x19
     2b6:	83 ee       	ldi	r24, 0xE3	; 227
     2b8:	06 df       	rcall	.-500    	; 0xc6 <read8>
     2ba:	8b 8f       	std	Y+27, r24	; 0x1b
     2bc:	84 ee       	ldi	r24, 0xE4	; 228
     2be:	03 df       	rcall	.-506    	; 0xc6 <read8>
     2c0:	18 2f       	mov	r17, r24
     2c2:	85 ee       	ldi	r24, 0xE5	; 229
     2c4:	00 df       	rcall	.-512    	; 0xc6 <read8>
     2c6:	90 e1       	ldi	r25, 0x10	; 16
     2c8:	19 02       	muls	r17, r25
     2ca:	90 01       	movw	r18, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	28 2b       	or	r18, r24
     2d2:	3d 8f       	std	Y+29, r19	; 0x1d
     2d4:	2c 8f       	std	Y+28, r18	; 0x1c
     2d6:	86 ee       	ldi	r24, 0xE6	; 230
     2d8:	f6 de       	rcall	.-532    	; 0xc6 <read8>
     2da:	18 2f       	mov	r17, r24
     2dc:	85 ee       	ldi	r24, 0xE5	; 229
     2de:	f3 de       	rcall	.-538    	; 0xc6 <read8>
     2e0:	90 e1       	ldi	r25, 0x10	; 16
     2e2:	19 02       	muls	r17, r25
     2e4:	90 01       	movw	r18, r0
     2e6:	11 24       	eor	r1, r1
     2e8:	82 95       	swap	r24
     2ea:	8f 70       	andi	r24, 0x0F	; 15
     2ec:	28 2b       	or	r18, r24
     2ee:	3f 8f       	std	Y+31, r19	; 0x1f
     2f0:	2e 8f       	std	Y+30, r18	; 0x1e
     2f2:	87 ee       	ldi	r24, 0xE7	; 231
     2f4:	e8 de       	rcall	.-560    	; 0xc6 <read8>
     2f6:	88 a3       	std	Y+32, r24	; 0x20
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <bme280_init>:
     300:	ef 92       	push	r14
     302:	0f 93       	push	r16
     304:	66 eb       	ldi	r22, 0xB6	; 182
     306:	80 ee       	ldi	r24, 0xE0	; 224
     308:	f5 de       	rcall	.-534    	; 0xf4 <write8>
     30a:	63 e8       	ldi	r22, 0x83	; 131
     30c:	76 e0       	ldi	r23, 0x06	; 6
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	c7 de       	rcall	.-626    	; 0xa2 <__portable_avr_delay_cycles>
     314:	05 c0       	rjmp	.+10     	; 0x320 <bme280_init+0x20>
     316:	6b e1       	ldi	r22, 0x1B	; 27
     318:	71 e4       	ldi	r23, 0x41	; 65
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	c1 de       	rcall	.-638    	; 0xa2 <__portable_avr_delay_cycles>
     320:	e4 de       	rcall	.-568    	; 0xea <is_reading_calibration>
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	c1 f7       	brne	.-16     	; 0x316 <bme280_init+0x16>
     326:	8b df       	rcall	.-234    	; 0x23e <read_coefficients>
     328:	e1 2c       	mov	r14, r1
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	25 e0       	ldi	r18, 0x05	; 5
     32e:	45 e0       	ldi	r20, 0x05	; 5
     330:	65 e0       	ldi	r22, 0x05	; 5
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	f4 de       	rcall	.-536    	; 0x11e <set_sampling>
     336:	66 e3       	ldi	r22, 0x36	; 54
     338:	72 e8       	ldi	r23, 0x82	; 130
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	b1 de       	rcall	.-670    	; 0xa2 <__portable_avr_delay_cycles>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0f 91       	pop	r16
     346:	ef 90       	pop	r14
     348:	08 95       	ret

0000034a <read24>:
/*!
     @brief  Reads a 24 bit value
     @param reg the register address to read from
     @returns the 24 bit data value read from the device
*/
uint32_t read24(uint8_t reg) {
     34a:	cf 92       	push	r12
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	cf 93       	push	r28
     354:	c8 2f       	mov	r28, r24
    uint32_t value;
    spi_begin_txn(500000, MSBFIRST, SPI_MODE0);
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	60 e2       	ldi	r22, 0x20	; 32
     35c:	71 ea       	ldi	r23, 0xA1	; 161
     35e:	87 e0       	ldi	r24, 0x07	; 7
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fb d0       	rcall	.+502    	; 0x55a <spi_begin_txn>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     364:	2a 98       	cbi	0x05, 2	; 5

    // SS set to low - select slave
    ioport_set_pin_low(SPI_HARDWARE_SS);

    // read, bit 7 high
    spixfer(reg | 0x80);
     366:	8c 2f       	mov	r24, r28
     368:	80 68       	ori	r24, 0x80	; 128
     36a:	a6 de       	rcall	.-692    	; 0xb8 <spixfer>
    value = spixfer(0);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	a4 de       	rcall	.-696    	; 0xb8 <spixfer>
     370:	c8 2e       	mov	r12, r24
     372:	d1 2c       	mov	r13, r1
     374:	e1 2c       	mov	r14, r1
     376:	f1 2c       	mov	r15, r1
     378:	fe 2c       	mov	r15, r14
    value <<= 8;
     37a:	ed 2c       	mov	r14, r13
     37c:	dc 2c       	mov	r13, r12
     37e:	cc 24       	eor	r12, r12
    value |= spixfer(0);
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	9a de       	rcall	.-716    	; 0xb8 <spixfer>
     384:	c8 2a       	or	r12, r24
     386:	fe 2c       	mov	r15, r14
    value <<= 8;
     388:	ed 2c       	mov	r14, r13
     38a:	dc 2c       	mov	r13, r12
     38c:	cc 24       	eor	r12, r12
    value |= spixfer(0);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	93 de       	rcall	.-730    	; 0xb8 <spixfer>
     392:	c8 2a       	or	r12, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     394:	2a 9a       	sbi	0x05, 2	; 5

    // SS set to high - de-select slave
    ioport_set_pin_high(SPI_HARDWARE_SS);
    spi_end_txn();
     396:	c3 d0       	rcall	.+390    	; 0x51e <spi_end_txn>
     398:	c7 01       	movw	r24, r14

    return value;
}
     39a:	b6 01       	movw	r22, r12
     39c:	cf 91       	pop	r28
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <bme280_read_temperature>:
     3a8:	8f 92       	push	r8

/*!
     @brief  Returns the temperature from the sensor
     @returns the temperature read from the device
*/
float bme280_read_temperature(void) {
     3aa:	9f 92       	push	r9
     3ac:	af 92       	push	r10
     3ae:	bf 92       	push	r11
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
    int32_t var1, var2;
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
     3b8:	8a ef       	ldi	r24, 0xFA	; 250
     3ba:	c7 df       	rcall	.-114    	; 0x34a <read24>
     3bc:	6b 01       	movw	r12, r22
     3be:	7c 01       	movw	r14, r24

    // value in case temp measurement was disabled
    if (adc_T == 0x800000) {
     3c0:	c1 14       	cp	r12, r1
     3c2:	d1 04       	cpc	r13, r1
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	e8 06       	cpc	r14, r24
     3c8:	f1 04       	cpc	r15, r1
     3ca:	09 f4       	brne	.+2      	; 0x3ce <bme280_read_temperature+0x26>
     3cc:	8c c0       	rjmp	.+280    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
        return BME_READ_TEMPERATURE_ERR;
    }

    // Problem is here
    adc_T = (adc_T >> 4);
     3ce:	d7 01       	movw	r26, r14
     3d0:	c6 01       	movw	r24, r12
     3d2:	68 94       	set
     3d4:	13 f8       	bld	r1, 3
     3d6:	b5 95       	asr	r27
     3d8:	a7 95       	ror	r26
     3da:	97 95       	ror	r25
     3dc:	87 95       	ror	r24
     3de:	16 94       	lsr	r1
     3e0:	d1 f7       	brne	.-12     	; 0x3d6 <bme280_read_temperature+0x2e>

    printf("adc: %ld\r\n", adc_T);
     3e2:	bf 93       	push	r27
     3e4:	af 93       	push	r26
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	80 e2       	ldi	r24, 0x20	; 32
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	dc d3       	rcall	.+1976   	; 0xbac <printf>

    // Calibrate the temperature sensor data
    var1 = ((((adc_T >> 3) - ((int32_t) bme280_calib_data_read.dig_T1 << 1))) * ((
     3f4:	ee ef       	ldi	r30, 0xFE	; 254
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	a0 e0       	ldi	r26, 0x00	; 0
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
                int32_t) bme280_calib_data_read.dig_T2)) >> 11;

    var2 = (((((adc_T >> 4) - ((int32_t) bme280_calib_data_read.dig_T1)) * (( adc_T >> 4) - ((
     400:	8d 2c       	mov	r8, r13
     402:	9e 2c       	mov	r9, r14
     404:	af 2c       	mov	r10, r15
     406:	bb 24       	eor	r11, r11
     408:	a7 fc       	sbrc	r10, 7
     40a:	ba 94       	dec	r11
     40c:	88 1a       	sub	r8, r24
     40e:	99 0a       	sbc	r9, r25
     410:	aa 0a       	sbc	r10, r26
     412:	bb 0a       	sbc	r11, r27
    //!< to pressure and humidity readings
    int32_t t_fine_adjust = 0;

    int32_t t_fine = var1 + var2 + t_fine_adjust;
    float T = (t_fine * 5 + 128) >> 8;
    return T / 100;
     414:	b7 01       	movw	r22, r14
     416:	a6 01       	movw	r20, r12
     418:	68 94       	set
     41a:	16 f8       	bld	r1, 6
     41c:	75 95       	asr	r23
     41e:	67 95       	ror	r22
     420:	57 95       	ror	r21
     422:	47 95       	ror	r20
     424:	16 94       	lsr	r1
     426:	d1 f7       	brne	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	aa 1f       	adc	r26, r26
     42e:	bb 1f       	adc	r27, r27
     430:	9a 01       	movw	r18, r20
     432:	ab 01       	movw	r20, r22
     434:	28 1b       	sub	r18, r24
     436:	39 0b       	sbc	r19, r25
     438:	4a 0b       	sbc	r20, r26
     43a:	5b 0b       	sbc	r21, r27
     43c:	a2 81       	ldd	r26, Z+2	; 0x02
     43e:	b3 81       	ldd	r27, Z+3	; 0x03
     440:	6e d3       	rcall	.+1756   	; 0xb1e <__mulshisi3>
     442:	6b 01       	movw	r12, r22
     444:	7c 01       	movw	r14, r24
     446:	0b 2e       	mov	r0, r27
     448:	bb e0       	ldi	r27, 0x0B	; 11
     44a:	f5 94       	asr	r15
     44c:	e7 94       	ror	r14
     44e:	d7 94       	ror	r13
     450:	c7 94       	ror	r12
     452:	ba 95       	dec	r27
     454:	d1 f7       	brne	.-12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     456:	b0 2d       	mov	r27, r0
     458:	a5 01       	movw	r20, r10
     45a:	94 01       	movw	r18, r8
     45c:	c5 01       	movw	r24, r10
     45e:	b4 01       	movw	r22, r8
     460:	45 d3       	rcall	.+1674   	; 0xaec <__mulsi3>
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	01 2e       	mov	r0, r17
     468:	1c e0       	ldi	r17, 0x0C	; 12
     46a:	55 95       	asr	r21
     46c:	47 95       	ror	r20
     46e:	37 95       	ror	r19
     470:	27 95       	ror	r18
     472:	1a 95       	dec	r17
     474:	d1 f7       	brne	.-12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     476:	10 2d       	mov	r17, r0
     478:	a4 81       	ldd	r26, Z+4	; 0x04
     47a:	b5 81       	ldd	r27, Z+5	; 0x05
     47c:	50 d3       	rcall	.+1696   	; 0xb1e <__mulshisi3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	07 2e       	mov	r0, r23
     484:	7e e0       	ldi	r23, 0x0E	; 14
     486:	b5 95       	asr	r27
     488:	a7 95       	ror	r26
     48a:	97 95       	ror	r25
     48c:	87 95       	ror	r24
     48e:	7a 95       	dec	r23
     490:	d1 f7       	brne	.-12     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     492:	70 2d       	mov	r23, r0
     494:	8c 0d       	add	r24, r12
     496:	9d 1d       	adc	r25, r13
     498:	ae 1d       	adc	r26, r14
     49a:	bf 1d       	adc	r27, r15
     49c:	6c 01       	movw	r12, r24
     49e:	7d 01       	movw	r14, r26
     4a0:	cc 0c       	add	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ee 1c       	adc	r14, r14
     4a6:	ff 1c       	adc	r15, r15
     4a8:	cc 0c       	add	r12, r12
     4aa:	dd 1c       	adc	r13, r13
     4ac:	ee 1c       	adc	r14, r14
     4ae:	ff 1c       	adc	r15, r15
     4b0:	8c 0d       	add	r24, r12
     4b2:	9d 1d       	adc	r25, r13
     4b4:	ae 1d       	adc	r26, r14
     4b6:	bf 1d       	adc	r27, r15
     4b8:	80 58       	subi	r24, 0x80	; 128
     4ba:	9f 4f       	sbci	r25, 0xFF	; 255
     4bc:	af 4f       	sbci	r26, 0xFF	; 255
     4be:	bf 4f       	sbci	r27, 0xFF	; 255
     4c0:	69 2f       	mov	r22, r25
     4c2:	7a 2f       	mov	r23, r26
     4c4:	8b 2f       	mov	r24, r27
     4c6:	99 27       	eor	r25, r25
     4c8:	87 fd       	sbrc	r24, 7
     4ca:	9a 95       	dec	r25
     4cc:	83 d2       	rcall	.+1286   	; 0x9d4 <__floatsisf>
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	48 ec       	ldi	r20, 0xC8	; 200
     4d4:	52 e4       	ldi	r21, 0x42	; 66
     4d6:	14 d2       	rcall	.+1064   	; 0x900 <__divsf3>
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
    int32_t var1, var2;
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);

    // value in case temp measurement was disabled
    if (adc_T == 0x800000) {
        return BME_READ_TEMPERATURE_ERR;
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e8       	ldi	r24, 0x80	; 128
     4ec:	9f eb       	ldi	r25, 0xBF	; 191
    int32_t t_fine_adjust = 0;

    int32_t t_fine = var1 + var2 + t_fine_adjust;
    float T = (t_fine * 5 + 128) >> 8;
    return T / 100;
}
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	9f 90       	pop	r9
     4fc:	8f 90       	pop	r8
     4fe:	08 95       	ret

00000500 <spi_init>:
     500:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
     502:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
     504:	8c b5       	in	r24, 0x2c	; 44
     506:	80 61       	ori	r24, 0x10	; 16
     508:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
     50a:	8c b5       	in	r24, 0x2c	; 44
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	8c bd       	out	0x2c, r24	; 44
     510:	25 9a       	sbi	0x04, 5	; 4
     512:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
     514:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
     518:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
     51c:	08 95       	ret

0000051e <spi_end_txn>:
/*
    This function configures SPI bus to release it
*/
void spi_end_txn (void) {
    // Reduce the number of SPI initialized
    if (num_initialized) {
     51e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
     522:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	39 f0       	breq	.+14     	; 0x538 <spi_end_txn+0x1a>
        num_initialized--;
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
     530:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
    }

    // If no more usage of SPI bus, release the SPI bus
    // Disable SPI
    if (num_initialized == 0) {
     534:	89 2b       	or	r24, r25
     536:	19 f4       	brne	.+6      	; 0x53e <spi_end_txn+0x20>
        SPCR &= ~(1 << SPE);
     538:	8c b5       	in	r24, 0x2c	; 44
     53a:	8f 7b       	andi	r24, 0xBF	; 191
     53c:	8c bd       	out	0x2c, r24	; 44
     53e:	08 95       	ret

00000540 <get_clock_divider_bits>:
    if (clockDiv == 6) {
        clockDiv = 7;
    }

    return clockDiv;
}
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	08 95       	ret

00000544 <set_clock_divider>:
/*
    This function sets the clock mode given a clock div value
*/
void set_clock_divider(uint8_t clockDiv) {
    // Invert the SPI2X bit
    uint8_t clock_div_invert = clockDiv ^ 0x1;
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	89 27       	eor	r24, r25

    SPCR |= ((clock_div_invert >> 1) & SPI_CLOCK_MASK);
     548:	2c b5       	in	r18, 0x2c	; 44
     54a:	98 2f       	mov	r25, r24
     54c:	96 95       	lsr	r25
     54e:	93 70       	andi	r25, 0x03	; 3
     550:	92 2b       	or	r25, r18
     552:	9c bd       	out	0x2c, r25	; 44
    SPSR = (clock_div_invert & SPI_2XCLOCK_MASK);
     554:	81 70       	andi	r24, 0x01	; 1
     556:	8d bd       	out	0x2d, r24	; 45
     558:	08 95       	ret

0000055a <spi_begin_txn>:

    Example:
 		SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
 		SPISettings(500000, MSBFIRST, SPI_MODE0)
*/
void spi_begin_txn(uint32_t clock, uint8_t bit_order, uint8_t data_mode) {
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	86 2f       	mov	r24, r22
     560:	d4 2f       	mov	r29, r20
     562:	c2 2f       	mov	r28, r18
    // Setup SPI in master, again
    SPCR |= (1 << SPE);
     564:	9c b5       	in	r25, 0x2c	; 44
     566:	90 64       	ori	r25, 0x40	; 64
     568:	9c bd       	out	0x2c, r25	; 44
    SPCR |= (1 << MSTR);
     56a:	9c b5       	in	r25, 0x2c	; 44
     56c:	90 61       	ori	r25, 0x10	; 16
     56e:	9c bd       	out	0x2c, r25	; 44

    // Setup clock
    uint8_t clock_div_bits = get_clock_divider_bits(clock);
     570:	e7 df       	rcall	.-50     	; 0x540 <get_clock_divider_bits>
    set_clock_divider(clock_div_bits);
     572:	e8 df       	rcall	.-48     	; 0x544 <set_clock_divider>
     574:	8c b5       	in	r24, 0x2c	; 44

    // Setup data mode
    SPCR |= (data_mode & SPI_MODE_MASK);
     576:	2c 2f       	mov	r18, r28
     578:	2c 70       	andi	r18, 0x0C	; 12
     57a:	28 2b       	or	r18, r24
     57c:	2c bd       	out	0x2c, r18	; 44
     57e:	8c b5       	in	r24, 0x2c	; 44

    // Setup bit order
    SPCR |= ((bit_order == LSBFIRST) ? (1 << DORD) : 0);
     580:	dd 23       	and	r29, r29
     582:	11 f0       	breq	.+4      	; 0x588 <spi_begin_txn+0x2e>
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	01 c0       	rjmp	.+2      	; 0x58a <spi_begin_txn+0x30>
     588:	90 e2       	ldi	r25, 0x20	; 32
     58a:	89 2b       	or	r24, r25
     58c:	8c bd       	out	0x2c, r24	; 44
     58e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>

    num_initialized++;
     592:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
     59c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
     5a0:	df 91       	pop	r29
}
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
     5a6:	cf 93       	push	r28
     5a8:	c8 2f       	mov	r28, r24

    if (c == '\a') {
     5aa:	87 30       	cpi	r24, 0x07	; 7
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
     5ae:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <__iob+0x4>
     5b2:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <__iob+0x5>
     5b6:	47 e0       	ldi	r20, 0x07	; 7
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	8b e2       	ldi	r24, 0x2B	; 43
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	c2 d2       	rcall	.+1412   	; 0xb48 <fwrite>
        return 0;
     5c4:	0b c0       	rjmp	.+22     	; 0x5dc <uart_putchar+0x36>
    }

    if (c == '\n') {
     5c6:	8a 30       	cpi	r24, 0x0A	; 10
     5c8:	11 f4       	brne	.+4      	; 0x5ce <uart_putchar+0x28>
        uart_putchar('\r', stream);
     5ca:	8d e0       	ldi	r24, 0x0D	; 13
     5cc:	ec df       	rcall	.-40     	; 0x5a6 <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
     5ce:	e0 ec       	ldi	r30, 0xC0	; 192
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	85 ff       	sbrs	r24, 5
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <uart_putchar+0x2c>
    UDR0 = c;
     5d8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
     600:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <rxp.2118>
     604:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <rxp.2118+0x1>
     608:	23 2b       	or	r18, r19
     60a:	09 f0       	breq	.+2      	; 0x60e <uart_getchar+0x2a>
     60c:	cc c0       	rjmp	.+408    	; 0x7a6 <uart_getchar+0x1c2>
     60e:	8c 01       	movw	r16, r24
     610:	0f 2e       	mov	r0, r31
     612:	fc ea       	ldi	r31, 0xAC	; 172
     614:	8f 2e       	mov	r8, r31
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	9f 2e       	mov	r9, r31
     61a:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
     61c:	c0 ec       	ldi	r28, 0xC0	; 192
     61e:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
     620:	0f 2e       	mov	r0, r31
     622:	f6 ec       	ldi	r31, 0xC6	; 198
     624:	cf 2e       	mov	r12, r31
     626:	d1 2c       	mov	r13, r1
     628:	f0 2d       	mov	r31, r0
     62a:	54 01       	movw	r10, r8
     62c:	0f 2e       	mov	r0, r31
     62e:	fb ea       	ldi	r31, 0xAB	; 171
     630:	6f 2e       	mov	r6, r31
     632:	f1 e0       	ldi	r31, 0x01	; 1
     634:	7f 2e       	mov	r7, r31
     636:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
     638:	88 81       	ld	r24, Y
     63a:	88 23       	and	r24, r24
     63c:	ec f7       	brge	.-6      	; 0x638 <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
     63e:	88 81       	ld	r24, Y
     640:	84 fd       	sbrc	r24, 4
     642:	c4 c0       	rjmp	.+392    	; 0x7cc <uart_getchar+0x1e8>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
     644:	88 81       	ld	r24, Y
     646:	83 fd       	sbrc	r24, 3
     648:	c4 c0       	rjmp	.+392    	; 0x7d2 <uart_getchar+0x1ee>
                return _FDEV_ERR;
            }

            c = UDR0;
     64a:	f6 01       	movw	r30, r12
     64c:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
     64e:	8d 30       	cpi	r24, 0x0D	; 13
     650:	11 f0       	breq	.+4      	; 0x656 <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
     652:	8a 30       	cpi	r24, 0x0A	; 10
     654:	61 f4       	brne	.+24     	; 0x66e <uart_getchar+0x8a>
                *cp = c;
     656:	8a e0       	ldi	r24, 0x0A	; 10
     658:	f4 01       	movw	r30, r8
     65a:	80 83       	st	Z, r24
                uart_putchar(c, stream);
     65c:	b8 01       	movw	r22, r16
     65e:	a3 df       	rcall	.-186    	; 0x5a6 <uart_putchar>
                rxp = b;
     660:	8c ea       	ldi	r24, 0xAC	; 172
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <rxp.2118+0x1>
     668:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <rxp.2118>
                break;
     66c:	9c c0       	rjmp	.+312    	; 0x7a6 <uart_getchar+0x1c2>
            }
            else if (c == '\t') {
     66e:	89 30       	cpi	r24, 0x09	; 9
     670:	39 f0       	breq	.+14     	; 0x680 <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     672:	90 ee       	ldi	r25, 0xE0	; 224
     674:	98 0f       	add	r25, r24
     676:	9f 35       	cpi	r25, 0x5F	; 95
     678:	20 f0       	brcs	.+8      	; 0x682 <uart_getchar+0x9e>
     67a:	80 3a       	cpi	r24, 0xA0	; 160
     67c:	a8 f0       	brcs	.+42     	; 0x6a8 <uart_getchar+0xc4>
     67e:	01 c0       	rjmp	.+2      	; 0x682 <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
     680:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
     682:	fb ef       	ldi	r31, 0xFB	; 251
     684:	8f 16       	cp	r8, r31
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	9f 06       	cpc	r9, r31
     68a:	21 f4       	brne	.+8      	; 0x694 <uart_getchar+0xb0>
                    uart_putchar('\a', stream);
     68c:	b8 01       	movw	r22, r16
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	8a df       	rcall	.-236    	; 0x5a6 <uart_putchar>
     692:	d2 cf       	rjmp	.-92     	; 0x638 <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
     694:	74 01       	movw	r14, r8
     696:	9f ef       	ldi	r25, 0xFF	; 255
     698:	e9 1a       	sub	r14, r25
     69a:	f9 0a       	sbc	r15, r25
     69c:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
     69e:	80 83       	st	Z, r24
     6a0:	b8 01       	movw	r22, r16
     6a2:	81 df       	rcall	.-254    	; 0x5a6 <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
     6a4:	47 01       	movw	r8, r14
     6a6:	c8 cf       	rjmp	.-112    	; 0x638 <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
     6a8:	82 31       	cpi	r24, 0x12	; 18
     6aa:	b9 f1       	breq	.+110    	; 0x71a <uart_getchar+0x136>
     6ac:	30 f4       	brcc	.+12     	; 0x6ba <uart_getchar+0xd6>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <uart_getchar+0xd0>
     6b2:	92 c0       	rjmp	.+292    	; 0x7d8 <uart_getchar+0x1f4>
     6b4:	88 30       	cpi	r24, 0x08	; 8
     6b6:	e9 f0       	breq	.+58     	; 0x6f2 <uart_getchar+0x10e>
     6b8:	bf cf       	rjmp	.-130    	; 0x638 <uart_getchar+0x54>
     6ba:	87 31       	cpi	r24, 0x17	; 23
     6bc:	29 f0       	breq	.+10     	; 0x6c8 <uart_getchar+0xe4>
     6be:	8f 37       	cpi	r24, 0x7F	; 127
     6c0:	c1 f0       	breq	.+48     	; 0x6f2 <uart_getchar+0x10e>
     6c2:	85 31       	cpi	r24, 0x15	; 21
     6c4:	79 f0       	breq	.+30     	; 0x6e4 <uart_getchar+0x100>
     6c6:	b8 cf       	rjmp	.-144    	; 0x638 <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
     6c8:	fc ea       	ldi	r31, 0xAC	; 172
     6ca:	8f 16       	cp	r8, r31
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	9f 06       	cpc	r9, r31
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <uart_getchar+0xf0>
     6d2:	08 f4       	brcc	.+2      	; 0x6d6 <uart_getchar+0xf2>
     6d4:	b1 cf       	rjmp	.-158    	; 0x638 <uart_getchar+0x54>
     6d6:	f4 01       	movw	r30, r8
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	80 81       	ld	r24, Z
     6dc:	80 32       	cpi	r24, 0x20	; 32
     6de:	09 f0       	breq	.+2      	; 0x6e2 <uart_getchar+0xfe>
     6e0:	4a c0       	rjmp	.+148    	; 0x776 <uart_getchar+0x192>
     6e2:	aa cf       	rjmp	.-172    	; 0x638 <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
     6e4:	8c ea       	ldi	r24, 0xAC	; 172
     6e6:	88 16       	cp	r8, r24
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	98 06       	cpc	r9, r24
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <uart_getchar+0x10c>
     6ee:	70 f5       	brcc	.+92     	; 0x74c <uart_getchar+0x168>
     6f0:	a3 cf       	rjmp	.-186    	; 0x638 <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
     6f2:	9c ea       	ldi	r25, 0xAC	; 172
     6f4:	89 16       	cp	r8, r25
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	99 06       	cpc	r9, r25
     6fa:	09 f0       	breq	.+2      	; 0x6fe <uart_getchar+0x11a>
     6fc:	08 f4       	brcc	.+2      	; 0x700 <uart_getchar+0x11c>
                    uart_putchar('\b', stream);
     6fe:	9c cf       	rjmp	.-200    	; 0x638 <uart_getchar+0x54>
     700:	b8 01       	movw	r22, r16
     702:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
     704:	50 df       	rcall	.-352    	; 0x5a6 <uart_putchar>
     706:	b8 01       	movw	r22, r16
     708:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
     70a:	4d df       	rcall	.-358    	; 0x5a6 <uart_putchar>
     70c:	b8 01       	movw	r22, r16
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	4a df       	rcall	.-364    	; 0x5a6 <uart_putchar>
                    cp--;
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	8e 1a       	sub	r8, r30
     716:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
     718:	8f cf       	rjmp	.-226    	; 0x638 <uart_getchar+0x54>
     71a:	b8 01       	movw	r22, r16
     71c:	8d e0       	ldi	r24, 0x0D	; 13
     71e:	43 df       	rcall	.-378    	; 0x5a6 <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
     720:	fc ea       	ldi	r31, 0xAC	; 172
     722:	8f 16       	cp	r8, r31
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	9f 06       	cpc	r9, r31
     728:	09 f0       	breq	.+2      	; 0x72c <uart_getchar+0x148>
     72a:	08 f4       	brcc	.+2      	; 0x72e <uart_getchar+0x14a>
     72c:	85 cf       	rjmp	.-246    	; 0x638 <uart_getchar+0x54>
     72e:	0f 2e       	mov	r0, r31
     730:	fc ea       	ldi	r31, 0xAC	; 172
     732:	ef 2e       	mov	r14, r31
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
     738:	f0 2d       	mov	r31, r0
     73a:	b8 01       	movw	r22, r16
     73c:	f7 01       	movw	r30, r14
     73e:	81 91       	ld	r24, Z+
     740:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
     742:	31 df       	rcall	.-414    	; 0x5a6 <uart_putchar>
     744:	8e 14       	cp	r8, r14
     746:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
     748:	c1 f7       	brne	.-16     	; 0x73a <uart_getchar+0x156>
     74a:	76 cf       	rjmp	.-276    	; 0x638 <uart_getchar+0x54>
     74c:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	2a df       	rcall	.-428    	; 0x5a6 <uart_putchar>
     752:	b8 01       	movw	r22, r16
     754:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
     756:	27 df       	rcall	.-434    	; 0x5a6 <uart_putchar>
     758:	b8 01       	movw	r22, r16
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	24 df       	rcall	.-440    	; 0x5a6 <uart_putchar>
                    cp--;
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	8f 1a       	sub	r8, r31
     762:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
     764:	8c ea       	ldi	r24, 0xAC	; 172
     766:	88 16       	cp	r8, r24
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	98 06       	cpc	r9, r24
     76c:	79 f7       	brne	.-34     	; 0x74c <uart_getchar+0x168>
     76e:	f3 01       	movw	r30, r6
     770:	31 96       	adiw	r30, 0x01	; 1
     772:	4f 01       	movw	r8, r30
     774:	61 cf       	rjmp	.-318    	; 0x638 <uart_getchar+0x54>
     776:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
     778:	f1 e0       	ldi	r31, 0x01	; 1
     77a:	ef 1a       	sub	r14, r31
     77c:	f1 08       	sbc	r15, r1
     77e:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	11 df       	rcall	.-478    	; 0x5a6 <uart_putchar>
     784:	b8 01       	movw	r22, r16
     786:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
     788:	0e df       	rcall	.-484    	; 0x5a6 <uart_putchar>
     78a:	b8 01       	movw	r22, r16
     78c:	88 e0       	ldi	r24, 0x08	; 8
     78e:	0b df       	rcall	.-490    	; 0x5a6 <uart_putchar>
                    cp--;
     790:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
     792:	ae 14       	cp	r10, r14
     794:	bf 04       	cpc	r11, r15
     796:	09 f4       	brne	.+2      	; 0x79a <uart_getchar+0x1b6>
     798:	4f cf       	rjmp	.-354    	; 0x638 <uart_getchar+0x54>
     79a:	f7 01       	movw	r30, r14
     79c:	82 91       	ld	r24, -Z
     79e:	7f 01       	movw	r14, r30
     7a0:	80 32       	cpi	r24, 0x20	; 32
     7a2:	69 f7       	brne	.-38     	; 0x77e <uart_getchar+0x19a>
     7a4:	49 cf       	rjmp	.-366    	; 0x638 <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
     7a6:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <rxp.2118>
     7aa:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <rxp.2118+0x1>
     7ae:	cf 01       	movw	r24, r30
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <rxp.2118+0x1>
     7b6:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <rxp.2118>
     7ba:	80 81       	ld	r24, Z

    if (c == '\n') {
     7bc:	8a 30       	cpi	r24, 0x0A	; 10
     7be:	21 f4       	brne	.+8      	; 0x7c8 <uart_getchar+0x1e4>
        rxp = 0;
     7c0:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <rxp.2118+0x1>
     7c4:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <rxp.2118>
    }

    return c;
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	08 c0       	rjmp	.+16     	; 0x7dc <uart_getchar+0x1f8>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
     7cc:	8e ef       	ldi	r24, 0xFE	; 254
     7ce:	9f ef       	ldi	r25, 0xFF	; 255
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <uart_getchar+0x1f8>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <uart_getchar+0x1f8>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	af 90       	pop	r10
     7f0:	9f 90       	pop	r9
     7f2:	8f 90       	pop	r8
     7f4:	7f 90       	pop	r7
     7f6:	6f 90       	pop	r6
     7f8:	08 95       	ret

000007fa <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
     7fa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
     7fe:	80 e1       	ldi	r24, 0x10	; 16
     800:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
     804:	88 e1       	ldi	r24, 0x18	; 24
     806:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
     80a:	86 e0       	ldi	r24, 0x06	; 6
     80c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
     810:	ef e1       	ldi	r30, 0x1F	; 31
     812:	f2 e0       	ldi	r31, 0x02	; 2
     814:	82 e1       	ldi	r24, 0x12	; 18
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	91 83       	std	Z+1, r25	; 0x01
     81a:	80 83       	st	Z, r24
     81c:	93 83       	std	Z+3, r25	; 0x03
     81e:	82 83       	std	Z+2, r24	; 0x02
     820:	08 95       	ret

00000822 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     822:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     824:	84 b1       	in	r24, 0x04	; 4
     826:	80 62       	ori	r24, 0x20	; 32
     828:	8f 77       	andi	r24, 0x7F	; 127
     82a:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     82c:	89 2f       	mov	r24, r25
     82e:	80 6a       	ori	r24, 0xA0	; 160
     830:	85 b9       	out	0x05, r24	; 5
     832:	08 95       	ret

00000834 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     834:	04 c0       	rjmp	.+8      	; 0x83e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     836:	61 50       	subi	r22, 0x01	; 1
     838:	71 09       	sbc	r23, r1
     83a:	81 09       	sbc	r24, r1
     83c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     83e:	61 15       	cp	r22, r1
     840:	71 05       	cpc	r23, r1
     842:	81 05       	cpc	r24, r1
     844:	91 05       	cpc	r25, r1
     846:	b9 f7       	brne	.-18     	; 0x836 <__portable_avr_delay_cycles+0x2>
     848:	08 95       	ret

0000084a <print_all_values>:
    }

    else while (1);
}

void print_all_values(void) {
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	e2 97       	sbiw	r28, 0x32	; 50
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
    char c[50]; //size of the number
    sprintf(c, "%f", bme280_read_temperature());
     862:	a2 dd       	rcall	.-1212   	; 0x3a8 <bme280_read_temperature>
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	7f 93       	push	r23
     86a:	6f 93       	push	r22
     86c:	83 e3       	ldi	r24, 0x33	; 51
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	8e 01       	movw	r16, r28
     876:	0f 5f       	subi	r16, 0xFF	; 255
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	1f 93       	push	r17
     87c:	0f 93       	push	r16
     87e:	d9 d1       	rcall	.+946    	; 0xc32 <sprintf>
    printf("Temperature: %s\r\n", c);
     880:	1f 93       	push	r17
     882:	0f 93       	push	r16
     884:	86 e3       	ldi	r24, 0x36	; 54
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	8f d1       	rcall	.+798    	; 0xbac <printf>
}
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	e2 96       	adiw	r28, 0x32	; 50
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <main>:
// Print all temp, pressure, altitude and humidity values
void print_all_values(void);

int main (void) {
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
     8ae:	b9 df       	rcall	.-142    	; 0x822 <board_init>

    ioport_init();
    uart_init();
     8b0:	a4 df       	rcall	.-184    	; 0x7fa <uart_init>

    // Sensors initialization
    spi_init();
     8b2:	26 de       	rcall	.-948    	; 0x500 <spi_init>

    printf("----- Default testing -----\r\n");
     8b4:	88 e4       	ldi	r24, 0x48	; 72
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	8c d1       	rcall	.+792    	; 0xbd2 <puts>
    uint8_t sensor_id = read8(BME280_REGISTER_CHIPID);
     8ba:	80 ed       	ldi	r24, 0xD0	; 208
     8bc:	04 dc       	rcall	.-2040   	; 0xc6 <read8>
     8be:	c8 2f       	mov	r28, r24
     8c0:	1f 92       	push	r1
    printf("Sensor ID: 0x%x\r\n", sensor_id);
     8c2:	8f 93       	push	r24
     8c4:	85 e6       	ldi	r24, 0x65	; 101
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	6f d1       	rcall	.+734    	; 0xbac <printf>
     8ce:	0f 90       	pop	r0

    if (sensor_id == 0x58) {
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	c8 35       	cpi	r28, 0x58	; 88
     8d8:	91 f4       	brne	.+36     	; 0x8fe <main+0x50>
        int ret = bme280_init();
     8da:	12 dd       	rcall	.-1500   	; 0x300 <bme280_init>
     8dc:	01 97       	sbiw	r24, 0x01	; 1

        if (ret == BME_INIT_NO_ERR) {
     8de:	21 f4       	brne	.+8      	; 0x8e8 <main+0x3a>
            printf("Sensor Initialized\r\n");
     8e0:	87 e7       	ldi	r24, 0x77	; 119
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	76 d1       	rcall	.+748    	; 0xbd2 <puts>
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <main+0x42>
        }
        else {
            printf("Sensor initialization failed!\r\n");
     8e8:	8b e8       	ldi	r24, 0x8B	; 139
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	72 d1       	rcall	.+740    	; 0xbd2 <puts>
     8ee:	ff cf       	rjmp	.-2      	; 0x8ee <main+0x40>

            while (1);
        }

        while (1) {
            print_all_values();
     8f0:	ac df       	rcall	.-168    	; 0x84a <print_all_values>
     8f2:	6b e6       	ldi	r22, 0x6B	; 107
            delay_ms(10000);
     8f4:	7e e6       	ldi	r23, 0x6E	; 110
     8f6:	89 e1       	ldi	r24, 0x19	; 25
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9c df       	rcall	.-200    	; 0x834 <__portable_avr_delay_cycles>
     8fc:	f9 cf       	rjmp	.-14     	; 0x8f0 <main+0x42>
     8fe:	ff cf       	rjmp	.-2      	; 0x8fe <main+0x50>

00000900 <__divsf3>:
     900:	0c d0       	rcall	.+24     	; 0x91a <__divsf3x>
     902:	ba c0       	rjmp	.+372    	; 0xa78 <__fp_round>
     904:	b2 d0       	rcall	.+356    	; 0xa6a <__fp_pscB>
     906:	40 f0       	brcs	.+16     	; 0x918 <__divsf3+0x18>
     908:	a9 d0       	rcall	.+338    	; 0xa5c <__fp_pscA>
     90a:	30 f0       	brcs	.+12     	; 0x918 <__divsf3+0x18>
     90c:	21 f4       	brne	.+8      	; 0x916 <__divsf3+0x16>
     90e:	5f 3f       	cpi	r21, 0xFF	; 255
     910:	19 f0       	breq	.+6      	; 0x918 <__divsf3+0x18>
     912:	9b c0       	rjmp	.+310    	; 0xa4a <__fp_inf>
     914:	51 11       	cpse	r21, r1
     916:	e4 c0       	rjmp	.+456    	; 0xae0 <__fp_szero>
     918:	9e c0       	rjmp	.+316    	; 0xa56 <__fp_nan>

0000091a <__divsf3x>:
     91a:	bf d0       	rcall	.+382    	; 0xa9a <__fp_split3>
     91c:	98 f3       	brcs	.-26     	; 0x904 <__divsf3+0x4>

0000091e <__divsf3_pse>:
     91e:	99 23       	and	r25, r25
     920:	c9 f3       	breq	.-14     	; 0x914 <__divsf3+0x14>
     922:	55 23       	and	r21, r21
     924:	b1 f3       	breq	.-20     	; 0x912 <__divsf3+0x12>
     926:	95 1b       	sub	r25, r21
     928:	55 0b       	sbc	r21, r21
     92a:	bb 27       	eor	r27, r27
     92c:	aa 27       	eor	r26, r26
     92e:	62 17       	cp	r22, r18
     930:	73 07       	cpc	r23, r19
     932:	84 07       	cpc	r24, r20
     934:	38 f0       	brcs	.+14     	; 0x944 <__divsf3_pse+0x26>
     936:	9f 5f       	subi	r25, 0xFF	; 255
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	44 1f       	adc	r20, r20
     940:	aa 1f       	adc	r26, r26
     942:	a9 f3       	breq	.-22     	; 0x92e <__divsf3_pse+0x10>
     944:	33 d0       	rcall	.+102    	; 0x9ac <__divsf3_pse+0x8e>
     946:	0e 2e       	mov	r0, r30
     948:	3a f0       	brmi	.+14     	; 0x958 <__divsf3_pse+0x3a>
     94a:	e0 e8       	ldi	r30, 0x80	; 128
     94c:	30 d0       	rcall	.+96     	; 0x9ae <__divsf3_pse+0x90>
     94e:	91 50       	subi	r25, 0x01	; 1
     950:	50 40       	sbci	r21, 0x00	; 0
     952:	e6 95       	lsr	r30
     954:	00 1c       	adc	r0, r0
     956:	ca f7       	brpl	.-14     	; 0x94a <__divsf3_pse+0x2c>
     958:	29 d0       	rcall	.+82     	; 0x9ac <__divsf3_pse+0x8e>
     95a:	fe 2f       	mov	r31, r30
     95c:	27 d0       	rcall	.+78     	; 0x9ac <__divsf3_pse+0x8e>
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	88 1f       	adc	r24, r24
     964:	bb 1f       	adc	r27, r27
     966:	26 17       	cp	r18, r22
     968:	37 07       	cpc	r19, r23
     96a:	48 07       	cpc	r20, r24
     96c:	ab 07       	cpc	r26, r27
     96e:	b0 e8       	ldi	r27, 0x80	; 128
     970:	09 f0       	breq	.+2      	; 0x974 <__divsf3_pse+0x56>
     972:	bb 0b       	sbc	r27, r27
     974:	80 2d       	mov	r24, r0
     976:	bf 01       	movw	r22, r30
     978:	ff 27       	eor	r31, r31
     97a:	93 58       	subi	r25, 0x83	; 131
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
     97e:	2a f0       	brmi	.+10     	; 0x98a <__divsf3_pse+0x6c>
     980:	9e 3f       	cpi	r25, 0xFE	; 254
     982:	51 05       	cpc	r21, r1
     984:	68 f0       	brcs	.+26     	; 0x9a0 <__divsf3_pse+0x82>
     986:	61 c0       	rjmp	.+194    	; 0xa4a <__fp_inf>
     988:	ab c0       	rjmp	.+342    	; 0xae0 <__fp_szero>
     98a:	5f 3f       	cpi	r21, 0xFF	; 255
     98c:	ec f3       	brlt	.-6      	; 0x988 <__divsf3_pse+0x6a>
     98e:	98 3e       	cpi	r25, 0xE8	; 232
     990:	dc f3       	brlt	.-10     	; 0x988 <__divsf3_pse+0x6a>
     992:	86 95       	lsr	r24
     994:	77 95       	ror	r23
     996:	67 95       	ror	r22
     998:	b7 95       	ror	r27
     99a:	f7 95       	ror	r31
     99c:	9f 5f       	subi	r25, 0xFF	; 255
     99e:	c9 f7       	brne	.-14     	; 0x992 <__divsf3_pse+0x74>
     9a0:	88 0f       	add	r24, r24
     9a2:	91 1d       	adc	r25, r1
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	97 f9       	bld	r25, 7
     9aa:	08 95       	ret
     9ac:	e1 e0       	ldi	r30, 0x01	; 1
     9ae:	66 0f       	add	r22, r22
     9b0:	77 1f       	adc	r23, r23
     9b2:	88 1f       	adc	r24, r24
     9b4:	bb 1f       	adc	r27, r27
     9b6:	62 17       	cp	r22, r18
     9b8:	73 07       	cpc	r23, r19
     9ba:	84 07       	cpc	r24, r20
     9bc:	ba 07       	cpc	r27, r26
     9be:	20 f0       	brcs	.+8      	; 0x9c8 <__divsf3_pse+0xaa>
     9c0:	62 1b       	sub	r22, r18
     9c2:	73 0b       	sbc	r23, r19
     9c4:	84 0b       	sbc	r24, r20
     9c6:	ba 0b       	sbc	r27, r26
     9c8:	ee 1f       	adc	r30, r30
     9ca:	88 f7       	brcc	.-30     	; 0x9ae <__divsf3_pse+0x90>
     9cc:	e0 95       	com	r30
     9ce:	08 95       	ret

000009d0 <__floatunsisf>:
     9d0:	e8 94       	clt
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__floatsisf+0x12>

000009d4 <__floatsisf>:
     9d4:	97 fb       	bst	r25, 7
     9d6:	3e f4       	brtc	.+14     	; 0x9e6 <__floatsisf+0x12>
     9d8:	90 95       	com	r25
     9da:	80 95       	com	r24
     9dc:	70 95       	com	r23
     9de:	61 95       	neg	r22
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	8f 4f       	sbci	r24, 0xFF	; 255
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	99 23       	and	r25, r25
     9e8:	a9 f0       	breq	.+42     	; 0xa14 <__floatsisf+0x40>
     9ea:	f9 2f       	mov	r31, r25
     9ec:	96 e9       	ldi	r25, 0x96	; 150
     9ee:	bb 27       	eor	r27, r27
     9f0:	93 95       	inc	r25
     9f2:	f6 95       	lsr	r31
     9f4:	87 95       	ror	r24
     9f6:	77 95       	ror	r23
     9f8:	67 95       	ror	r22
     9fa:	b7 95       	ror	r27
     9fc:	f1 11       	cpse	r31, r1
     9fe:	f8 cf       	rjmp	.-16     	; 0x9f0 <__floatsisf+0x1c>
     a00:	fa f4       	brpl	.+62     	; 0xa40 <__floatsisf+0x6c>
     a02:	bb 0f       	add	r27, r27
     a04:	11 f4       	brne	.+4      	; 0xa0a <__floatsisf+0x36>
     a06:	60 ff       	sbrs	r22, 0
     a08:	1b c0       	rjmp	.+54     	; 0xa40 <__floatsisf+0x6c>
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	8f 4f       	sbci	r24, 0xFF	; 255
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	16 c0       	rjmp	.+44     	; 0xa40 <__floatsisf+0x6c>
     a14:	88 23       	and	r24, r24
     a16:	11 f0       	breq	.+4      	; 0xa1c <__floatsisf+0x48>
     a18:	96 e9       	ldi	r25, 0x96	; 150
     a1a:	11 c0       	rjmp	.+34     	; 0xa3e <__floatsisf+0x6a>
     a1c:	77 23       	and	r23, r23
     a1e:	21 f0       	breq	.+8      	; 0xa28 <__floatsisf+0x54>
     a20:	9e e8       	ldi	r25, 0x8E	; 142
     a22:	87 2f       	mov	r24, r23
     a24:	76 2f       	mov	r23, r22
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <__floatsisf+0x5e>
     a28:	66 23       	and	r22, r22
     a2a:	71 f0       	breq	.+28     	; 0xa48 <__floatsisf+0x74>
     a2c:	96 e8       	ldi	r25, 0x86	; 134
     a2e:	86 2f       	mov	r24, r22
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	2a f0       	brmi	.+10     	; 0xa40 <__floatsisf+0x6c>
     a36:	9a 95       	dec	r25
     a38:	66 0f       	add	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	88 1f       	adc	r24, r24
     a3e:	da f7       	brpl	.-10     	; 0xa36 <__floatsisf+0x62>
     a40:	88 0f       	add	r24, r24
     a42:	96 95       	lsr	r25
     a44:	87 95       	ror	r24
     a46:	97 f9       	bld	r25, 7
     a48:	08 95       	ret

00000a4a <__fp_inf>:
     a4a:	97 f9       	bld	r25, 7
     a4c:	9f 67       	ori	r25, 0x7F	; 127
     a4e:	80 e8       	ldi	r24, 0x80	; 128
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	08 95       	ret

00000a56 <__fp_nan>:
     a56:	9f ef       	ldi	r25, 0xFF	; 255
     a58:	80 ec       	ldi	r24, 0xC0	; 192
     a5a:	08 95       	ret

00000a5c <__fp_pscA>:
     a5c:	00 24       	eor	r0, r0
     a5e:	0a 94       	dec	r0
     a60:	16 16       	cp	r1, r22
     a62:	17 06       	cpc	r1, r23
     a64:	18 06       	cpc	r1, r24
     a66:	09 06       	cpc	r0, r25
     a68:	08 95       	ret

00000a6a <__fp_pscB>:
     a6a:	00 24       	eor	r0, r0
     a6c:	0a 94       	dec	r0
     a6e:	12 16       	cp	r1, r18
     a70:	13 06       	cpc	r1, r19
     a72:	14 06       	cpc	r1, r20
     a74:	05 06       	cpc	r0, r21
     a76:	08 95       	ret

00000a78 <__fp_round>:
     a78:	09 2e       	mov	r0, r25
     a7a:	03 94       	inc	r0
     a7c:	00 0c       	add	r0, r0
     a7e:	11 f4       	brne	.+4      	; 0xa84 <__fp_round+0xc>
     a80:	88 23       	and	r24, r24
     a82:	52 f0       	brmi	.+20     	; 0xa98 <__fp_round+0x20>
     a84:	bb 0f       	add	r27, r27
     a86:	40 f4       	brcc	.+16     	; 0xa98 <__fp_round+0x20>
     a88:	bf 2b       	or	r27, r31
     a8a:	11 f4       	brne	.+4      	; 0xa90 <__fp_round+0x18>
     a8c:	60 ff       	sbrs	r22, 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__fp_round+0x20>
     a90:	6f 5f       	subi	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	8f 4f       	sbci	r24, 0xFF	; 255
     a96:	9f 4f       	sbci	r25, 0xFF	; 255
     a98:	08 95       	ret

00000a9a <__fp_split3>:
     a9a:	57 fd       	sbrc	r21, 7
     a9c:	90 58       	subi	r25, 0x80	; 128
     a9e:	44 0f       	add	r20, r20
     aa0:	55 1f       	adc	r21, r21
     aa2:	59 f0       	breq	.+22     	; 0xaba <__fp_splitA+0x10>
     aa4:	5f 3f       	cpi	r21, 0xFF	; 255
     aa6:	71 f0       	breq	.+28     	; 0xac4 <__fp_splitA+0x1a>
     aa8:	47 95       	ror	r20

00000aaa <__fp_splitA>:
     aaa:	88 0f       	add	r24, r24
     aac:	97 fb       	bst	r25, 7
     aae:	99 1f       	adc	r25, r25
     ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_splitA+0x20>
     ab2:	9f 3f       	cpi	r25, 0xFF	; 255
     ab4:	79 f0       	breq	.+30     	; 0xad4 <__fp_splitA+0x2a>
     ab6:	87 95       	ror	r24
     ab8:	08 95       	ret
     aba:	12 16       	cp	r1, r18
     abc:	13 06       	cpc	r1, r19
     abe:	14 06       	cpc	r1, r20
     ac0:	55 1f       	adc	r21, r21
     ac2:	f2 cf       	rjmp	.-28     	; 0xaa8 <__fp_split3+0xe>
     ac4:	46 95       	lsr	r20
     ac6:	f1 df       	rcall	.-30     	; 0xaaa <__fp_splitA>
     ac8:	08 c0       	rjmp	.+16     	; 0xada <__fp_splitA+0x30>
     aca:	16 16       	cp	r1, r22
     acc:	17 06       	cpc	r1, r23
     ace:	18 06       	cpc	r1, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	f1 cf       	rjmp	.-30     	; 0xab6 <__fp_splitA+0xc>
     ad4:	86 95       	lsr	r24
     ad6:	71 05       	cpc	r23, r1
     ad8:	61 05       	cpc	r22, r1
     ada:	08 94       	sec
     adc:	08 95       	ret

00000ade <__fp_zero>:
     ade:	e8 94       	clt

00000ae0 <__fp_szero>:
     ae0:	bb 27       	eor	r27, r27
     ae2:	66 27       	eor	r22, r22
     ae4:	77 27       	eor	r23, r23
     ae6:	cb 01       	movw	r24, r22
     ae8:	97 f9       	bld	r25, 7
     aea:	08 95       	ret

00000aec <__mulsi3>:
     aec:	db 01       	movw	r26, r22
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	0b d0       	rcall	.+22     	; 0xb0a <__muluhisi3>
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	a2 9f       	mul	r26, r18
     afa:	80 0d       	add	r24, r0
     afc:	91 1d       	adc	r25, r1
     afe:	a3 9f       	mul	r26, r19
     b00:	90 0d       	add	r25, r0
     b02:	b2 9f       	mul	r27, r18
     b04:	90 0d       	add	r25, r0
     b06:	11 24       	eor	r1, r1
     b08:	08 95       	ret

00000b0a <__muluhisi3>:
     b0a:	0f d0       	rcall	.+30     	; 0xb2a <__umulhisi3>
     b0c:	a5 9f       	mul	r26, r21
     b0e:	90 0d       	add	r25, r0
     b10:	b4 9f       	mul	r27, r20
     b12:	90 0d       	add	r25, r0
     b14:	a4 9f       	mul	r26, r20
     b16:	80 0d       	add	r24, r0
     b18:	91 1d       	adc	r25, r1
     b1a:	11 24       	eor	r1, r1
     b1c:	08 95       	ret

00000b1e <__mulshisi3>:
     b1e:	b7 ff       	sbrs	r27, 7
     b20:	f4 cf       	rjmp	.-24     	; 0xb0a <__muluhisi3>

00000b22 <__mulohisi3>:
     b22:	f3 df       	rcall	.-26     	; 0xb0a <__muluhisi3>
     b24:	82 1b       	sub	r24, r18
     b26:	93 0b       	sbc	r25, r19
     b28:	08 95       	ret

00000b2a <__umulhisi3>:
     b2a:	a2 9f       	mul	r26, r18
     b2c:	b0 01       	movw	r22, r0
     b2e:	b3 9f       	mul	r27, r19
     b30:	c0 01       	movw	r24, r0
     b32:	a3 9f       	mul	r26, r19
     b34:	70 0d       	add	r23, r0
     b36:	81 1d       	adc	r24, r1
     b38:	11 24       	eor	r1, r1
     b3a:	91 1d       	adc	r25, r1
     b3c:	b2 9f       	mul	r27, r18
     b3e:	70 0d       	add	r23, r0
     b40:	81 1d       	adc	r24, r1
     b42:	11 24       	eor	r1, r1
     b44:	91 1d       	adc	r25, r1
     b46:	08 95       	ret

00000b48 <fwrite>:
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	e9 ea       	ldi	r30, 0xA9	; 169
     b4e:	f5 e0       	ldi	r31, 0x05	; 5
     b50:	17 c3       	rjmp	.+1582   	; 0x1180 <__prologue_saves__+0xc>
     b52:	5b 01       	movw	r10, r22
     b54:	4a 01       	movw	r8, r20
     b56:	79 01       	movw	r14, r18
     b58:	d9 01       	movw	r26, r18
     b5a:	13 96       	adiw	r26, 0x03	; 3
     b5c:	2c 91       	ld	r18, X
     b5e:	21 ff       	sbrs	r18, 1
     b60:	1d c0       	rjmp	.+58     	; 0xb9c <fwrite+0x54>
     b62:	c0 e0       	ldi	r28, 0x00	; 0
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	c8 15       	cp	r28, r8
     b68:	d9 05       	cpc	r29, r9
     b6a:	d9 f0       	breq	.+54     	; 0xba2 <fwrite+0x5a>
     b6c:	8c 01       	movw	r16, r24
     b6e:	6c 01       	movw	r12, r24
     b70:	ca 0c       	add	r12, r10
     b72:	db 1c       	adc	r13, r11
     b74:	c8 01       	movw	r24, r16
     b76:	0c 15       	cp	r16, r12
     b78:	1d 05       	cpc	r17, r13
     b7a:	71 f0       	breq	.+28     	; 0xb98 <fwrite+0x50>
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	d7 01       	movw	r26, r14
     b82:	18 96       	adiw	r26, 0x08	; 8
     b84:	ed 91       	ld	r30, X+
     b86:	fc 91       	ld	r31, X
     b88:	19 97       	sbiw	r26, 0x09	; 9
     b8a:	b7 01       	movw	r22, r14
     b8c:	dc 01       	movw	r26, r24
     b8e:	8c 91       	ld	r24, X
     b90:	09 95       	icall
     b92:	89 2b       	or	r24, r25
     b94:	79 f3       	breq	.-34     	; 0xb74 <fwrite+0x2c>
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <fwrite+0x5a>
     b98:	21 96       	adiw	r28, 0x01	; 1
     b9a:	e5 cf       	rjmp	.-54     	; 0xb66 <fwrite+0x1e>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <fwrite+0x5c>
     ba2:	ce 01       	movw	r24, r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	ec e0       	ldi	r30, 0x0C	; 12
     baa:	06 c3       	rjmp	.+1548   	; 0x11b8 <__epilogue_restores__+0xc>

00000bac <printf>:
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	eb ed       	ldi	r30, 0xDB	; 219
     bb2:	f5 e0       	ldi	r31, 0x05	; 5
     bb4:	ef c2       	rjmp	.+1502   	; 0x1194 <__prologue_saves__+0x20>
     bb6:	ae 01       	movw	r20, r28
     bb8:	4b 5f       	subi	r20, 0xFB	; 251
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	fa 01       	movw	r30, r20
     bbe:	61 91       	ld	r22, Z+
     bc0:	71 91       	ld	r23, Z+
     bc2:	af 01       	movw	r20, r30
     bc4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__iob+0x2>
     bc8:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <__iob+0x3>
     bcc:	51 d0       	rcall	.+162    	; 0xc70 <vfprintf>
     bce:	e2 e0       	ldi	r30, 0x02	; 2
     bd0:	fd c2       	rjmp	.+1530   	; 0x11cc <__epilogue_restores__+0x20>

00000bd2 <puts>:
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <__iob+0x2>
     bde:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <__iob+0x3>
     be2:	23 81       	ldd	r18, Z+3	; 0x03
     be4:	21 ff       	sbrs	r18, 1
     be6:	1b c0       	rjmp	.+54     	; 0xc1e <puts+0x4c>
     be8:	8c 01       	movw	r16, r24
     bea:	d0 e0       	ldi	r29, 0x00	; 0
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	f8 01       	movw	r30, r16
     bf0:	81 91       	ld	r24, Z+
     bf2:	8f 01       	movw	r16, r30
     bf4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <__iob+0x2>
     bf8:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <__iob+0x3>
     bfc:	db 01       	movw	r26, r22
     bfe:	18 96       	adiw	r26, 0x08	; 8
     c00:	ed 91       	ld	r30, X+
     c02:	fc 91       	ld	r31, X
     c04:	19 97       	sbiw	r26, 0x09	; 9
     c06:	88 23       	and	r24, r24
     c08:	31 f0       	breq	.+12     	; 0xc16 <puts+0x44>
     c0a:	09 95       	icall
     c0c:	89 2b       	or	r24, r25
     c0e:	79 f3       	breq	.-34     	; 0xbee <puts+0x1c>
     c10:	df ef       	ldi	r29, 0xFF	; 255
     c12:	cf ef       	ldi	r28, 0xFF	; 255
     c14:	ec cf       	rjmp	.-40     	; 0xbee <puts+0x1c>
     c16:	8a e0       	ldi	r24, 0x0A	; 10
     c18:	09 95       	icall
     c1a:	89 2b       	or	r24, r25
     c1c:	19 f0       	breq	.+6      	; 0xc24 <puts+0x52>
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <puts+0x56>
     c24:	8d 2f       	mov	r24, r29
     c26:	9c 2f       	mov	r25, r28
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <sprintf>:
     c32:	ae e0       	ldi	r26, 0x0E	; 14
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ee e1       	ldi	r30, 0x1E	; 30
     c38:	f6 e0       	ldi	r31, 0x06	; 6
     c3a:	aa c2       	rjmp	.+1364   	; 0x1190 <__prologue_saves__+0x1c>
     c3c:	0d 89       	ldd	r16, Y+21	; 0x15
     c3e:	1e 89       	ldd	r17, Y+22	; 0x16
     c40:	86 e0       	ldi	r24, 0x06	; 6
     c42:	8c 83       	std	Y+4, r24	; 0x04
     c44:	1a 83       	std	Y+2, r17	; 0x02
     c46:	09 83       	std	Y+1, r16	; 0x01
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	9f e7       	ldi	r25, 0x7F	; 127
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	ae 01       	movw	r20, r28
     c52:	47 5e       	subi	r20, 0xE7	; 231
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	6f 89       	ldd	r22, Y+23	; 0x17
     c58:	78 8d       	ldd	r23, Y+24	; 0x18
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	08 d0       	rcall	.+16     	; 0xc70 <vfprintf>
     c60:	ef 81       	ldd	r30, Y+7	; 0x07
     c62:	f8 85       	ldd	r31, Y+8	; 0x08
     c64:	e0 0f       	add	r30, r16
     c66:	f1 1f       	adc	r31, r17
     c68:	10 82       	st	Z, r1
     c6a:	2e 96       	adiw	r28, 0x0e	; 14
     c6c:	e4 e0       	ldi	r30, 0x04	; 4
     c6e:	ac c2       	rjmp	.+1368   	; 0x11c8 <__epilogue_restores__+0x1c>

00000c70 <vfprintf>:
     c70:	ab e0       	ldi	r26, 0x0B	; 11
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ed e3       	ldi	r30, 0x3D	; 61
     c76:	f6 e0       	ldi	r31, 0x06	; 6
     c78:	7d c2       	rjmp	.+1274   	; 0x1174 <__prologue_saves__>
     c7a:	6c 01       	movw	r12, r24
     c7c:	7b 01       	movw	r14, r22
     c7e:	8a 01       	movw	r16, r20
     c80:	fc 01       	movw	r30, r24
     c82:	17 82       	std	Z+7, r1	; 0x07
     c84:	16 82       	std	Z+6, r1	; 0x06
     c86:	83 81       	ldd	r24, Z+3	; 0x03
     c88:	81 ff       	sbrs	r24, 1
     c8a:	bf c1       	rjmp	.+894    	; 0x100a <vfprintf+0x39a>
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	3c 01       	movw	r6, r24
     c92:	f6 01       	movw	r30, r12
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	f7 01       	movw	r30, r14
     c98:	93 fd       	sbrc	r25, 3
     c9a:	85 91       	lpm	r24, Z+
     c9c:	93 ff       	sbrs	r25, 3
     c9e:	81 91       	ld	r24, Z+
     ca0:	7f 01       	movw	r14, r30
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <vfprintf+0x38>
     ca6:	ad c1       	rjmp	.+858    	; 0x1002 <vfprintf+0x392>
     ca8:	85 32       	cpi	r24, 0x25	; 37
     caa:	39 f4       	brne	.+14     	; 0xcba <vfprintf+0x4a>
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	7f 01       	movw	r14, r30
     cb6:	85 32       	cpi	r24, 0x25	; 37
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <vfprintf+0x52>
     cba:	b6 01       	movw	r22, r12
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	c0 d1       	rcall	.+896    	; 0x1040 <fputc>
     cc0:	e8 cf       	rjmp	.-48     	; 0xc92 <vfprintf+0x22>
     cc2:	91 2c       	mov	r9, r1
     cc4:	21 2c       	mov	r2, r1
     cc6:	31 2c       	mov	r3, r1
     cc8:	ff e1       	ldi	r31, 0x1F	; 31
     cca:	f3 15       	cp	r31, r3
     ccc:	d8 f0       	brcs	.+54     	; 0xd04 <vfprintf+0x94>
     cce:	8b 32       	cpi	r24, 0x2B	; 43
     cd0:	79 f0       	breq	.+30     	; 0xcf0 <vfprintf+0x80>
     cd2:	38 f4       	brcc	.+14     	; 0xce2 <vfprintf+0x72>
     cd4:	80 32       	cpi	r24, 0x20	; 32
     cd6:	79 f0       	breq	.+30     	; 0xcf6 <vfprintf+0x86>
     cd8:	83 32       	cpi	r24, 0x23	; 35
     cda:	a1 f4       	brne	.+40     	; 0xd04 <vfprintf+0x94>
     cdc:	23 2d       	mov	r18, r3
     cde:	20 61       	ori	r18, 0x10	; 16
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <vfprintf+0xac>
     ce2:	8d 32       	cpi	r24, 0x2D	; 45
     ce4:	61 f0       	breq	.+24     	; 0xcfe <vfprintf+0x8e>
     ce6:	80 33       	cpi	r24, 0x30	; 48
     ce8:	69 f4       	brne	.+26     	; 0xd04 <vfprintf+0x94>
     cea:	23 2d       	mov	r18, r3
     cec:	21 60       	ori	r18, 0x01	; 1
     cee:	16 c0       	rjmp	.+44     	; 0xd1c <vfprintf+0xac>
     cf0:	83 2d       	mov	r24, r3
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	38 2e       	mov	r3, r24
     cf6:	e3 2d       	mov	r30, r3
     cf8:	e4 60       	ori	r30, 0x04	; 4
     cfa:	3e 2e       	mov	r3, r30
     cfc:	2a c0       	rjmp	.+84     	; 0xd52 <vfprintf+0xe2>
     cfe:	f3 2d       	mov	r31, r3
     d00:	f8 60       	ori	r31, 0x08	; 8
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <vfprintf+0xce>
     d04:	37 fc       	sbrc	r3, 7
     d06:	2d c0       	rjmp	.+90     	; 0xd62 <vfprintf+0xf2>
     d08:	20 ed       	ldi	r18, 0xD0	; 208
     d0a:	28 0f       	add	r18, r24
     d0c:	2a 30       	cpi	r18, 0x0A	; 10
     d0e:	40 f0       	brcs	.+16     	; 0xd20 <vfprintf+0xb0>
     d10:	8e 32       	cpi	r24, 0x2E	; 46
     d12:	b9 f4       	brne	.+46     	; 0xd42 <vfprintf+0xd2>
     d14:	36 fc       	sbrc	r3, 6
     d16:	75 c1       	rjmp	.+746    	; 0x1002 <vfprintf+0x392>
     d18:	23 2d       	mov	r18, r3
     d1a:	20 64       	ori	r18, 0x40	; 64
     d1c:	32 2e       	mov	r3, r18
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <vfprintf+0xe2>
     d20:	36 fe       	sbrs	r3, 6
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0xc0>
     d24:	8a e0       	ldi	r24, 0x0A	; 10
     d26:	98 9e       	mul	r9, r24
     d28:	20 0d       	add	r18, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	92 2e       	mov	r9, r18
     d2e:	11 c0       	rjmp	.+34     	; 0xd52 <vfprintf+0xe2>
     d30:	ea e0       	ldi	r30, 0x0A	; 10
     d32:	2e 9e       	mul	r2, r30
     d34:	20 0d       	add	r18, r0
     d36:	11 24       	eor	r1, r1
     d38:	22 2e       	mov	r2, r18
     d3a:	f3 2d       	mov	r31, r3
     d3c:	f0 62       	ori	r31, 0x20	; 32
     d3e:	3f 2e       	mov	r3, r31
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <vfprintf+0xe2>
     d42:	8c 36       	cpi	r24, 0x6C	; 108
     d44:	21 f4       	brne	.+8      	; 0xd4e <vfprintf+0xde>
     d46:	83 2d       	mov	r24, r3
     d48:	80 68       	ori	r24, 0x80	; 128
     d4a:	38 2e       	mov	r3, r24
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0xe2>
     d4e:	88 36       	cpi	r24, 0x68	; 104
     d50:	41 f4       	brne	.+16     	; 0xd62 <vfprintf+0xf2>
     d52:	f7 01       	movw	r30, r14
     d54:	93 fd       	sbrc	r25, 3
     d56:	85 91       	lpm	r24, Z+
     d58:	93 ff       	sbrs	r25, 3
     d5a:	81 91       	ld	r24, Z+
     d5c:	7f 01       	movw	r14, r30
     d5e:	81 11       	cpse	r24, r1
     d60:	b3 cf       	rjmp	.-154    	; 0xcc8 <vfprintf+0x58>
     d62:	98 2f       	mov	r25, r24
     d64:	9f 7d       	andi	r25, 0xDF	; 223
     d66:	95 54       	subi	r25, 0x45	; 69
     d68:	93 30       	cpi	r25, 0x03	; 3
     d6a:	28 f4       	brcc	.+10     	; 0xd76 <vfprintf+0x106>
     d6c:	0c 5f       	subi	r16, 0xFC	; 252
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	9f e3       	ldi	r25, 0x3F	; 63
     d72:	99 83       	std	Y+1, r25	; 0x01
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <vfprintf+0x120>
     d76:	83 36       	cpi	r24, 0x63	; 99
     d78:	31 f0       	breq	.+12     	; 0xd86 <vfprintf+0x116>
     d7a:	83 37       	cpi	r24, 0x73	; 115
     d7c:	71 f0       	breq	.+28     	; 0xd9a <vfprintf+0x12a>
     d7e:	83 35       	cpi	r24, 0x53	; 83
     d80:	09 f0       	breq	.+2      	; 0xd84 <vfprintf+0x114>
     d82:	55 c0       	rjmp	.+170    	; 0xe2e <vfprintf+0x1be>
     d84:	20 c0       	rjmp	.+64     	; 0xdc6 <vfprintf+0x156>
     d86:	f8 01       	movw	r30, r16
     d88:	80 81       	ld	r24, Z
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	0e 5f       	subi	r16, 0xFE	; 254
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	88 24       	eor	r8, r8
     d92:	83 94       	inc	r8
     d94:	91 2c       	mov	r9, r1
     d96:	53 01       	movw	r10, r6
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <vfprintf+0x14e>
     d9a:	28 01       	movw	r4, r16
     d9c:	f2 e0       	ldi	r31, 0x02	; 2
     d9e:	4f 0e       	add	r4, r31
     da0:	51 1c       	adc	r5, r1
     da2:	f8 01       	movw	r30, r16
     da4:	a0 80       	ld	r10, Z
     da6:	b1 80       	ldd	r11, Z+1	; 0x01
     da8:	36 fe       	sbrs	r3, 6
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x142>
     dac:	69 2d       	mov	r22, r9
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x146>
     db2:	6f ef       	ldi	r22, 0xFF	; 255
     db4:	7f ef       	ldi	r23, 0xFF	; 255
     db6:	c5 01       	movw	r24, r10
     db8:	38 d1       	rcall	.+624    	; 0x102a <strnlen>
     dba:	4c 01       	movw	r8, r24
     dbc:	82 01       	movw	r16, r4
     dbe:	f3 2d       	mov	r31, r3
     dc0:	ff 77       	andi	r31, 0x7F	; 127
     dc2:	3f 2e       	mov	r3, r31
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <vfprintf+0x180>
     dc6:	28 01       	movw	r4, r16
     dc8:	22 e0       	ldi	r18, 0x02	; 2
     dca:	42 0e       	add	r4, r18
     dcc:	51 1c       	adc	r5, r1
     dce:	f8 01       	movw	r30, r16
     dd0:	a0 80       	ld	r10, Z
     dd2:	b1 80       	ldd	r11, Z+1	; 0x01
     dd4:	36 fe       	sbrs	r3, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x16e>
     dd8:	69 2d       	mov	r22, r9
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x172>
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	c5 01       	movw	r24, r10
     de4:	17 d1       	rcall	.+558    	; 0x1014 <strnlen_P>
     de6:	4c 01       	movw	r8, r24
     de8:	f3 2d       	mov	r31, r3
     dea:	f0 68       	ori	r31, 0x80	; 128
     dec:	3f 2e       	mov	r3, r31
     dee:	82 01       	movw	r16, r4
     df0:	33 fc       	sbrc	r3, 3
     df2:	19 c0       	rjmp	.+50     	; 0xe26 <vfprintf+0x1b6>
     df4:	82 2d       	mov	r24, r2
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 16       	cp	r8, r24
     dfa:	99 06       	cpc	r9, r25
     dfc:	a0 f4       	brcc	.+40     	; 0xe26 <vfprintf+0x1b6>
     dfe:	b6 01       	movw	r22, r12
     e00:	80 e2       	ldi	r24, 0x20	; 32
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	1d d1       	rcall	.+570    	; 0x1040 <fputc>
     e06:	2a 94       	dec	r2
     e08:	f5 cf       	rjmp	.-22     	; 0xdf4 <vfprintf+0x184>
     e0a:	f5 01       	movw	r30, r10
     e0c:	37 fc       	sbrc	r3, 7
     e0e:	85 91       	lpm	r24, Z+
     e10:	37 fe       	sbrs	r3, 7
     e12:	81 91       	ld	r24, Z+
     e14:	5f 01       	movw	r10, r30
     e16:	b6 01       	movw	r22, r12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	12 d1       	rcall	.+548    	; 0x1040 <fputc>
     e1c:	21 10       	cpse	r2, r1
     e1e:	2a 94       	dec	r2
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	82 1a       	sub	r8, r18
     e24:	91 08       	sbc	r9, r1
     e26:	81 14       	cp	r8, r1
     e28:	91 04       	cpc	r9, r1
     e2a:	79 f7       	brne	.-34     	; 0xe0a <vfprintf+0x19a>
     e2c:	e1 c0       	rjmp	.+450    	; 0xff0 <vfprintf+0x380>
     e2e:	84 36       	cpi	r24, 0x64	; 100
     e30:	11 f0       	breq	.+4      	; 0xe36 <vfprintf+0x1c6>
     e32:	89 36       	cpi	r24, 0x69	; 105
     e34:	39 f5       	brne	.+78     	; 0xe84 <vfprintf+0x214>
     e36:	f8 01       	movw	r30, r16
     e38:	37 fe       	sbrs	r3, 7
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <vfprintf+0x1da>
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	0c 5f       	subi	r16, 0xFC	; 252
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <vfprintf+0x1ea>
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	07 2e       	mov	r0, r23
     e50:	00 0c       	add	r0, r0
     e52:	88 0b       	sbc	r24, r24
     e54:	99 0b       	sbc	r25, r25
     e56:	0e 5f       	subi	r16, 0xFE	; 254
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	f3 2d       	mov	r31, r3
     e5c:	ff 76       	andi	r31, 0x6F	; 111
     e5e:	3f 2e       	mov	r3, r31
     e60:	97 ff       	sbrs	r25, 7
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <vfprintf+0x206>
     e64:	90 95       	com	r25
     e66:	80 95       	com	r24
     e68:	70 95       	com	r23
     e6a:	61 95       	neg	r22
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	f0 68       	ori	r31, 0x80	; 128
     e74:	3f 2e       	mov	r3, r31
     e76:	2a e0       	ldi	r18, 0x0A	; 10
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	a3 01       	movw	r20, r6
     e7c:	1d d1       	rcall	.+570    	; 0x10b8 <__ultoa_invert>
     e7e:	88 2e       	mov	r8, r24
     e80:	86 18       	sub	r8, r6
     e82:	44 c0       	rjmp	.+136    	; 0xf0c <vfprintf+0x29c>
     e84:	85 37       	cpi	r24, 0x75	; 117
     e86:	31 f4       	brne	.+12     	; 0xe94 <vfprintf+0x224>
     e88:	23 2d       	mov	r18, r3
     e8a:	2f 7e       	andi	r18, 0xEF	; 239
     e8c:	b2 2e       	mov	r11, r18
     e8e:	2a e0       	ldi	r18, 0x0A	; 10
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	25 c0       	rjmp	.+74     	; 0xede <vfprintf+0x26e>
     e94:	93 2d       	mov	r25, r3
     e96:	99 7f       	andi	r25, 0xF9	; 249
     e98:	b9 2e       	mov	r11, r25
     e9a:	8f 36       	cpi	r24, 0x6F	; 111
     e9c:	c1 f0       	breq	.+48     	; 0xece <vfprintf+0x25e>
     e9e:	18 f4       	brcc	.+6      	; 0xea6 <vfprintf+0x236>
     ea0:	88 35       	cpi	r24, 0x58	; 88
     ea2:	79 f0       	breq	.+30     	; 0xec2 <vfprintf+0x252>
     ea4:	ae c0       	rjmp	.+348    	; 0x1002 <vfprintf+0x392>
     ea6:	80 37       	cpi	r24, 0x70	; 112
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <vfprintf+0x240>
     eaa:	88 37       	cpi	r24, 0x78	; 120
     eac:	21 f0       	breq	.+8      	; 0xeb6 <vfprintf+0x246>
     eae:	a9 c0       	rjmp	.+338    	; 0x1002 <vfprintf+0x392>
     eb0:	e9 2f       	mov	r30, r25
     eb2:	e0 61       	ori	r30, 0x10	; 16
     eb4:	be 2e       	mov	r11, r30
     eb6:	b4 fe       	sbrs	r11, 4
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <vfprintf+0x264>
     eba:	fb 2d       	mov	r31, r11
     ebc:	f4 60       	ori	r31, 0x04	; 4
     ebe:	bf 2e       	mov	r11, r31
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <vfprintf+0x264>
     ec2:	34 fe       	sbrs	r3, 4
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <vfprintf+0x26a>
     ec6:	29 2f       	mov	r18, r25
     ec8:	26 60       	ori	r18, 0x06	; 6
     eca:	b2 2e       	mov	r11, r18
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <vfprintf+0x26a>
     ece:	28 e0       	ldi	r18, 0x08	; 8
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	05 c0       	rjmp	.+10     	; 0xede <vfprintf+0x26e>
     ed4:	20 e1       	ldi	r18, 0x10	; 16
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x26e>
     eda:	20 e1       	ldi	r18, 0x10	; 16
     edc:	32 e0       	ldi	r19, 0x02	; 2
     ede:	f8 01       	movw	r30, r16
     ee0:	b7 fe       	sbrs	r11, 7
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <vfprintf+0x282>
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	0c 5f       	subi	r16, 0xFC	; 252
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <vfprintf+0x28e>
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 5f       	subi	r16, 0xFE	; 254
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	a3 01       	movw	r20, r6
     f00:	db d0       	rcall	.+438    	; 0x10b8 <__ultoa_invert>
     f02:	88 2e       	mov	r8, r24
     f04:	86 18       	sub	r8, r6
     f06:	fb 2d       	mov	r31, r11
     f08:	ff 77       	andi	r31, 0x7F	; 127
     f0a:	3f 2e       	mov	r3, r31
     f0c:	36 fe       	sbrs	r3, 6
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <vfprintf+0x2ba>
     f10:	23 2d       	mov	r18, r3
     f12:	2e 7f       	andi	r18, 0xFE	; 254
     f14:	a2 2e       	mov	r10, r18
     f16:	89 14       	cp	r8, r9
     f18:	58 f4       	brcc	.+22     	; 0xf30 <vfprintf+0x2c0>
     f1a:	34 fe       	sbrs	r3, 4
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <vfprintf+0x2c4>
     f1e:	32 fc       	sbrc	r3, 2
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x2c4>
     f22:	83 2d       	mov	r24, r3
     f24:	8e 7e       	andi	r24, 0xEE	; 238
     f26:	a8 2e       	mov	r10, r24
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <vfprintf+0x2c4>
     f2a:	b8 2c       	mov	r11, r8
     f2c:	a3 2c       	mov	r10, r3
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x2c6>
     f30:	b8 2c       	mov	r11, r8
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <vfprintf+0x2c6>
     f34:	b9 2c       	mov	r11, r9
     f36:	a4 fe       	sbrs	r10, 4
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <vfprintf+0x2e8>
     f3a:	fe 01       	movw	r30, r28
     f3c:	e8 0d       	add	r30, r8
     f3e:	f1 1d       	adc	r31, r1
     f40:	80 81       	ld	r24, Z
     f42:	80 33       	cpi	r24, 0x30	; 48
     f44:	21 f4       	brne	.+8      	; 0xf4e <vfprintf+0x2de>
     f46:	9a 2d       	mov	r25, r10
     f48:	99 7e       	andi	r25, 0xE9	; 233
     f4a:	a9 2e       	mov	r10, r25
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <vfprintf+0x2f0>
     f4e:	a2 fe       	sbrs	r10, 2
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x2ee>
     f52:	b3 94       	inc	r11
     f54:	b3 94       	inc	r11
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <vfprintf+0x2f0>
     f58:	8a 2d       	mov	r24, r10
     f5a:	86 78       	andi	r24, 0x86	; 134
     f5c:	09 f0       	breq	.+2      	; 0xf60 <vfprintf+0x2f0>
     f5e:	b3 94       	inc	r11
     f60:	a3 fc       	sbrc	r10, 3
     f62:	10 c0       	rjmp	.+32     	; 0xf84 <vfprintf+0x314>
     f64:	a0 fe       	sbrs	r10, 0
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0x304>
     f68:	b2 14       	cp	r11, r2
     f6a:	80 f4       	brcc	.+32     	; 0xf8c <vfprintf+0x31c>
     f6c:	28 0c       	add	r2, r8
     f6e:	92 2c       	mov	r9, r2
     f70:	9b 18       	sub	r9, r11
     f72:	0d c0       	rjmp	.+26     	; 0xf8e <vfprintf+0x31e>
     f74:	b2 14       	cp	r11, r2
     f76:	58 f4       	brcc	.+22     	; 0xf8e <vfprintf+0x31e>
     f78:	b6 01       	movw	r22, r12
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	60 d0       	rcall	.+192    	; 0x1040 <fputc>
     f80:	b3 94       	inc	r11
     f82:	f8 cf       	rjmp	.-16     	; 0xf74 <vfprintf+0x304>
     f84:	b2 14       	cp	r11, r2
     f86:	18 f4       	brcc	.+6      	; 0xf8e <vfprintf+0x31e>
     f88:	2b 18       	sub	r2, r11
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x320>
     f8c:	98 2c       	mov	r9, r8
     f8e:	21 2c       	mov	r2, r1
     f90:	a4 fe       	sbrs	r10, 4
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <vfprintf+0x342>
     f94:	b6 01       	movw	r22, r12
     f96:	80 e3       	ldi	r24, 0x30	; 48
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	52 d0       	rcall	.+164    	; 0x1040 <fputc>
     f9c:	a2 fe       	sbrs	r10, 2
     f9e:	16 c0       	rjmp	.+44     	; 0xfcc <vfprintf+0x35c>
     fa0:	a1 fc       	sbrc	r10, 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <vfprintf+0x33a>
     fa4:	88 e7       	ldi	r24, 0x78	; 120
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x33e>
     faa:	88 e5       	ldi	r24, 0x58	; 88
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	b6 01       	movw	r22, r12
     fb0:	0c c0       	rjmp	.+24     	; 0xfca <vfprintf+0x35a>
     fb2:	8a 2d       	mov	r24, r10
     fb4:	86 78       	andi	r24, 0x86	; 134
     fb6:	51 f0       	breq	.+20     	; 0xfcc <vfprintf+0x35c>
     fb8:	a1 fe       	sbrs	r10, 1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x350>
     fbc:	8b e2       	ldi	r24, 0x2B	; 43
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <vfprintf+0x352>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	a7 fc       	sbrc	r10, 7
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	b6 01       	movw	r22, r12
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	3a d0       	rcall	.+116    	; 0x1040 <fputc>
     fcc:	89 14       	cp	r8, r9
     fce:	30 f4       	brcc	.+12     	; 0xfdc <vfprintf+0x36c>
     fd0:	b6 01       	movw	r22, r12
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	34 d0       	rcall	.+104    	; 0x1040 <fputc>
     fd8:	9a 94       	dec	r9
     fda:	f8 cf       	rjmp	.-16     	; 0xfcc <vfprintf+0x35c>
     fdc:	8a 94       	dec	r8
     fde:	f3 01       	movw	r30, r6
     fe0:	e8 0d       	add	r30, r8
     fe2:	f1 1d       	adc	r31, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	b6 01       	movw	r22, r12
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	2a d0       	rcall	.+84     	; 0x1040 <fputc>
     fec:	81 10       	cpse	r8, r1
     fee:	f6 cf       	rjmp	.-20     	; 0xfdc <vfprintf+0x36c>
     ff0:	22 20       	and	r2, r2
     ff2:	09 f4       	brne	.+2      	; 0xff6 <vfprintf+0x386>
     ff4:	4e ce       	rjmp	.-868    	; 0xc92 <vfprintf+0x22>
     ff6:	b6 01       	movw	r22, r12
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	21 d0       	rcall	.+66     	; 0x1040 <fputc>
     ffe:	2a 94       	dec	r2
    1000:	f7 cf       	rjmp	.-18     	; 0xff0 <vfprintf+0x380>
    1002:	f6 01       	movw	r30, r12
    1004:	86 81       	ldd	r24, Z+6	; 0x06
    1006:	97 81       	ldd	r25, Z+7	; 0x07
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x39e>
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	2b 96       	adiw	r28, 0x0b	; 11
    1010:	e2 e1       	ldi	r30, 0x12	; 18
    1012:	cc c0       	rjmp	.+408    	; 0x11ac <__epilogue_restores__>

00001014 <strnlen_P>:
    1014:	fc 01       	movw	r30, r24
    1016:	05 90       	lpm	r0, Z+
    1018:	61 50       	subi	r22, 0x01	; 1
    101a:	70 40       	sbci	r23, 0x00	; 0
    101c:	01 10       	cpse	r0, r1
    101e:	d8 f7       	brcc	.-10     	; 0x1016 <strnlen_P+0x2>
    1020:	80 95       	com	r24
    1022:	90 95       	com	r25
    1024:	8e 0f       	add	r24, r30
    1026:	9f 1f       	adc	r25, r31
    1028:	08 95       	ret

0000102a <strnlen>:
    102a:	fc 01       	movw	r30, r24
    102c:	61 50       	subi	r22, 0x01	; 1
    102e:	70 40       	sbci	r23, 0x00	; 0
    1030:	01 90       	ld	r0, Z+
    1032:	01 10       	cpse	r0, r1
    1034:	d8 f7       	brcc	.-10     	; 0x102c <strnlen+0x2>
    1036:	80 95       	com	r24
    1038:	90 95       	com	r25
    103a:	8e 0f       	add	r24, r30
    103c:	9f 1f       	adc	r25, r31
    103e:	08 95       	ret

00001040 <fputc>:
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	fb 01       	movw	r30, r22
    104a:	23 81       	ldd	r18, Z+3	; 0x03
    104c:	21 fd       	sbrc	r18, 1
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <fputc+0x16>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	2c c0       	rjmp	.+88     	; 0x10ae <fputc+0x6e>
    1056:	22 ff       	sbrs	r18, 2
    1058:	16 c0       	rjmp	.+44     	; 0x1086 <fputc+0x46>
    105a:	46 81       	ldd	r20, Z+6	; 0x06
    105c:	57 81       	ldd	r21, Z+7	; 0x07
    105e:	24 81       	ldd	r18, Z+4	; 0x04
    1060:	35 81       	ldd	r19, Z+5	; 0x05
    1062:	42 17       	cp	r20, r18
    1064:	53 07       	cpc	r21, r19
    1066:	44 f4       	brge	.+16     	; 0x1078 <fputc+0x38>
    1068:	a0 81       	ld	r26, Z
    106a:	b1 81       	ldd	r27, Z+1	; 0x01
    106c:	9d 01       	movw	r18, r26
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	31 83       	std	Z+1, r19	; 0x01
    1074:	20 83       	st	Z, r18
    1076:	8c 93       	st	X, r24
    1078:	26 81       	ldd	r18, Z+6	; 0x06
    107a:	37 81       	ldd	r19, Z+7	; 0x07
    107c:	2f 5f       	subi	r18, 0xFF	; 255
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	37 83       	std	Z+7, r19	; 0x07
    1082:	26 83       	std	Z+6, r18	; 0x06
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <fputc+0x6e>
    1086:	8b 01       	movw	r16, r22
    1088:	ec 01       	movw	r28, r24
    108a:	fb 01       	movw	r30, r22
    108c:	00 84       	ldd	r0, Z+8	; 0x08
    108e:	f1 85       	ldd	r31, Z+9	; 0x09
    1090:	e0 2d       	mov	r30, r0
    1092:	09 95       	icall
    1094:	89 2b       	or	r24, r25
    1096:	e1 f6       	brne	.-72     	; 0x1050 <fputc+0x10>
    1098:	d8 01       	movw	r26, r16
    109a:	16 96       	adiw	r26, 0x06	; 6
    109c:	8d 91       	ld	r24, X+
    109e:	9c 91       	ld	r25, X
    10a0:	17 97       	sbiw	r26, 0x07	; 7
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	17 96       	adiw	r26, 0x07	; 7
    10a6:	9c 93       	st	X, r25
    10a8:	8e 93       	st	-X, r24
    10aa:	16 97       	sbiw	r26, 0x06	; 6
    10ac:	ce 01       	movw	r24, r28
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <__ultoa_invert>:
    10b8:	fa 01       	movw	r30, r20
    10ba:	aa 27       	eor	r26, r26
    10bc:	28 30       	cpi	r18, 0x08	; 8
    10be:	51 f1       	breq	.+84     	; 0x1114 <__ultoa_invert+0x5c>
    10c0:	20 31       	cpi	r18, 0x10	; 16
    10c2:	81 f1       	breq	.+96     	; 0x1124 <__ultoa_invert+0x6c>
    10c4:	e8 94       	clt
    10c6:	6f 93       	push	r22
    10c8:	6e 7f       	andi	r22, 0xFE	; 254
    10ca:	6e 5f       	subi	r22, 0xFE	; 254
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	af 4f       	sbci	r26, 0xFF	; 255
    10d4:	b1 e0       	ldi	r27, 0x01	; 1
    10d6:	3e d0       	rcall	.+124    	; 0x1154 <__ultoa_invert+0x9c>
    10d8:	b4 e0       	ldi	r27, 0x04	; 4
    10da:	3c d0       	rcall	.+120    	; 0x1154 <__ultoa_invert+0x9c>
    10dc:	67 0f       	add	r22, r23
    10de:	78 1f       	adc	r23, r24
    10e0:	89 1f       	adc	r24, r25
    10e2:	9a 1f       	adc	r25, r26
    10e4:	a1 1d       	adc	r26, r1
    10e6:	68 0f       	add	r22, r24
    10e8:	79 1f       	adc	r23, r25
    10ea:	8a 1f       	adc	r24, r26
    10ec:	91 1d       	adc	r25, r1
    10ee:	a1 1d       	adc	r26, r1
    10f0:	6a 0f       	add	r22, r26
    10f2:	71 1d       	adc	r23, r1
    10f4:	81 1d       	adc	r24, r1
    10f6:	91 1d       	adc	r25, r1
    10f8:	a1 1d       	adc	r26, r1
    10fa:	20 d0       	rcall	.+64     	; 0x113c <__ultoa_invert+0x84>
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__ultoa_invert+0x48>
    10fe:	68 94       	set
    1100:	3f 91       	pop	r19
    1102:	2a e0       	ldi	r18, 0x0A	; 10
    1104:	26 9f       	mul	r18, r22
    1106:	11 24       	eor	r1, r1
    1108:	30 19       	sub	r19, r0
    110a:	30 5d       	subi	r19, 0xD0	; 208
    110c:	31 93       	st	Z+, r19
    110e:	de f6       	brtc	.-74     	; 0x10c6 <__ultoa_invert+0xe>
    1110:	cf 01       	movw	r24, r30
    1112:	08 95       	ret
    1114:	46 2f       	mov	r20, r22
    1116:	47 70       	andi	r20, 0x07	; 7
    1118:	40 5d       	subi	r20, 0xD0	; 208
    111a:	41 93       	st	Z+, r20
    111c:	b3 e0       	ldi	r27, 0x03	; 3
    111e:	0f d0       	rcall	.+30     	; 0x113e <__ultoa_invert+0x86>
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__ultoa_invert+0x5c>
    1122:	f6 cf       	rjmp	.-20     	; 0x1110 <__ultoa_invert+0x58>
    1124:	46 2f       	mov	r20, r22
    1126:	4f 70       	andi	r20, 0x0F	; 15
    1128:	40 5d       	subi	r20, 0xD0	; 208
    112a:	4a 33       	cpi	r20, 0x3A	; 58
    112c:	18 f0       	brcs	.+6      	; 0x1134 <__ultoa_invert+0x7c>
    112e:	49 5d       	subi	r20, 0xD9	; 217
    1130:	31 fd       	sbrc	r19, 1
    1132:	40 52       	subi	r20, 0x20	; 32
    1134:	41 93       	st	Z+, r20
    1136:	02 d0       	rcall	.+4      	; 0x113c <__ultoa_invert+0x84>
    1138:	a9 f7       	brne	.-22     	; 0x1124 <__ultoa_invert+0x6c>
    113a:	ea cf       	rjmp	.-44     	; 0x1110 <__ultoa_invert+0x58>
    113c:	b4 e0       	ldi	r27, 0x04	; 4
    113e:	a6 95       	lsr	r26
    1140:	97 95       	ror	r25
    1142:	87 95       	ror	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	ba 95       	dec	r27
    114a:	c9 f7       	brne	.-14     	; 0x113e <__ultoa_invert+0x86>
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	61 05       	cpc	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	08 95       	ret
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	0a 2e       	mov	r0, r26
    115a:	06 94       	lsr	r0
    115c:	57 95       	ror	r21
    115e:	47 95       	ror	r20
    1160:	37 95       	ror	r19
    1162:	27 95       	ror	r18
    1164:	ba 95       	dec	r27
    1166:	c9 f7       	brne	.-14     	; 0x115a <__ultoa_invert+0xa2>
    1168:	62 0f       	add	r22, r18
    116a:	73 1f       	adc	r23, r19
    116c:	84 1f       	adc	r24, r20
    116e:	95 1f       	adc	r25, r21
    1170:	a0 1d       	adc	r26, r0
    1172:	08 95       	ret

00001174 <__prologue_saves__>:
    1174:	2f 92       	push	r2
    1176:	3f 92       	push	r3
    1178:	4f 92       	push	r4
    117a:	5f 92       	push	r5
    117c:	6f 92       	push	r6
    117e:	7f 92       	push	r7
    1180:	8f 92       	push	r8
    1182:	9f 92       	push	r9
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	ca 1b       	sub	r28, r26
    119e:	db 0b       	sbc	r29, r27
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	09 94       	ijmp

000011ac <__epilogue_restores__>:
    11ac:	2a 88       	ldd	r2, Y+18	; 0x12
    11ae:	39 88       	ldd	r3, Y+17	; 0x11
    11b0:	48 88       	ldd	r4, Y+16	; 0x10
    11b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    11b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    11b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    11b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    11bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    11be:	b9 84       	ldd	r11, Y+9	; 0x09
    11c0:	c8 84       	ldd	r12, Y+8	; 0x08
    11c2:	df 80       	ldd	r13, Y+7	; 0x07
    11c4:	ee 80       	ldd	r14, Y+6	; 0x06
    11c6:	fd 80       	ldd	r15, Y+5	; 0x05
    11c8:	0c 81       	ldd	r16, Y+4	; 0x04
    11ca:	1b 81       	ldd	r17, Y+3	; 0x03
    11cc:	aa 81       	ldd	r26, Y+2	; 0x02
    11ce:	b9 81       	ldd	r27, Y+1	; 0x01
    11d0:	ce 0f       	add	r28, r30
    11d2:	d1 1d       	adc	r29, r1
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	ed 01       	movw	r28, r26
    11e0:	08 95       	ret

000011e2 <_exit>:
    11e2:	f8 94       	cli

000011e4 <__stop_program>:
    11e4:	ff cf       	rjmp	.-2      	; 0x11e4 <__stop_program>
