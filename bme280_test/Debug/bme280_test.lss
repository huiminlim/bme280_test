
bme280_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  00000fb4  00001048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800256  00800256  0000119e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002382  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f1a  00000000  00000000  00003706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ef2  00000000  00000000  00004620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00006514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012209  00000000  00000000  000068b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff5  00000000  00000000  00018ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00019ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001397  00000000  00000000  00019bae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3d       	cpi	r26, 0xD1	; 209
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	ab d3       	rcall	.+1878   	; 0x7f2 <main>
  9c:	89 c7       	rjmp	.+3858   	; 0xfb0 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__portable_avr_delay_cycles>:
     @param reg the register address to read from
     @returns the 16 bit data value read from the device
*/
int16_t readS16(uint8_t reg) {
    return (int16_t)read16(reg);
}
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__portable_avr_delay_cycles+0xa>
  a2:	61 50       	subi	r22, 0x01	; 1
  a4:	71 09       	sbc	r23, r1
  a6:	81 09       	sbc	r24, r1
  a8:	91 09       	sbc	r25, r1
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	81 05       	cpc	r24, r1
  b0:	91 05       	cpc	r25, r1
  b2:	b9 f7       	brne	.-18     	; 0xa2 <__portable_avr_delay_cycles+0x2>
  b4:	08 95       	ret

000000b6 <spixfer>:
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	00 00       	nop
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <spixfer+0x4>
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	08 95       	ret

000000c4 <read8>:
  c4:	cf 93       	push	r28
  c6:	c8 2f       	mov	r28, r24
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	60 e2       	ldi	r22, 0x20	; 32
  ce:	71 ea       	ldi	r23, 0xA1	; 161
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac d1       	rcall	.+856    	; 0x42e <spi_begin_txn>
  d6:	2a 98       	cbi	0x05, 2	; 5
  d8:	8c 2f       	mov	r24, r28
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	ec df       	rcall	.-40     	; 0xb6 <spixfer>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	ea df       	rcall	.-44     	; 0xb6 <spixfer>
  e2:	2a 9a       	sbi	0x05, 2	; 5
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <is_reading_calibration>:
  e8:	83 ef       	ldi	r24, 0xF3	; 243
  ea:	ec df       	rcall	.-40     	; 0xc4 <read8>
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret

000000f2 <write8>:
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	d8 2f       	mov	r29, r24
  f8:	c6 2f       	mov	r28, r22
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	60 e2       	ldi	r22, 0x20	; 32
 100:	71 ea       	ldi	r23, 0xA1	; 161
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	93 d1       	rcall	.+806    	; 0x42e <spi_begin_txn>
 108:	2a 98       	cbi	0x05, 2	; 5
 10a:	8d 2f       	mov	r24, r29
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	d3 df       	rcall	.-90     	; 0xb6 <spixfer>
 110:	8c 2f       	mov	r24, r28
 112:	d1 df       	rcall	.-94     	; 0xb6 <spixfer>
 114:	2a 9a       	sbi	0x05, 2	; 5
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <read16>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	c8 2f       	mov	r28, r24
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	60 e2       	ldi	r22, 0x20	; 32
 128:	71 ea       	ldi	r23, 0xA1	; 161
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	7f d1       	rcall	.+766    	; 0x42e <spi_begin_txn>
 130:	2a 98       	cbi	0x05, 2	; 5
 132:	8c 2f       	mov	r24, r28
 134:	80 68       	ori	r24, 0x80	; 128
 136:	bf df       	rcall	.-130    	; 0xb6 <spixfer>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	bd df       	rcall	.-134    	; 0xb6 <spixfer>
 13c:	d8 2f       	mov	r29, r24
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	ba df       	rcall	.-140    	; 0xb6 <spixfer>
 142:	c8 2f       	mov	r28, r24
 144:	2a 9a       	sbi	0x05, 2	; 5
 146:	55 d1       	rcall	.+682    	; 0x3f2 <spi_end_txn>
 148:	8c 2f       	mov	r24, r28
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9d 2b       	or	r25, r29
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <read16_LE>:
 154:	e3 df       	rcall	.-58     	; 0x11c <read16>
 156:	98 27       	eor	r25, r24
 158:	89 27       	eor	r24, r25
 15a:	98 27       	eor	r25, r24
 15c:	08 95       	ret

0000015e <read_coefficients>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	88 e8       	ldi	r24, 0x88	; 136
 164:	f7 df       	rcall	.-18     	; 0x154 <read16_LE>
 166:	ca ea       	ldi	r28, 0xAA	; 170
 168:	d2 e0       	ldi	r29, 0x02	; 2
 16a:	99 83       	std	Y+1, r25	; 0x01
 16c:	88 83       	st	Y, r24
 16e:	8a e8       	ldi	r24, 0x8A	; 138
 170:	f1 df       	rcall	.-30     	; 0x154 <read16_LE>
 172:	9b 83       	std	Y+3, r25	; 0x03
 174:	8a 83       	std	Y+2, r24	; 0x02
 176:	8c e8       	ldi	r24, 0x8C	; 140
 178:	ed df       	rcall	.-38     	; 0x154 <read16_LE>
 17a:	9d 83       	std	Y+5, r25	; 0x05
 17c:	8c 83       	std	Y+4, r24	; 0x04
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	8f 93       	push	r24
 182:	88 81       	ld	r24, Y
 184:	8f 93       	push	r24
 186:	8e e0       	ldi	r24, 0x0E	; 14
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	9f 93       	push	r25
 18c:	8f 93       	push	r24
 18e:	e7 d3       	rcall	.+1998   	; 0x95e <printf>
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	8f 93       	push	r24
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	8f 93       	push	r24
 198:	83 e3       	ldi	r24, 0x33	; 51
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	9f 93       	push	r25
 19e:	8f 93       	push	r24
 1a0:	de d3       	rcall	.+1980   	; 0x95e <printf>
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	8f 93       	push	r24
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	8f 93       	push	r24
 1aa:	87 e5       	ldi	r24, 0x57	; 87
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	9f 93       	push	r25
 1b0:	8f 93       	push	r24
 1b2:	d5 d3       	rcall	.+1962   	; 0x95e <printf>
 1b4:	8d b7       	in	r24, 0x3d	; 61
 1b6:	9e b7       	in	r25, 0x3e	; 62
 1b8:	0c 96       	adiw	r24, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	9e bf       	out	0x3e, r25	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	8d bf       	out	0x3d, r24	; 61
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <bme280_init>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	80 ed       	ldi	r24, 0xD0	; 208
 1d0:	79 df       	rcall	.-270    	; 0xc4 <read8>
 1d2:	c8 2f       	mov	r28, r24
 1d4:	1f 92       	push	r1
 1d6:	8f 93       	push	r24
 1d8:	8d e7       	ldi	r24, 0x7D	; 125
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	be d3       	rcall	.+1916   	; 0x95e <printf>
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	c0 36       	cpi	r28, 0x60	; 96
 1ec:	c9 f4       	brne	.+50     	; 0x220 <bme280_init+0x56>
 1ee:	66 eb       	ldi	r22, 0xB6	; 182
 1f0:	80 ee       	ldi	r24, 0xE0	; 224
 1f2:	7f df       	rcall	.-258    	; 0xf2 <write8>
 1f4:	63 e8       	ldi	r22, 0x83	; 131
 1f6:	76 e0       	ldi	r23, 0x06	; 6
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	51 df       	rcall	.-350    	; 0xa0 <__portable_avr_delay_cycles>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <bme280_init+0x40>
 200:	6b e1       	ldi	r22, 0x1B	; 27
 202:	71 e4       	ldi	r23, 0x41	; 65
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	4b df       	rcall	.-362    	; 0xa0 <__portable_avr_delay_cycles>
 20a:	6e df       	rcall	.-292    	; 0xe8 <is_reading_calibration>
 20c:	ec 01       	movw	r28, r24
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	b9 f7       	brne	.-18     	; 0x200 <bme280_init+0x36>
 212:	a5 df       	rcall	.-182    	; 0x15e <read_coefficients>
 214:	66 e3       	ldi	r22, 0x36	; 54
 216:	72 e8       	ldi	r23, 0x82	; 130
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	41 df       	rcall	.-382    	; 0xa0 <__portable_avr_delay_cycles>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <bme280_init+0x5a>
 220:	c0 e0       	ldi	r28, 0x00	; 0
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	ce 01       	movw	r24, r28
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <read24>:
/*!
     @brief  Reads a 24 bit value
     @param reg the register address to read from
     @returns the 24 bit data value read from the device
*/
uint32_t read24(uint8_t reg) {
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	cf 93       	push	r28
 236:	c8 2f       	mov	r28, r24
    uint32_t value;
    spi_begin_txn(500000, MSBFIRST, SPI_MODE0);
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	60 e2       	ldi	r22, 0x20	; 32
 23e:	71 ea       	ldi	r23, 0xA1	; 161
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	f4 d0       	rcall	.+488    	; 0x42e <spi_begin_txn>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 246:	2a 98       	cbi	0x05, 2	; 5

    // SS set to low - select slave
    ioport_set_pin_low(SPI_HARDWARE_SS);

    // read, bit 7 high
    spixfer(reg | 0x80);
 248:	8c 2f       	mov	r24, r28
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	34 df       	rcall	.-408    	; 0xb6 <spixfer>
    value = spixfer(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	32 df       	rcall	.-412    	; 0xb6 <spixfer>
 252:	c8 2e       	mov	r12, r24
 254:	d1 2c       	mov	r13, r1
 256:	e1 2c       	mov	r14, r1
 258:	f1 2c       	mov	r15, r1
 25a:	fe 2c       	mov	r15, r14
    value <<= 8;
 25c:	ed 2c       	mov	r14, r13
 25e:	dc 2c       	mov	r13, r12
 260:	cc 24       	eor	r12, r12
    value |= spixfer(0);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	28 df       	rcall	.-432    	; 0xb6 <spixfer>
 266:	c8 2a       	or	r12, r24
 268:	fe 2c       	mov	r15, r14
    value <<= 8;
 26a:	ed 2c       	mov	r14, r13
 26c:	dc 2c       	mov	r13, r12
 26e:	cc 24       	eor	r12, r12
    value |= spixfer(0);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	21 df       	rcall	.-446    	; 0xb6 <spixfer>
 274:	c8 2a       	or	r12, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 276:	2a 9a       	sbi	0x05, 2	; 5

    // SS set to high - de-select slave
    ioport_set_pin_high(SPI_HARDWARE_SS);
    spi_end_txn();
 278:	bc d0       	rcall	.+376    	; 0x3f2 <spi_end_txn>
 27a:	c7 01       	movw	r24, r14

    return value;
}
 27c:	b6 01       	movw	r22, r12
 27e:	cf 91       	pop	r28
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	08 95       	ret

0000028a <bme280_read_temperature>:
 28a:	8f 92       	push	r8

/*!
     @brief  Returns the temperature from the sensor
     @returns the temperature read from the device
*/
int32_t bme280_read_temperature(void) {
 28c:	9f 92       	push	r9
 28e:	af 92       	push	r10
 290:	bf 92       	push	r11
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
    int32_t var1, var2;
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 29a:	8a ef       	ldi	r24, 0xFA	; 250
 29c:	c7 df       	rcall	.-114    	; 0x22c <read24>
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24

    // value in case temp measurement was disabled
    if (adc_T == 0x800000) {
 2a2:	c1 14       	cp	r12, r1
 2a4:	d1 04       	cpc	r13, r1
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	e8 06       	cpc	r14, r24
 2aa:	f1 04       	cpc	r15, r1
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <bme280_read_temperature+0x26>
 2ae:	86 c0       	rjmp	.+268    	; 0x3bc <bme280_read_temperature+0x132>
        return BME_READ_TEMPERATURE_ERR;
    }

    adc_T = (adc_T >> 4);
 2b0:	d7 01       	movw	r26, r14
 2b2:	c6 01       	movw	r24, r12
 2b4:	68 94       	set
 2b6:	13 f8       	bld	r1, 3
 2b8:	b5 95       	asr	r27
 2ba:	a7 95       	ror	r26
 2bc:	97 95       	ror	r25
 2be:	87 95       	ror	r24
 2c0:	16 94       	lsr	r1
 2c2:	d1 f7       	brne	.-12     	; 0x2b8 <bme280_read_temperature+0x2e>

    printf("adc: %ld\r\n", adc_T);
 2c4:	bf 93       	push	r27
 2c6:	af 93       	push	r26
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	8f e8       	ldi	r24, 0x8F	; 143
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	44 d3       	rcall	.+1672   	; 0x95e <printf>

    // Calibrate the temperature sensor data
    var1 = ((((adc_T >> 3) - ((int32_t) bme280_calib_data_read.dig_T1 << 1))) * ((
 2d6:	ea ea       	ldi	r30, 0xAA	; 170
 2d8:	f2 e0       	ldi	r31, 0x02	; 2
 2da:	80 81       	ld	r24, Z
 2dc:	91 81       	ldd	r25, Z+1	; 0x01
 2de:	a0 e0       	ldi	r26, 0x00	; 0
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
                int32_t) bme280_calib_data_read.dig_T2)) >> 11;

    var2 = (((((adc_T >> 4) - ((int32_t) bme280_calib_data_read.dig_T1)) * (( adc_T >> 4) - ((
 2e2:	8d 2c       	mov	r8, r13
 2e4:	9e 2c       	mov	r9, r14
 2e6:	af 2c       	mov	r10, r15
 2e8:	bb 24       	eor	r11, r11
 2ea:	a7 fc       	sbrc	r10, 7
 2ec:	ba 94       	dec	r11
 2ee:	88 1a       	sub	r8, r24
 2f0:	99 0a       	sbc	r9, r25
 2f2:	aa 0a       	sbc	r10, r26
 2f4:	bb 0a       	sbc	r11, r27
    //!< add to compensate temp readings and in turn
    //!< to pressure and humidity readings
    int32_t t_fine_adjust = 0;

    int32_t t_fine = var1 + var2 + t_fine_adjust;
    int32_t T = (t_fine * 5 + 128) >> 8;
 2f6:	b7 01       	movw	r22, r14
 2f8:	a6 01       	movw	r20, r12
 2fa:	68 94       	set
 2fc:	16 f8       	bld	r1, 6
 2fe:	75 95       	asr	r23
 300:	67 95       	ror	r22
 302:	57 95       	ror	r21
 304:	47 95       	ror	r20
 306:	16 94       	lsr	r1
 308:	d1 f7       	brne	.-12     	; 0x2fe <bme280_read_temperature+0x74>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	9a 01       	movw	r18, r20
 314:	ab 01       	movw	r20, r22
 316:	28 1b       	sub	r18, r24
 318:	39 0b       	sbc	r19, r25
 31a:	4a 0b       	sbc	r20, r26
 31c:	5b 0b       	sbc	r21, r27
 31e:	a2 81       	ldd	r26, Z+2	; 0x02
 320:	b3 81       	ldd	r27, Z+3	; 0x03
 322:	b4 d2       	rcall	.+1384   	; 0x88c <__mulshisi3>
 324:	6b 01       	movw	r12, r22
 326:	7c 01       	movw	r14, r24
 328:	0b 2e       	mov	r0, r27
 32a:	bb e0       	ldi	r27, 0x0B	; 11
 32c:	f5 94       	asr	r15
 32e:	e7 94       	ror	r14
 330:	d7 94       	ror	r13
 332:	c7 94       	ror	r12
 334:	ba 95       	dec	r27
 336:	d1 f7       	brne	.-12     	; 0x32c <bme280_read_temperature+0xa2>
 338:	b0 2d       	mov	r27, r0
 33a:	a5 01       	movw	r20, r10
 33c:	94 01       	movw	r18, r8
 33e:	c5 01       	movw	r24, r10
 340:	b4 01       	movw	r22, r8
 342:	6f d2       	rcall	.+1246   	; 0x822 <__mulsi3>
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
 348:	01 2e       	mov	r0, r17
 34a:	1c e0       	ldi	r17, 0x0C	; 12
 34c:	55 95       	asr	r21
 34e:	47 95       	ror	r20
 350:	37 95       	ror	r19
 352:	27 95       	ror	r18
 354:	1a 95       	dec	r17
 356:	d1 f7       	brne	.-12     	; 0x34c <bme280_read_temperature+0xc2>
 358:	10 2d       	mov	r17, r0
 35a:	a4 81       	ldd	r26, Z+4	; 0x04
 35c:	b5 81       	ldd	r27, Z+5	; 0x05
 35e:	96 d2       	rcall	.+1324   	; 0x88c <__mulshisi3>
 360:	dc 01       	movw	r26, r24
 362:	cb 01       	movw	r24, r22
 364:	07 2e       	mov	r0, r23
 366:	7e e0       	ldi	r23, 0x0E	; 14
 368:	b5 95       	asr	r27
 36a:	a7 95       	ror	r26
 36c:	97 95       	ror	r25
 36e:	87 95       	ror	r24
 370:	7a 95       	dec	r23
 372:	d1 f7       	brne	.-12     	; 0x368 <bme280_read_temperature+0xde>
 374:	70 2d       	mov	r23, r0
 376:	8c 0d       	add	r24, r12
 378:	9d 1d       	adc	r25, r13
 37a:	ae 1d       	adc	r26, r14
 37c:	bf 1d       	adc	r27, r15
 37e:	6c 01       	movw	r12, r24
 380:	7d 01       	movw	r14, r26
 382:	cc 0c       	add	r12, r12
 384:	dd 1c       	adc	r13, r13
 386:	ee 1c       	adc	r14, r14
 388:	ff 1c       	adc	r15, r15
 38a:	cc 0c       	add	r12, r12
 38c:	dd 1c       	adc	r13, r13
 38e:	ee 1c       	adc	r14, r14
 390:	ff 1c       	adc	r15, r15
 392:	8c 0d       	add	r24, r12
 394:	9d 1d       	adc	r25, r13
 396:	ae 1d       	adc	r26, r14
 398:	bf 1d       	adc	r27, r15
 39a:	80 58       	subi	r24, 0x80	; 128
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	af 4f       	sbci	r26, 0xFF	; 255
 3a0:	bf 4f       	sbci	r27, 0xFF	; 255
    return T;
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	69 2f       	mov	r22, r25
 3b0:	7a 2f       	mov	r23, r26
 3b2:	8b 2f       	mov	r24, r27
 3b4:	99 27       	eor	r25, r25
 3b6:	87 fd       	sbrc	r24, 7
 3b8:	9a 95       	dec	r25
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <bme280_read_temperature+0x138>
    int32_t var1, var2;
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);

    // value in case temp measurement was disabled
    if (adc_T == 0x800000) {
        return BME_READ_TEMPERATURE_ERR;
 3bc:	6f ef       	ldi	r22, 0xFF	; 255
 3be:	7f ef       	ldi	r23, 0xFF	; 255
 3c0:	cb 01       	movw	r24, r22
    int32_t t_fine_adjust = 0;

    int32_t t_fine = var1 + var2 + t_fine_adjust;
    int32_t T = (t_fine * 5 + 128) >> 8;
    return T;
}
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	cf 90       	pop	r12
 3ca:	bf 90       	pop	r11
 3cc:	af 90       	pop	r10
 3ce:	9f 90       	pop	r9
 3d0:	8f 90       	pop	r8
 3d2:	08 95       	ret

000003d4 <spi_init>:
 3d4:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 3d6:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
 3d8:	8c b5       	in	r24, 0x2c	; 44
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
 3de:	8c b5       	in	r24, 0x2c	; 44
 3e0:	80 64       	ori	r24, 0x40	; 64
 3e2:	8c bd       	out	0x2c, r24	; 44
 3e4:	25 9a       	sbi	0x04, 5	; 4
 3e6:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
 3e8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <__data_end+0x1>
 3ec:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <__data_end>
 3f0:	08 95       	ret

000003f2 <spi_end_txn>:
/*
    This function configures SPI bus to release it
*/
void spi_end_txn (void) {
    // Reduce the number of SPI initialized
    if (num_initialized) {
 3f2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
 3f6:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	39 f0       	breq	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        num_initialized--;
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x1>
 404:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
    }

    // If no more usage of SPI bus, release the SPI bus
    // Disable SPI
    if (num_initialized == 0) {
 408:	89 2b       	or	r24, r25
 40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
        SPCR &= ~(1 << SPE);
 40c:	8c b5       	in	r24, 0x2c	; 44
 40e:	8f 7b       	andi	r24, 0xBF	; 191
 410:	8c bd       	out	0x2c, r24	; 44
 412:	08 95       	ret

00000414 <get_clock_divider_bits>:
    if (clockDiv == 6) {
        clockDiv = 7;
    }

    return clockDiv;
}
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	08 95       	ret

00000418 <set_clock_divider>:
/*
    This function sets the clock mode given a clock div value
*/
void set_clock_divider(uint8_t clockDiv) {
    // Invert the SPI2X bit
    uint8_t clock_div_invert = clockDiv ^ 0x1;
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	89 27       	eor	r24, r25

    SPCR |= ((clock_div_invert >> 1) & SPI_CLOCK_MASK);
 41c:	2c b5       	in	r18, 0x2c	; 44
 41e:	98 2f       	mov	r25, r24
 420:	96 95       	lsr	r25
 422:	93 70       	andi	r25, 0x03	; 3
 424:	92 2b       	or	r25, r18
 426:	9c bd       	out	0x2c, r25	; 44
    SPSR = (clock_div_invert & SPI_2XCLOCK_MASK);
 428:	81 70       	andi	r24, 0x01	; 1
 42a:	8d bd       	out	0x2d, r24	; 45
 42c:	08 95       	ret

0000042e <spi_begin_txn>:

    Example:
 		SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
 		SPISettings(500000, MSBFIRST, SPI_MODE0)
*/
void spi_begin_txn(uint32_t clock, uint8_t bit_order, uint8_t data_mode) {
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	86 2f       	mov	r24, r22
 434:	d4 2f       	mov	r29, r20
 436:	c2 2f       	mov	r28, r18
    // Setup SPI in master, again
    SPCR |= (1 << SPE);
 438:	9c b5       	in	r25, 0x2c	; 44
 43a:	90 64       	ori	r25, 0x40	; 64
 43c:	9c bd       	out	0x2c, r25	; 44
    SPCR |= (1 << MSTR);
 43e:	9c b5       	in	r25, 0x2c	; 44
 440:	90 61       	ori	r25, 0x10	; 16
 442:	9c bd       	out	0x2c, r25	; 44

    // Setup clock
    uint8_t clock_div_bits = get_clock_divider_bits(clock);
 444:	e7 df       	rcall	.-50     	; 0x414 <get_clock_divider_bits>
    set_clock_divider(clock_div_bits);
 446:	e8 df       	rcall	.-48     	; 0x418 <set_clock_divider>
 448:	8c b5       	in	r24, 0x2c	; 44

    // Setup data mode
    SPCR |= (data_mode & SPI_MODE_MASK);
 44a:	2c 2f       	mov	r18, r28
 44c:	2c 70       	andi	r18, 0x0C	; 12
 44e:	28 2b       	or	r18, r24
 450:	2c bd       	out	0x2c, r18	; 44
 452:	8c b5       	in	r24, 0x2c	; 44

    // Setup bit order
    SPCR |= ((bit_order == LSBFIRST) ? (1 << DORD) : 0);
 454:	dd 23       	and	r29, r29
 456:	11 f0       	breq	.+4      	; 0x45c <spi_begin_txn+0x2e>
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	01 c0       	rjmp	.+2      	; 0x45e <spi_begin_txn+0x30>
 45c:	90 e2       	ldi	r25, 0x20	; 32
 45e:	89 2b       	or	r24, r25
 460:	8c bd       	out	0x2c, r24	; 44
 462:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>

    num_initialized++;
 466:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x1>
 470:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
 474:	df 91       	pop	r29
}
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 47a:	cf 93       	push	r28
 47c:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 47e:	87 30       	cpi	r24, 0x07	; 7
 480:	61 f4       	brne	.+24     	; 0x49a <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 482:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <__iob+0x4>
 486:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <__iob+0x5>
 48a:	47 e0       	ldi	r20, 0x07	; 7
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	8a e9       	ldi	r24, 0x9A	; 154
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	31 d2       	rcall	.+1122   	; 0x8fa <fwrite>
        return 0;
 498:	0b c0       	rjmp	.+22     	; 0x4b0 <uart_putchar+0x36>
    }

    if (c == '\n') {
 49a:	8a 30       	cpi	r24, 0x0A	; 10
 49c:	11 f4       	brne	.+4      	; 0x4a2 <uart_putchar+0x28>
        uart_putchar('\r', stream);
 49e:	8d e0       	ldi	r24, 0x0D	; 13
 4a0:	ec df       	rcall	.-40     	; 0x47a <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 4a2:	e0 ec       	ldi	r30, 0xC0	; 192
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	85 ff       	sbrs	r24, 5
 4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <uart_putchar+0x2c>
    UDR0 = c;
 4ac:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 4b8:	6f 92       	push	r6
 4ba:	7f 92       	push	r7
 4bc:	8f 92       	push	r8
 4be:	9f 92       	push	r9
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 4d4:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <rxp.2118>
 4d8:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <rxp.2118+0x1>
 4dc:	23 2b       	or	r18, r19
 4de:	09 f0       	breq	.+2      	; 0x4e2 <uart_getchar+0x2a>
 4e0:	cc c0       	rjmp	.+408    	; 0x67a <uart_getchar+0x1c2>
 4e2:	8c 01       	movw	r16, r24
 4e4:	0f 2e       	mov	r0, r31
 4e6:	f8 e5       	ldi	r31, 0x58	; 88
 4e8:	8f 2e       	mov	r8, r31
 4ea:	f2 e0       	ldi	r31, 0x02	; 2
 4ec:	9f 2e       	mov	r9, r31
 4ee:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 4f0:	c0 ec       	ldi	r28, 0xC0	; 192
 4f2:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 4f4:	0f 2e       	mov	r0, r31
 4f6:	f6 ec       	ldi	r31, 0xC6	; 198
 4f8:	cf 2e       	mov	r12, r31
 4fa:	d1 2c       	mov	r13, r1
 4fc:	f0 2d       	mov	r31, r0
 4fe:	54 01       	movw	r10, r8
 500:	0f 2e       	mov	r0, r31
 502:	f7 e5       	ldi	r31, 0x57	; 87
 504:	6f 2e       	mov	r6, r31
 506:	f2 e0       	ldi	r31, 0x02	; 2
 508:	7f 2e       	mov	r7, r31
 50a:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 50c:	88 81       	ld	r24, Y
 50e:	88 23       	and	r24, r24
 510:	ec f7       	brge	.-6      	; 0x50c <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
 512:	88 81       	ld	r24, Y
 514:	84 fd       	sbrc	r24, 4
 516:	c4 c0       	rjmp	.+392    	; 0x6a0 <uart_getchar+0x1e8>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 518:	88 81       	ld	r24, Y
 51a:	83 fd       	sbrc	r24, 3
 51c:	c4 c0       	rjmp	.+392    	; 0x6a6 <uart_getchar+0x1ee>
                return _FDEV_ERR;
            }

            c = UDR0;
 51e:	f6 01       	movw	r30, r12
 520:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 522:	8d 30       	cpi	r24, 0x0D	; 13
 524:	11 f0       	breq	.+4      	; 0x52a <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
 526:	8a 30       	cpi	r24, 0x0A	; 10
 528:	61 f4       	brne	.+24     	; 0x542 <uart_getchar+0x8a>
                *cp = c;
 52a:	8a e0       	ldi	r24, 0x0A	; 10
 52c:	f4 01       	movw	r30, r8
 52e:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 530:	b8 01       	movw	r22, r16
 532:	a3 df       	rcall	.-186    	; 0x47a <uart_putchar>
                rxp = b;
 534:	88 e5       	ldi	r24, 0x58	; 88
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <rxp.2118+0x1>
 53c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <rxp.2118>
                break;
 540:	9c c0       	rjmp	.+312    	; 0x67a <uart_getchar+0x1c2>
            }
            else if (c == '\t') {
 542:	89 30       	cpi	r24, 0x09	; 9
 544:	39 f0       	breq	.+14     	; 0x554 <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 546:	90 ee       	ldi	r25, 0xE0	; 224
 548:	98 0f       	add	r25, r24
 54a:	9f 35       	cpi	r25, 0x5F	; 95
 54c:	20 f0       	brcs	.+8      	; 0x556 <uart_getchar+0x9e>
 54e:	80 3a       	cpi	r24, 0xA0	; 160
 550:	a8 f0       	brcs	.+42     	; 0x57c <uart_getchar+0xc4>
 552:	01 c0       	rjmp	.+2      	; 0x556 <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 554:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 556:	f7 ea       	ldi	r31, 0xA7	; 167
 558:	8f 16       	cp	r8, r31
 55a:	f2 e0       	ldi	r31, 0x02	; 2
 55c:	9f 06       	cpc	r9, r31
 55e:	21 f4       	brne	.+8      	; 0x568 <uart_getchar+0xb0>
                    uart_putchar('\a', stream);
 560:	b8 01       	movw	r22, r16
 562:	87 e0       	ldi	r24, 0x07	; 7
 564:	8a df       	rcall	.-236    	; 0x47a <uart_putchar>
 566:	d2 cf       	rjmp	.-92     	; 0x50c <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
 568:	74 01       	movw	r14, r8
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	e9 1a       	sub	r14, r25
 56e:	f9 0a       	sbc	r15, r25
 570:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 572:	80 83       	st	Z, r24
 574:	b8 01       	movw	r22, r16
 576:	81 df       	rcall	.-254    	; 0x47a <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 578:	47 01       	movw	r8, r14
 57a:	c8 cf       	rjmp	.-112    	; 0x50c <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
 57c:	82 31       	cpi	r24, 0x12	; 18
 57e:	b9 f1       	breq	.+110    	; 0x5ee <uart_getchar+0x136>
 580:	30 f4       	brcc	.+12     	; 0x58e <uart_getchar+0xd6>
 582:	83 30       	cpi	r24, 0x03	; 3
 584:	09 f4       	brne	.+2      	; 0x588 <uart_getchar+0xd0>
 586:	92 c0       	rjmp	.+292    	; 0x6ac <uart_getchar+0x1f4>
 588:	88 30       	cpi	r24, 0x08	; 8
 58a:	e9 f0       	breq	.+58     	; 0x5c6 <uart_getchar+0x10e>
 58c:	bf cf       	rjmp	.-130    	; 0x50c <uart_getchar+0x54>
 58e:	87 31       	cpi	r24, 0x17	; 23
 590:	29 f0       	breq	.+10     	; 0x59c <uart_getchar+0xe4>
 592:	8f 37       	cpi	r24, 0x7F	; 127
 594:	c1 f0       	breq	.+48     	; 0x5c6 <uart_getchar+0x10e>
 596:	85 31       	cpi	r24, 0x15	; 21
 598:	79 f0       	breq	.+30     	; 0x5b8 <uart_getchar+0x100>
 59a:	b8 cf       	rjmp	.-144    	; 0x50c <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 59c:	f8 e5       	ldi	r31, 0x58	; 88
 59e:	8f 16       	cp	r8, r31
 5a0:	f2 e0       	ldi	r31, 0x02	; 2
 5a2:	9f 06       	cpc	r9, r31
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <uart_getchar+0xf0>
 5a6:	08 f4       	brcc	.+2      	; 0x5aa <uart_getchar+0xf2>
 5a8:	b1 cf       	rjmp	.-158    	; 0x50c <uart_getchar+0x54>
 5aa:	f4 01       	movw	r30, r8
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	80 81       	ld	r24, Z
 5b0:	80 32       	cpi	r24, 0x20	; 32
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <uart_getchar+0xfe>
 5b4:	4a c0       	rjmp	.+148    	; 0x64a <uart_getchar+0x192>
 5b6:	aa cf       	rjmp	.-172    	; 0x50c <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 5b8:	88 e5       	ldi	r24, 0x58	; 88
 5ba:	88 16       	cp	r8, r24
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	98 06       	cpc	r9, r24
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <uart_getchar+0x10c>
 5c2:	70 f5       	brcc	.+92     	; 0x620 <uart_getchar+0x168>
 5c4:	a3 cf       	rjmp	.-186    	; 0x50c <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 5c6:	98 e5       	ldi	r25, 0x58	; 88
 5c8:	89 16       	cp	r8, r25
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	99 06       	cpc	r9, r25
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <uart_getchar+0x11a>
 5d0:	08 f4       	brcc	.+2      	; 0x5d4 <uart_getchar+0x11c>
                    uart_putchar('\b', stream);
 5d2:	9c cf       	rjmp	.-200    	; 0x50c <uart_getchar+0x54>
 5d4:	b8 01       	movw	r22, r16
 5d6:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 5d8:	50 df       	rcall	.-352    	; 0x47a <uart_putchar>
 5da:	b8 01       	movw	r22, r16
 5dc:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 5de:	4d df       	rcall	.-358    	; 0x47a <uart_putchar>
 5e0:	b8 01       	movw	r22, r16
 5e2:	88 e0       	ldi	r24, 0x08	; 8
 5e4:	4a df       	rcall	.-364    	; 0x47a <uart_putchar>
                    cp--;
 5e6:	e1 e0       	ldi	r30, 0x01	; 1
 5e8:	8e 1a       	sub	r8, r30
 5ea:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 5ec:	8f cf       	rjmp	.-226    	; 0x50c <uart_getchar+0x54>
 5ee:	b8 01       	movw	r22, r16
 5f0:	8d e0       	ldi	r24, 0x0D	; 13
 5f2:	43 df       	rcall	.-378    	; 0x47a <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 5f4:	f8 e5       	ldi	r31, 0x58	; 88
 5f6:	8f 16       	cp	r8, r31
 5f8:	f2 e0       	ldi	r31, 0x02	; 2
 5fa:	9f 06       	cpc	r9, r31
 5fc:	09 f0       	breq	.+2      	; 0x600 <uart_getchar+0x148>
 5fe:	08 f4       	brcc	.+2      	; 0x602 <uart_getchar+0x14a>
 600:	85 cf       	rjmp	.-246    	; 0x50c <uart_getchar+0x54>
 602:	0f 2e       	mov	r0, r31
 604:	f8 e5       	ldi	r31, 0x58	; 88
 606:	ef 2e       	mov	r14, r31
 608:	f2 e0       	ldi	r31, 0x02	; 2
 60a:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 60c:	f0 2d       	mov	r31, r0
 60e:	b8 01       	movw	r22, r16
 610:	f7 01       	movw	r30, r14
 612:	81 91       	ld	r24, Z+
 614:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 616:	31 df       	rcall	.-414    	; 0x47a <uart_putchar>
 618:	8e 14       	cp	r8, r14
 61a:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 61c:	c1 f7       	brne	.-16     	; 0x60e <uart_getchar+0x156>
 61e:	76 cf       	rjmp	.-276    	; 0x50c <uart_getchar+0x54>
 620:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 622:	88 e0       	ldi	r24, 0x08	; 8
 624:	2a df       	rcall	.-428    	; 0x47a <uart_putchar>
 626:	b8 01       	movw	r22, r16
 628:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 62a:	27 df       	rcall	.-434    	; 0x47a <uart_putchar>
 62c:	b8 01       	movw	r22, r16
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	24 df       	rcall	.-440    	; 0x47a <uart_putchar>
                    cp--;
 632:	f1 e0       	ldi	r31, 0x01	; 1
 634:	8f 1a       	sub	r8, r31
 636:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 638:	88 e5       	ldi	r24, 0x58	; 88
 63a:	88 16       	cp	r8, r24
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	98 06       	cpc	r9, r24
 640:	79 f7       	brne	.-34     	; 0x620 <uart_getchar+0x168>
 642:	f3 01       	movw	r30, r6
 644:	31 96       	adiw	r30, 0x01	; 1
 646:	4f 01       	movw	r8, r30
 648:	61 cf       	rjmp	.-318    	; 0x50c <uart_getchar+0x54>
 64a:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	ef 1a       	sub	r14, r31
 650:	f1 08       	sbc	r15, r1
 652:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 654:	88 e0       	ldi	r24, 0x08	; 8
 656:	11 df       	rcall	.-478    	; 0x47a <uart_putchar>
 658:	b8 01       	movw	r22, r16
 65a:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 65c:	0e df       	rcall	.-484    	; 0x47a <uart_putchar>
 65e:	b8 01       	movw	r22, r16
 660:	88 e0       	ldi	r24, 0x08	; 8
 662:	0b df       	rcall	.-490    	; 0x47a <uart_putchar>
                    cp--;
 664:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 666:	ae 14       	cp	r10, r14
 668:	bf 04       	cpc	r11, r15
 66a:	09 f4       	brne	.+2      	; 0x66e <uart_getchar+0x1b6>
 66c:	4f cf       	rjmp	.-354    	; 0x50c <uart_getchar+0x54>
 66e:	f7 01       	movw	r30, r14
 670:	82 91       	ld	r24, -Z
 672:	7f 01       	movw	r14, r30
 674:	80 32       	cpi	r24, 0x20	; 32
 676:	69 f7       	brne	.-38     	; 0x652 <uart_getchar+0x19a>
 678:	49 cf       	rjmp	.-366    	; 0x50c <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
 67a:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <rxp.2118>
 67e:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <rxp.2118+0x1>
 682:	cf 01       	movw	r24, r30
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <rxp.2118+0x1>
 68a:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <rxp.2118>
 68e:	80 81       	ld	r24, Z

    if (c == '\n') {
 690:	8a 30       	cpi	r24, 0x0A	; 10
 692:	21 f4       	brne	.+8      	; 0x69c <uart_getchar+0x1e4>
        rxp = 0;
 694:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <rxp.2118+0x1>
 698:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <rxp.2118>
    }

    return c;
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	08 c0       	rjmp	.+16     	; 0x6b0 <uart_getchar+0x1f8>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 6a0:	8e ef       	ldi	r24, 0xFE	; 254
 6a2:	9f ef       	ldi	r25, 0xFF	; 255
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <uart_getchar+0x1f8>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	9f ef       	ldi	r25, 0xFF	; 255
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <uart_getchar+0x1f8>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	ff 90       	pop	r15
 6ba:	ef 90       	pop	r14
 6bc:	df 90       	pop	r13
 6be:	cf 90       	pop	r12
 6c0:	bf 90       	pop	r11
 6c2:	af 90       	pop	r10
 6c4:	9f 90       	pop	r9
 6c6:	8f 90       	pop	r8
 6c8:	7f 90       	pop	r7
 6ca:	6f 90       	pop	r6
 6cc:	08 95       	ret

000006ce <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 6ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
 6d2:	80 e1       	ldi	r24, 0x10	; 16
 6d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 6d8:	88 e1       	ldi	r24, 0x18	; 24
 6da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
 6e4:	eb ec       	ldi	r30, 0xCB	; 203
 6e6:	f2 e0       	ldi	r31, 0x02	; 2
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	91 83       	std	Z+1, r25	; 0x01
 6ee:	80 83       	st	Z, r24
 6f0:	93 83       	std	Z+3, r25	; 0x03
 6f2:	82 83       	std	Z+2, r24	; 0x02
 6f4:	08 95       	ret

000006f6 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 6f6:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 6f8:	84 b1       	in	r24, 0x04	; 4
 6fa:	80 62       	ori	r24, 0x20	; 32
 6fc:	8f 77       	andi	r24, 0x7F	; 127
 6fe:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 700:	89 2f       	mov	r24, r25
 702:	80 6a       	ori	r24, 0xA0	; 160
 704:	85 b9       	out	0x05, r24	; 5
 706:	08 95       	ret

00000708 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 708:	04 c0       	rjmp	.+8      	; 0x712 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 70a:	61 50       	subi	r22, 0x01	; 1
 70c:	71 09       	sbc	r23, r1
 70e:	81 09       	sbc	r24, r1
 710:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 712:	61 15       	cp	r22, r1
 714:	71 05       	cpc	r23, r1
 716:	81 05       	cpc	r24, r1
 718:	91 05       	cpc	r25, r1
 71a:	b9 f7       	brne	.-18     	; 0x70a <__portable_avr_delay_cycles+0x2>
 71c:	08 95       	ret

0000071e <print_all_values>:
        delay_ms(10000);
    }

}

void print_all_values(void) {
 71e:	8f 92       	push	r8
 720:	9f 92       	push	r9
 722:	af 92       	push	r10
 724:	bf 92       	push	r11
 726:	cf 92       	push	r12
 728:	df 92       	push	r13
 72a:	ef 92       	push	r14
 72c:	ff 92       	push	r15
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	00 d0       	rcall	.+0      	; 0x738 <print_all_values+0x1a>
 738:	00 d0       	rcall	.+0      	; 0x73a <print_all_values+0x1c>
 73a:	00 d0       	rcall	.+0      	; 0x73c <print_all_values+0x1e>
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
    char str[6];
    int32_t temp = bme280_read_temperature();
 740:	a4 dd       	rcall	.-1208   	; 0x28a <bme280_read_temperature>
 742:	6b 01       	movw	r12, r22
 744:	7c 01       	movw	r14, r24

    if (temp == BME_READ_TEMPERATURE_ERR) {
 746:	6f 3f       	cpi	r22, 0xFF	; 255
 748:	2f ef       	ldi	r18, 0xFF	; 255
 74a:	72 07       	cpc	r23, r18
 74c:	82 07       	cpc	r24, r18
 74e:	92 07       	cpc	r25, r18
 750:	39 f4       	brne	.+14     	; 0x760 <print_all_values+0x42>
        printf("Temperature reading error!\r\n");
 752:	82 ea       	ldi	r24, 0xA2	; 162
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	16 d1       	rcall	.+556    	; 0x984 <puts>
        printf("You need to enable temperature measurement\r\n\r\n");
 758:	8e eb       	ldi	r24, 0xBE	; 190
 75a:	91 e0       	ldi	r25, 0x01	; 1
 75c:	13 d1       	rcall	.+550    	; 0x984 <puts>
 75e:	36 c0       	rjmp	.+108    	; 0x7cc <print_all_values+0xae>
    }
    else {
        snprintf(str, sizeof(str), "%ld.%ld", (temp - temp % 100) / 100, temp % 100);
 760:	0f 2e       	mov	r0, r31
 762:	f4 e6       	ldi	r31, 0x64	; 100
 764:	8f 2e       	mov	r8, r31
 766:	91 2c       	mov	r9, r1
 768:	a1 2c       	mov	r10, r1
 76a:	b1 2c       	mov	r11, r1
 76c:	f0 2d       	mov	r31, r0
 76e:	a5 01       	movw	r20, r10
 770:	94 01       	movw	r18, r8
 772:	66 d0       	rcall	.+204    	; 0x840 <__divmodsi4>
 774:	9f 93       	push	r25
 776:	8f 93       	push	r24
 778:	7f 93       	push	r23
 77a:	6f 93       	push	r22
 77c:	a7 01       	movw	r20, r14
 77e:	96 01       	movw	r18, r12
 780:	26 1b       	sub	r18, r22
 782:	37 0b       	sbc	r19, r23
 784:	48 0b       	sbc	r20, r24
 786:	59 0b       	sbc	r21, r25
 788:	ca 01       	movw	r24, r20
 78a:	b9 01       	movw	r22, r18
 78c:	a5 01       	movw	r20, r10
 78e:	94 01       	movw	r18, r8
 790:	57 d0       	rcall	.+174    	; 0x840 <__divmodsi4>
 792:	5f 93       	push	r21
 794:	4f 93       	push	r20
 796:	3f 93       	push	r19
 798:	2f 93       	push	r18
 79a:	8c ee       	ldi	r24, 0xEC	; 236
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	9f 93       	push	r25
 7a0:	8f 93       	push	r24
 7a2:	1f 92       	push	r1
 7a4:	86 e0       	ldi	r24, 0x06	; 6
 7a6:	8f 93       	push	r24
 7a8:	8e 01       	movw	r16, r28
 7aa:	0f 5f       	subi	r16, 0xFF	; 255
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	1f 93       	push	r17
 7b0:	0f 93       	push	r16
 7b2:	18 d1       	rcall	.+560    	; 0x9e4 <snprintf>
        printf("Temperature: %s\r\n", str);
 7b4:	1f 93       	push	r17
 7b6:	0f 93       	push	r16
 7b8:	84 ef       	ldi	r24, 0xF4	; 244
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	9f 93       	push	r25
 7be:	8f 93       	push	r24
 7c0:	ce d0       	rcall	.+412    	; 0x95e <printf>
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	f8 94       	cli
 7c6:	de bf       	out	0x3e, r29	; 62
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	cd bf       	out	0x3d, r28	; 61
    }


}
 7cc:	26 96       	adiw	r28, 0x06	; 6
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	df 90       	pop	r13
 7e6:	cf 90       	pop	r12
 7e8:	bf 90       	pop	r11
 7ea:	af 90       	pop	r10
 7ec:	9f 90       	pop	r9
 7ee:	8f 90       	pop	r8
 7f0:	08 95       	ret

000007f2 <main>:
// Print all temp, pressure, altitude and humidity values
void print_all_values(void);

int main (void) {
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
 7f2:	81 df       	rcall	.-254    	; 0x6f6 <board_init>

    ioport_init();
    uart_init();
 7f4:	6c df       	rcall	.-296    	; 0x6ce <uart_init>

    // Sensors initialization
    spi_init();
 7f6:	ee dd       	rcall	.-1060   	; 0x3d4 <spi_init>

    printf("----- Default testing -----\r\n");
 7f8:	86 e0       	ldi	r24, 0x06	; 6
 7fa:	92 e0       	ldi	r25, 0x02	; 2
 7fc:	c3 d0       	rcall	.+390    	; 0x984 <puts>
    //uint8_t sensor_id = read8(BME280_REGISTER_CHIPID);
    //printf("Sensor ID: 0x%x\r\n", sensor_id);

    int ret = bme280_init();
 7fe:	e5 dc       	rcall	.-1590   	; 0x1ca <bme280_init>

    if (ret == BME_INIT_NO_ERR) {
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	21 f4       	brne	.+8      	; 0x80c <main+0x1a>
        printf("Sensor Initialized\r\n");
 804:	83 e2       	ldi	r24, 0x23	; 35
 806:	92 e0       	ldi	r25, 0x02	; 2
 808:	bd d0       	rcall	.+378    	; 0x984 <puts>
    }
    else {
        printf("Sensor initialization failed!\r\n");
 80a:	04 c0       	rjmp	.+8      	; 0x814 <main+0x22>
 80c:	87 e3       	ldi	r24, 0x37	; 55
 80e:	92 e0       	ldi	r25, 0x02	; 2
 810:	b9 d0       	rcall	.+370    	; 0x984 <puts>

        while (1);
    }

    while (1) {
        print_all_values();
 812:	ff cf       	rjmp	.-2      	; 0x812 <main+0x20>
 814:	84 df       	rcall	.-248    	; 0x71e <print_all_values>
        delay_ms(10000);
 816:	6b e6       	ldi	r22, 0x6B	; 107
 818:	7e e6       	ldi	r23, 0x6E	; 110
 81a:	89 e1       	ldi	r24, 0x19	; 25
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	74 df       	rcall	.-280    	; 0x708 <__portable_avr_delay_cycles>
 820:	f9 cf       	rjmp	.-14     	; 0x814 <main+0x22>

00000822 <__mulsi3>:
 822:	db 01       	movw	r26, r22
 824:	8f 93       	push	r24
 826:	9f 93       	push	r25
 828:	27 d0       	rcall	.+78     	; 0x878 <__muluhisi3>
 82a:	bf 91       	pop	r27
 82c:	af 91       	pop	r26
 82e:	a2 9f       	mul	r26, r18
 830:	80 0d       	add	r24, r0
 832:	91 1d       	adc	r25, r1
 834:	a3 9f       	mul	r26, r19
 836:	90 0d       	add	r25, r0
 838:	b2 9f       	mul	r27, r18
 83a:	90 0d       	add	r25, r0
 83c:	11 24       	eor	r1, r1
 83e:	08 95       	ret

00000840 <__divmodsi4>:
 840:	05 2e       	mov	r0, r21
 842:	97 fb       	bst	r25, 7
 844:	16 f4       	brtc	.+4      	; 0x84a <__divmodsi4+0xa>
 846:	00 94       	com	r0
 848:	0f d0       	rcall	.+30     	; 0x868 <__negsi2>
 84a:	57 fd       	sbrc	r21, 7
 84c:	05 d0       	rcall	.+10     	; 0x858 <__divmodsi4_neg2>
 84e:	24 d0       	rcall	.+72     	; 0x898 <__udivmodsi4>
 850:	07 fc       	sbrc	r0, 7
 852:	02 d0       	rcall	.+4      	; 0x858 <__divmodsi4_neg2>
 854:	46 f4       	brtc	.+16     	; 0x866 <__divmodsi4_exit>
 856:	08 c0       	rjmp	.+16     	; 0x868 <__negsi2>

00000858 <__divmodsi4_neg2>:
 858:	50 95       	com	r21
 85a:	40 95       	com	r20
 85c:	30 95       	com	r19
 85e:	21 95       	neg	r18
 860:	3f 4f       	sbci	r19, 0xFF	; 255
 862:	4f 4f       	sbci	r20, 0xFF	; 255
 864:	5f 4f       	sbci	r21, 0xFF	; 255

00000866 <__divmodsi4_exit>:
 866:	08 95       	ret

00000868 <__negsi2>:
 868:	90 95       	com	r25
 86a:	80 95       	com	r24
 86c:	70 95       	com	r23
 86e:	61 95       	neg	r22
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	08 95       	ret

00000878 <__muluhisi3>:
 878:	31 d0       	rcall	.+98     	; 0x8dc <__umulhisi3>
 87a:	a5 9f       	mul	r26, r21
 87c:	90 0d       	add	r25, r0
 87e:	b4 9f       	mul	r27, r20
 880:	90 0d       	add	r25, r0
 882:	a4 9f       	mul	r26, r20
 884:	80 0d       	add	r24, r0
 886:	91 1d       	adc	r25, r1
 888:	11 24       	eor	r1, r1
 88a:	08 95       	ret

0000088c <__mulshisi3>:
 88c:	b7 ff       	sbrs	r27, 7
 88e:	f4 cf       	rjmp	.-24     	; 0x878 <__muluhisi3>

00000890 <__mulohisi3>:
 890:	f3 df       	rcall	.-26     	; 0x878 <__muluhisi3>
 892:	82 1b       	sub	r24, r18
 894:	93 0b       	sbc	r25, r19
 896:	08 95       	ret

00000898 <__udivmodsi4>:
 898:	a1 e2       	ldi	r26, 0x21	; 33
 89a:	1a 2e       	mov	r1, r26
 89c:	aa 1b       	sub	r26, r26
 89e:	bb 1b       	sub	r27, r27
 8a0:	fd 01       	movw	r30, r26
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <__udivmodsi4_ep>

000008a4 <__udivmodsi4_loop>:
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	ee 1f       	adc	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	a2 17       	cp	r26, r18
 8ae:	b3 07       	cpc	r27, r19
 8b0:	e4 07       	cpc	r30, r20
 8b2:	f5 07       	cpc	r31, r21
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__udivmodsi4_ep>
 8b6:	a2 1b       	sub	r26, r18
 8b8:	b3 0b       	sbc	r27, r19
 8ba:	e4 0b       	sbc	r30, r20
 8bc:	f5 0b       	sbc	r31, r21

000008be <__udivmodsi4_ep>:
 8be:	66 1f       	adc	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	1a 94       	dec	r1
 8c8:	69 f7       	brne	.-38     	; 0x8a4 <__udivmodsi4_loop>
 8ca:	60 95       	com	r22
 8cc:	70 95       	com	r23
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	9b 01       	movw	r18, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	bd 01       	movw	r22, r26
 8d8:	cf 01       	movw	r24, r30
 8da:	08 95       	ret

000008dc <__umulhisi3>:
 8dc:	a2 9f       	mul	r26, r18
 8de:	b0 01       	movw	r22, r0
 8e0:	b3 9f       	mul	r27, r19
 8e2:	c0 01       	movw	r24, r0
 8e4:	a3 9f       	mul	r26, r19
 8e6:	70 0d       	add	r23, r0
 8e8:	81 1d       	adc	r24, r1
 8ea:	11 24       	eor	r1, r1
 8ec:	91 1d       	adc	r25, r1
 8ee:	b2 9f       	mul	r27, r18
 8f0:	70 0d       	add	r23, r0
 8f2:	81 1d       	adc	r24, r1
 8f4:	11 24       	eor	r1, r1
 8f6:	91 1d       	adc	r25, r1
 8f8:	08 95       	ret

000008fa <fwrite>:
 8fa:	a0 e0       	ldi	r26, 0x00	; 0
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	e2 e8       	ldi	r30, 0x82	; 130
 900:	f4 e0       	ldi	r31, 0x04	; 4
 902:	25 c3       	rjmp	.+1610   	; 0xf4e <__prologue_saves__+0xc>
 904:	5b 01       	movw	r10, r22
 906:	4a 01       	movw	r8, r20
 908:	79 01       	movw	r14, r18
 90a:	d9 01       	movw	r26, r18
 90c:	13 96       	adiw	r26, 0x03	; 3
 90e:	2c 91       	ld	r18, X
 910:	21 ff       	sbrs	r18, 1
 912:	1d c0       	rjmp	.+58     	; 0x94e <__stack+0x4f>
 914:	c0 e0       	ldi	r28, 0x00	; 0
 916:	d0 e0       	ldi	r29, 0x00	; 0
 918:	c8 15       	cp	r28, r8
 91a:	d9 05       	cpc	r29, r9
 91c:	d9 f0       	breq	.+54     	; 0x954 <__stack+0x55>
 91e:	8c 01       	movw	r16, r24
 920:	6c 01       	movw	r12, r24
 922:	ca 0c       	add	r12, r10
 924:	db 1c       	adc	r13, r11
 926:	c8 01       	movw	r24, r16
 928:	0c 15       	cp	r16, r12
 92a:	1d 05       	cpc	r17, r13
 92c:	71 f0       	breq	.+28     	; 0x94a <__stack+0x4b>
 92e:	0f 5f       	subi	r16, 0xFF	; 255
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	d7 01       	movw	r26, r14
 934:	18 96       	adiw	r26, 0x08	; 8
 936:	ed 91       	ld	r30, X+
 938:	fc 91       	ld	r31, X
 93a:	19 97       	sbiw	r26, 0x09	; 9
 93c:	b7 01       	movw	r22, r14
 93e:	dc 01       	movw	r26, r24
 940:	8c 91       	ld	r24, X
 942:	09 95       	icall
 944:	89 2b       	or	r24, r25
 946:	79 f3       	breq	.-34     	; 0x926 <__stack+0x27>
 948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x55>
 94a:	21 96       	adiw	r28, 0x01	; 1
 94c:	e5 cf       	rjmp	.-54     	; 0x918 <__stack+0x19>
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	01 c0       	rjmp	.+2      	; 0x956 <__stack+0x57>
 954:	ce 01       	movw	r24, r28
 956:	cd b7       	in	r28, 0x3d	; 61
 958:	de b7       	in	r29, 0x3e	; 62
 95a:	ec e0       	ldi	r30, 0x0C	; 12
 95c:	14 c3       	rjmp	.+1576   	; 0xf86 <__epilogue_restores__+0xc>

0000095e <printf>:
 95e:	a0 e0       	ldi	r26, 0x00	; 0
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e4 eb       	ldi	r30, 0xB4	; 180
 964:	f4 e0       	ldi	r31, 0x04	; 4
 966:	fd c2       	rjmp	.+1530   	; 0xf62 <__prologue_saves__+0x20>
 968:	ae 01       	movw	r20, r28
 96a:	4b 5f       	subi	r20, 0xFB	; 251
 96c:	5f 4f       	sbci	r21, 0xFF	; 255
 96e:	fa 01       	movw	r30, r20
 970:	61 91       	ld	r22, Z+
 972:	71 91       	ld	r23, Z+
 974:	af 01       	movw	r20, r30
 976:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <__iob+0x2>
 97a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <__iob+0x3>
 97e:	5f d0       	rcall	.+190    	; 0xa3e <vfprintf>
 980:	e2 e0       	ldi	r30, 0x02	; 2
 982:	0b c3       	rjmp	.+1558   	; 0xf9a <__epilogue_restores__+0x20>

00000984 <puts>:
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <__iob+0x2>
 990:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <__iob+0x3>
 994:	23 81       	ldd	r18, Z+3	; 0x03
 996:	21 ff       	sbrs	r18, 1
 998:	1b c0       	rjmp	.+54     	; 0x9d0 <puts+0x4c>
 99a:	8c 01       	movw	r16, r24
 99c:	d0 e0       	ldi	r29, 0x00	; 0
 99e:	c0 e0       	ldi	r28, 0x00	; 0
 9a0:	f8 01       	movw	r30, r16
 9a2:	81 91       	ld	r24, Z+
 9a4:	8f 01       	movw	r16, r30
 9a6:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <__iob+0x2>
 9aa:	70 91 ce 02 	lds	r23, 0x02CE	; 0x8002ce <__iob+0x3>
 9ae:	db 01       	movw	r26, r22
 9b0:	18 96       	adiw	r26, 0x08	; 8
 9b2:	ed 91       	ld	r30, X+
 9b4:	fc 91       	ld	r31, X
 9b6:	19 97       	sbiw	r26, 0x09	; 9
 9b8:	88 23       	and	r24, r24
 9ba:	31 f0       	breq	.+12     	; 0x9c8 <puts+0x44>
 9bc:	09 95       	icall
 9be:	89 2b       	or	r24, r25
 9c0:	79 f3       	breq	.-34     	; 0x9a0 <puts+0x1c>
 9c2:	df ef       	ldi	r29, 0xFF	; 255
 9c4:	cf ef       	ldi	r28, 0xFF	; 255
 9c6:	ec cf       	rjmp	.-40     	; 0x9a0 <puts+0x1c>
 9c8:	8a e0       	ldi	r24, 0x0A	; 10
 9ca:	09 95       	icall
 9cc:	89 2b       	or	r24, r25
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <puts+0x52>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <puts+0x56>
 9d6:	8d 2f       	mov	r24, r29
 9d8:	9c 2f       	mov	r25, r28
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	08 95       	ret

000009e4 <snprintf>:
 9e4:	ae e0       	ldi	r26, 0x0E	; 14
 9e6:	b0 e0       	ldi	r27, 0x00	; 0
 9e8:	e7 ef       	ldi	r30, 0xF7	; 247
 9ea:	f4 e0       	ldi	r31, 0x04	; 4
 9ec:	b8 c2       	rjmp	.+1392   	; 0xf5e <__prologue_saves__+0x1c>
 9ee:	0d 89       	ldd	r16, Y+21	; 0x15
 9f0:	1e 89       	ldd	r17, Y+22	; 0x16
 9f2:	8f 89       	ldd	r24, Y+23	; 0x17
 9f4:	98 8d       	ldd	r25, Y+24	; 0x18
 9f6:	26 e0       	ldi	r18, 0x06	; 6
 9f8:	2c 83       	std	Y+4, r18	; 0x04
 9fa:	1a 83       	std	Y+2, r17	; 0x02
 9fc:	09 83       	std	Y+1, r16	; 0x01
 9fe:	97 ff       	sbrs	r25, 7
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <snprintf+0x22>
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	90 e8       	ldi	r25, 0x80	; 128
 a06:	01 97       	sbiw	r24, 0x01	; 1
 a08:	9e 83       	std	Y+6, r25	; 0x06
 a0a:	8d 83       	std	Y+5, r24	; 0x05
 a0c:	ae 01       	movw	r20, r28
 a0e:	45 5e       	subi	r20, 0xE5	; 229
 a10:	5f 4f       	sbci	r21, 0xFF	; 255
 a12:	69 8d       	ldd	r22, Y+25	; 0x19
 a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
 a16:	ce 01       	movw	r24, r28
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	11 d0       	rcall	.+34     	; 0xa3e <vfprintf>
 a1c:	4d 81       	ldd	r20, Y+5	; 0x05
 a1e:	5e 81       	ldd	r21, Y+6	; 0x06
 a20:	57 fd       	sbrc	r21, 7
 a22:	0a c0       	rjmp	.+20     	; 0xa38 <snprintf+0x54>
 a24:	2f 81       	ldd	r18, Y+7	; 0x07
 a26:	38 85       	ldd	r19, Y+8	; 0x08
 a28:	42 17       	cp	r20, r18
 a2a:	53 07       	cpc	r21, r19
 a2c:	0c f4       	brge	.+2      	; 0xa30 <snprintf+0x4c>
 a2e:	9a 01       	movw	r18, r20
 a30:	f8 01       	movw	r30, r16
 a32:	e2 0f       	add	r30, r18
 a34:	f3 1f       	adc	r31, r19
 a36:	10 82       	st	Z, r1
 a38:	2e 96       	adiw	r28, 0x0e	; 14
 a3a:	e4 e0       	ldi	r30, 0x04	; 4
 a3c:	ac c2       	rjmp	.+1368   	; 0xf96 <__epilogue_restores__+0x1c>

00000a3e <vfprintf>:
 a3e:	ab e0       	ldi	r26, 0x0B	; 11
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	e4 e2       	ldi	r30, 0x24	; 36
 a44:	f5 e0       	ldi	r31, 0x05	; 5
 a46:	7d c2       	rjmp	.+1274   	; 0xf42 <__prologue_saves__>
 a48:	6c 01       	movw	r12, r24
 a4a:	7b 01       	movw	r14, r22
 a4c:	8a 01       	movw	r16, r20
 a4e:	fc 01       	movw	r30, r24
 a50:	17 82       	std	Z+7, r1	; 0x07
 a52:	16 82       	std	Z+6, r1	; 0x06
 a54:	83 81       	ldd	r24, Z+3	; 0x03
 a56:	81 ff       	sbrs	r24, 1
 a58:	bf c1       	rjmp	.+894    	; 0xdd8 <vfprintf+0x39a>
 a5a:	ce 01       	movw	r24, r28
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	3c 01       	movw	r6, r24
 a60:	f6 01       	movw	r30, r12
 a62:	93 81       	ldd	r25, Z+3	; 0x03
 a64:	f7 01       	movw	r30, r14
 a66:	93 fd       	sbrc	r25, 3
 a68:	85 91       	lpm	r24, Z+
 a6a:	93 ff       	sbrs	r25, 3
 a6c:	81 91       	ld	r24, Z+
 a6e:	7f 01       	movw	r14, r30
 a70:	88 23       	and	r24, r24
 a72:	09 f4       	brne	.+2      	; 0xa76 <vfprintf+0x38>
 a74:	ad c1       	rjmp	.+858    	; 0xdd0 <vfprintf+0x392>
 a76:	85 32       	cpi	r24, 0x25	; 37
 a78:	39 f4       	brne	.+14     	; 0xa88 <vfprintf+0x4a>
 a7a:	93 fd       	sbrc	r25, 3
 a7c:	85 91       	lpm	r24, Z+
 a7e:	93 ff       	sbrs	r25, 3
 a80:	81 91       	ld	r24, Z+
 a82:	7f 01       	movw	r14, r30
 a84:	85 32       	cpi	r24, 0x25	; 37
 a86:	21 f4       	brne	.+8      	; 0xa90 <vfprintf+0x52>
 a88:	b6 01       	movw	r22, r12
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	c0 d1       	rcall	.+896    	; 0xe0e <fputc>
 a8e:	e8 cf       	rjmp	.-48     	; 0xa60 <vfprintf+0x22>
 a90:	91 2c       	mov	r9, r1
 a92:	21 2c       	mov	r2, r1
 a94:	31 2c       	mov	r3, r1
 a96:	ff e1       	ldi	r31, 0x1F	; 31
 a98:	f3 15       	cp	r31, r3
 a9a:	d8 f0       	brcs	.+54     	; 0xad2 <vfprintf+0x94>
 a9c:	8b 32       	cpi	r24, 0x2B	; 43
 a9e:	79 f0       	breq	.+30     	; 0xabe <vfprintf+0x80>
 aa0:	38 f4       	brcc	.+14     	; 0xab0 <vfprintf+0x72>
 aa2:	80 32       	cpi	r24, 0x20	; 32
 aa4:	79 f0       	breq	.+30     	; 0xac4 <vfprintf+0x86>
 aa6:	83 32       	cpi	r24, 0x23	; 35
 aa8:	a1 f4       	brne	.+40     	; 0xad2 <vfprintf+0x94>
 aaa:	23 2d       	mov	r18, r3
 aac:	20 61       	ori	r18, 0x10	; 16
 aae:	1d c0       	rjmp	.+58     	; 0xaea <vfprintf+0xac>
 ab0:	8d 32       	cpi	r24, 0x2D	; 45
 ab2:	61 f0       	breq	.+24     	; 0xacc <vfprintf+0x8e>
 ab4:	80 33       	cpi	r24, 0x30	; 48
 ab6:	69 f4       	brne	.+26     	; 0xad2 <vfprintf+0x94>
 ab8:	23 2d       	mov	r18, r3
 aba:	21 60       	ori	r18, 0x01	; 1
 abc:	16 c0       	rjmp	.+44     	; 0xaea <vfprintf+0xac>
 abe:	83 2d       	mov	r24, r3
 ac0:	82 60       	ori	r24, 0x02	; 2
 ac2:	38 2e       	mov	r3, r24
 ac4:	e3 2d       	mov	r30, r3
 ac6:	e4 60       	ori	r30, 0x04	; 4
 ac8:	3e 2e       	mov	r3, r30
 aca:	2a c0       	rjmp	.+84     	; 0xb20 <vfprintf+0xe2>
 acc:	f3 2d       	mov	r31, r3
 ace:	f8 60       	ori	r31, 0x08	; 8
 ad0:	1d c0       	rjmp	.+58     	; 0xb0c <vfprintf+0xce>
 ad2:	37 fc       	sbrc	r3, 7
 ad4:	2d c0       	rjmp	.+90     	; 0xb30 <vfprintf+0xf2>
 ad6:	20 ed       	ldi	r18, 0xD0	; 208
 ad8:	28 0f       	add	r18, r24
 ada:	2a 30       	cpi	r18, 0x0A	; 10
 adc:	40 f0       	brcs	.+16     	; 0xaee <vfprintf+0xb0>
 ade:	8e 32       	cpi	r24, 0x2E	; 46
 ae0:	b9 f4       	brne	.+46     	; 0xb10 <vfprintf+0xd2>
 ae2:	36 fc       	sbrc	r3, 6
 ae4:	75 c1       	rjmp	.+746    	; 0xdd0 <vfprintf+0x392>
 ae6:	23 2d       	mov	r18, r3
 ae8:	20 64       	ori	r18, 0x40	; 64
 aea:	32 2e       	mov	r3, r18
 aec:	19 c0       	rjmp	.+50     	; 0xb20 <vfprintf+0xe2>
 aee:	36 fe       	sbrs	r3, 6
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0xc0>
 af2:	8a e0       	ldi	r24, 0x0A	; 10
 af4:	98 9e       	mul	r9, r24
 af6:	20 0d       	add	r18, r0
 af8:	11 24       	eor	r1, r1
 afa:	92 2e       	mov	r9, r18
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <vfprintf+0xe2>
 afe:	ea e0       	ldi	r30, 0x0A	; 10
 b00:	2e 9e       	mul	r2, r30
 b02:	20 0d       	add	r18, r0
 b04:	11 24       	eor	r1, r1
 b06:	22 2e       	mov	r2, r18
 b08:	f3 2d       	mov	r31, r3
 b0a:	f0 62       	ori	r31, 0x20	; 32
 b0c:	3f 2e       	mov	r3, r31
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <vfprintf+0xe2>
 b10:	8c 36       	cpi	r24, 0x6C	; 108
 b12:	21 f4       	brne	.+8      	; 0xb1c <vfprintf+0xde>
 b14:	83 2d       	mov	r24, r3
 b16:	80 68       	ori	r24, 0x80	; 128
 b18:	38 2e       	mov	r3, r24
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xe2>
 b1c:	88 36       	cpi	r24, 0x68	; 104
 b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xf2>
 b20:	f7 01       	movw	r30, r14
 b22:	93 fd       	sbrc	r25, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	93 ff       	sbrs	r25, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	7f 01       	movw	r14, r30
 b2c:	81 11       	cpse	r24, r1
 b2e:	b3 cf       	rjmp	.-154    	; 0xa96 <vfprintf+0x58>
 b30:	98 2f       	mov	r25, r24
 b32:	9f 7d       	andi	r25, 0xDF	; 223
 b34:	95 54       	subi	r25, 0x45	; 69
 b36:	93 30       	cpi	r25, 0x03	; 3
 b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0x106>
 b3a:	0c 5f       	subi	r16, 0xFC	; 252
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	9f e3       	ldi	r25, 0x3F	; 63
 b40:	99 83       	std	Y+1, r25	; 0x01
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x120>
 b44:	83 36       	cpi	r24, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0x116>
 b48:	83 37       	cpi	r24, 0x73	; 115
 b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x12a>
 b4c:	83 35       	cpi	r24, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0x114>
 b50:	55 c0       	rjmp	.+170    	; 0xbfc <vfprintf+0x1be>
 b52:	20 c0       	rjmp	.+64     	; 0xb94 <vfprintf+0x156>
 b54:	f8 01       	movw	r30, r16
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	88 24       	eor	r8, r8
 b60:	83 94       	inc	r8
 b62:	91 2c       	mov	r9, r1
 b64:	53 01       	movw	r10, r6
 b66:	12 c0       	rjmp	.+36     	; 0xb8c <vfprintf+0x14e>
 b68:	28 01       	movw	r4, r16
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	4f 0e       	add	r4, r31
 b6e:	51 1c       	adc	r5, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	36 fe       	sbrs	r3, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x142>
 b7a:	69 2d       	mov	r22, r9
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x146>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	38 d1       	rcall	.+624    	; 0xdf8 <strnlen>
 b88:	4c 01       	movw	r8, r24
 b8a:	82 01       	movw	r16, r4
 b8c:	f3 2d       	mov	r31, r3
 b8e:	ff 77       	andi	r31, 0x7F	; 127
 b90:	3f 2e       	mov	r3, r31
 b92:	15 c0       	rjmp	.+42     	; 0xbbe <vfprintf+0x180>
 b94:	28 01       	movw	r4, r16
 b96:	22 e0       	ldi	r18, 0x02	; 2
 b98:	42 0e       	add	r4, r18
 b9a:	51 1c       	adc	r5, r1
 b9c:	f8 01       	movw	r30, r16
 b9e:	a0 80       	ld	r10, Z
 ba0:	b1 80       	ldd	r11, Z+1	; 0x01
 ba2:	36 fe       	sbrs	r3, 6
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <vfprintf+0x16e>
 ba6:	69 2d       	mov	r22, r9
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x172>
 bac:	6f ef       	ldi	r22, 0xFF	; 255
 bae:	7f ef       	ldi	r23, 0xFF	; 255
 bb0:	c5 01       	movw	r24, r10
 bb2:	17 d1       	rcall	.+558    	; 0xde2 <strnlen_P>
 bb4:	4c 01       	movw	r8, r24
 bb6:	f3 2d       	mov	r31, r3
 bb8:	f0 68       	ori	r31, 0x80	; 128
 bba:	3f 2e       	mov	r3, r31
 bbc:	82 01       	movw	r16, r4
 bbe:	33 fc       	sbrc	r3, 3
 bc0:	19 c0       	rjmp	.+50     	; 0xbf4 <vfprintf+0x1b6>
 bc2:	82 2d       	mov	r24, r2
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	88 16       	cp	r8, r24
 bc8:	99 06       	cpc	r9, r25
 bca:	a0 f4       	brcc	.+40     	; 0xbf4 <vfprintf+0x1b6>
 bcc:	b6 01       	movw	r22, r12
 bce:	80 e2       	ldi	r24, 0x20	; 32
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	1d d1       	rcall	.+570    	; 0xe0e <fputc>
 bd4:	2a 94       	dec	r2
 bd6:	f5 cf       	rjmp	.-22     	; 0xbc2 <vfprintf+0x184>
 bd8:	f5 01       	movw	r30, r10
 bda:	37 fc       	sbrc	r3, 7
 bdc:	85 91       	lpm	r24, Z+
 bde:	37 fe       	sbrs	r3, 7
 be0:	81 91       	ld	r24, Z+
 be2:	5f 01       	movw	r10, r30
 be4:	b6 01       	movw	r22, r12
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	12 d1       	rcall	.+548    	; 0xe0e <fputc>
 bea:	21 10       	cpse	r2, r1
 bec:	2a 94       	dec	r2
 bee:	21 e0       	ldi	r18, 0x01	; 1
 bf0:	82 1a       	sub	r8, r18
 bf2:	91 08       	sbc	r9, r1
 bf4:	81 14       	cp	r8, r1
 bf6:	91 04       	cpc	r9, r1
 bf8:	79 f7       	brne	.-34     	; 0xbd8 <vfprintf+0x19a>
 bfa:	e1 c0       	rjmp	.+450    	; 0xdbe <vfprintf+0x380>
 bfc:	84 36       	cpi	r24, 0x64	; 100
 bfe:	11 f0       	breq	.+4      	; 0xc04 <vfprintf+0x1c6>
 c00:	89 36       	cpi	r24, 0x69	; 105
 c02:	39 f5       	brne	.+78     	; 0xc52 <vfprintf+0x214>
 c04:	f8 01       	movw	r30, r16
 c06:	37 fe       	sbrs	r3, 7
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <vfprintf+0x1da>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	0c 5f       	subi	r16, 0xFC	; 252
 c14:	1f 4f       	sbci	r17, 0xFF	; 255
 c16:	08 c0       	rjmp	.+16     	; 0xc28 <vfprintf+0x1ea>
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	07 2e       	mov	r0, r23
 c1e:	00 0c       	add	r0, r0
 c20:	88 0b       	sbc	r24, r24
 c22:	99 0b       	sbc	r25, r25
 c24:	0e 5f       	subi	r16, 0xFE	; 254
 c26:	1f 4f       	sbci	r17, 0xFF	; 255
 c28:	f3 2d       	mov	r31, r3
 c2a:	ff 76       	andi	r31, 0x6F	; 111
 c2c:	3f 2e       	mov	r3, r31
 c2e:	97 ff       	sbrs	r25, 7
 c30:	09 c0       	rjmp	.+18     	; 0xc44 <vfprintf+0x206>
 c32:	90 95       	com	r25
 c34:	80 95       	com	r24
 c36:	70 95       	com	r23
 c38:	61 95       	neg	r22
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	f0 68       	ori	r31, 0x80	; 128
 c42:	3f 2e       	mov	r3, r31
 c44:	2a e0       	ldi	r18, 0x0A	; 10
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	a3 01       	movw	r20, r6
 c4a:	1d d1       	rcall	.+570    	; 0xe86 <__ultoa_invert>
 c4c:	88 2e       	mov	r8, r24
 c4e:	86 18       	sub	r8, r6
 c50:	44 c0       	rjmp	.+136    	; 0xcda <vfprintf+0x29c>
 c52:	85 37       	cpi	r24, 0x75	; 117
 c54:	31 f4       	brne	.+12     	; 0xc62 <vfprintf+0x224>
 c56:	23 2d       	mov	r18, r3
 c58:	2f 7e       	andi	r18, 0xEF	; 239
 c5a:	b2 2e       	mov	r11, r18
 c5c:	2a e0       	ldi	r18, 0x0A	; 10
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	25 c0       	rjmp	.+74     	; 0xcac <vfprintf+0x26e>
 c62:	93 2d       	mov	r25, r3
 c64:	99 7f       	andi	r25, 0xF9	; 249
 c66:	b9 2e       	mov	r11, r25
 c68:	8f 36       	cpi	r24, 0x6F	; 111
 c6a:	c1 f0       	breq	.+48     	; 0xc9c <vfprintf+0x25e>
 c6c:	18 f4       	brcc	.+6      	; 0xc74 <vfprintf+0x236>
 c6e:	88 35       	cpi	r24, 0x58	; 88
 c70:	79 f0       	breq	.+30     	; 0xc90 <vfprintf+0x252>
 c72:	ae c0       	rjmp	.+348    	; 0xdd0 <vfprintf+0x392>
 c74:	80 37       	cpi	r24, 0x70	; 112
 c76:	19 f0       	breq	.+6      	; 0xc7e <vfprintf+0x240>
 c78:	88 37       	cpi	r24, 0x78	; 120
 c7a:	21 f0       	breq	.+8      	; 0xc84 <vfprintf+0x246>
 c7c:	a9 c0       	rjmp	.+338    	; 0xdd0 <vfprintf+0x392>
 c7e:	e9 2f       	mov	r30, r25
 c80:	e0 61       	ori	r30, 0x10	; 16
 c82:	be 2e       	mov	r11, r30
 c84:	b4 fe       	sbrs	r11, 4
 c86:	0d c0       	rjmp	.+26     	; 0xca2 <vfprintf+0x264>
 c88:	fb 2d       	mov	r31, r11
 c8a:	f4 60       	ori	r31, 0x04	; 4
 c8c:	bf 2e       	mov	r11, r31
 c8e:	09 c0       	rjmp	.+18     	; 0xca2 <vfprintf+0x264>
 c90:	34 fe       	sbrs	r3, 4
 c92:	0a c0       	rjmp	.+20     	; 0xca8 <vfprintf+0x26a>
 c94:	29 2f       	mov	r18, r25
 c96:	26 60       	ori	r18, 0x06	; 6
 c98:	b2 2e       	mov	r11, r18
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <vfprintf+0x26a>
 c9c:	28 e0       	ldi	r18, 0x08	; 8
 c9e:	30 e0       	ldi	r19, 0x00	; 0
 ca0:	05 c0       	rjmp	.+10     	; 0xcac <vfprintf+0x26e>
 ca2:	20 e1       	ldi	r18, 0x10	; 16
 ca4:	30 e0       	ldi	r19, 0x00	; 0
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <vfprintf+0x26e>
 ca8:	20 e1       	ldi	r18, 0x10	; 16
 caa:	32 e0       	ldi	r19, 0x02	; 2
 cac:	f8 01       	movw	r30, r16
 cae:	b7 fe       	sbrs	r11, 7
 cb0:	07 c0       	rjmp	.+14     	; 0xcc0 <vfprintf+0x282>
 cb2:	60 81       	ld	r22, Z
 cb4:	71 81       	ldd	r23, Z+1	; 0x01
 cb6:	82 81       	ldd	r24, Z+2	; 0x02
 cb8:	93 81       	ldd	r25, Z+3	; 0x03
 cba:	0c 5f       	subi	r16, 0xFC	; 252
 cbc:	1f 4f       	sbci	r17, 0xFF	; 255
 cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0x28e>
 cc0:	60 81       	ld	r22, Z
 cc2:	71 81       	ldd	r23, Z+1	; 0x01
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 5f       	subi	r16, 0xFE	; 254
 cca:	1f 4f       	sbci	r17, 0xFF	; 255
 ccc:	a3 01       	movw	r20, r6
 cce:	db d0       	rcall	.+438    	; 0xe86 <__ultoa_invert>
 cd0:	88 2e       	mov	r8, r24
 cd2:	86 18       	sub	r8, r6
 cd4:	fb 2d       	mov	r31, r11
 cd6:	ff 77       	andi	r31, 0x7F	; 127
 cd8:	3f 2e       	mov	r3, r31
 cda:	36 fe       	sbrs	r3, 6
 cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <vfprintf+0x2ba>
 cde:	23 2d       	mov	r18, r3
 ce0:	2e 7f       	andi	r18, 0xFE	; 254
 ce2:	a2 2e       	mov	r10, r18
 ce4:	89 14       	cp	r8, r9
 ce6:	58 f4       	brcc	.+22     	; 0xcfe <vfprintf+0x2c0>
 ce8:	34 fe       	sbrs	r3, 4
 cea:	0b c0       	rjmp	.+22     	; 0xd02 <vfprintf+0x2c4>
 cec:	32 fc       	sbrc	r3, 2
 cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x2c4>
 cf0:	83 2d       	mov	r24, r3
 cf2:	8e 7e       	andi	r24, 0xEE	; 238
 cf4:	a8 2e       	mov	r10, r24
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <vfprintf+0x2c4>
 cf8:	b8 2c       	mov	r11, r8
 cfa:	a3 2c       	mov	r10, r3
 cfc:	03 c0       	rjmp	.+6      	; 0xd04 <vfprintf+0x2c6>
 cfe:	b8 2c       	mov	r11, r8
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <vfprintf+0x2c6>
 d02:	b9 2c       	mov	r11, r9
 d04:	a4 fe       	sbrs	r10, 4
 d06:	0f c0       	rjmp	.+30     	; 0xd26 <vfprintf+0x2e8>
 d08:	fe 01       	movw	r30, r28
 d0a:	e8 0d       	add	r30, r8
 d0c:	f1 1d       	adc	r31, r1
 d0e:	80 81       	ld	r24, Z
 d10:	80 33       	cpi	r24, 0x30	; 48
 d12:	21 f4       	brne	.+8      	; 0xd1c <vfprintf+0x2de>
 d14:	9a 2d       	mov	r25, r10
 d16:	99 7e       	andi	r25, 0xE9	; 233
 d18:	a9 2e       	mov	r10, r25
 d1a:	09 c0       	rjmp	.+18     	; 0xd2e <vfprintf+0x2f0>
 d1c:	a2 fe       	sbrs	r10, 2
 d1e:	06 c0       	rjmp	.+12     	; 0xd2c <vfprintf+0x2ee>
 d20:	b3 94       	inc	r11
 d22:	b3 94       	inc	r11
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <vfprintf+0x2f0>
 d26:	8a 2d       	mov	r24, r10
 d28:	86 78       	andi	r24, 0x86	; 134
 d2a:	09 f0       	breq	.+2      	; 0xd2e <vfprintf+0x2f0>
 d2c:	b3 94       	inc	r11
 d2e:	a3 fc       	sbrc	r10, 3
 d30:	10 c0       	rjmp	.+32     	; 0xd52 <vfprintf+0x314>
 d32:	a0 fe       	sbrs	r10, 0
 d34:	06 c0       	rjmp	.+12     	; 0xd42 <vfprintf+0x304>
 d36:	b2 14       	cp	r11, r2
 d38:	80 f4       	brcc	.+32     	; 0xd5a <vfprintf+0x31c>
 d3a:	28 0c       	add	r2, r8
 d3c:	92 2c       	mov	r9, r2
 d3e:	9b 18       	sub	r9, r11
 d40:	0d c0       	rjmp	.+26     	; 0xd5c <vfprintf+0x31e>
 d42:	b2 14       	cp	r11, r2
 d44:	58 f4       	brcc	.+22     	; 0xd5c <vfprintf+0x31e>
 d46:	b6 01       	movw	r22, r12
 d48:	80 e2       	ldi	r24, 0x20	; 32
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	60 d0       	rcall	.+192    	; 0xe0e <fputc>
 d4e:	b3 94       	inc	r11
 d50:	f8 cf       	rjmp	.-16     	; 0xd42 <vfprintf+0x304>
 d52:	b2 14       	cp	r11, r2
 d54:	18 f4       	brcc	.+6      	; 0xd5c <vfprintf+0x31e>
 d56:	2b 18       	sub	r2, r11
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <vfprintf+0x320>
 d5a:	98 2c       	mov	r9, r8
 d5c:	21 2c       	mov	r2, r1
 d5e:	a4 fe       	sbrs	r10, 4
 d60:	0f c0       	rjmp	.+30     	; 0xd80 <vfprintf+0x342>
 d62:	b6 01       	movw	r22, r12
 d64:	80 e3       	ldi	r24, 0x30	; 48
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	52 d0       	rcall	.+164    	; 0xe0e <fputc>
 d6a:	a2 fe       	sbrs	r10, 2
 d6c:	16 c0       	rjmp	.+44     	; 0xd9a <vfprintf+0x35c>
 d6e:	a1 fc       	sbrc	r10, 1
 d70:	03 c0       	rjmp	.+6      	; 0xd78 <vfprintf+0x33a>
 d72:	88 e7       	ldi	r24, 0x78	; 120
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x33e>
 d78:	88 e5       	ldi	r24, 0x58	; 88
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	b6 01       	movw	r22, r12
 d7e:	0c c0       	rjmp	.+24     	; 0xd98 <vfprintf+0x35a>
 d80:	8a 2d       	mov	r24, r10
 d82:	86 78       	andi	r24, 0x86	; 134
 d84:	51 f0       	breq	.+20     	; 0xd9a <vfprintf+0x35c>
 d86:	a1 fe       	sbrs	r10, 1
 d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0x350>
 d8a:	8b e2       	ldi	r24, 0x2B	; 43
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <vfprintf+0x352>
 d8e:	80 e2       	ldi	r24, 0x20	; 32
 d90:	a7 fc       	sbrc	r10, 7
 d92:	8d e2       	ldi	r24, 0x2D	; 45
 d94:	b6 01       	movw	r22, r12
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	3a d0       	rcall	.+116    	; 0xe0e <fputc>
 d9a:	89 14       	cp	r8, r9
 d9c:	30 f4       	brcc	.+12     	; 0xdaa <vfprintf+0x36c>
 d9e:	b6 01       	movw	r22, r12
 da0:	80 e3       	ldi	r24, 0x30	; 48
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	34 d0       	rcall	.+104    	; 0xe0e <fputc>
 da6:	9a 94       	dec	r9
 da8:	f8 cf       	rjmp	.-16     	; 0xd9a <vfprintf+0x35c>
 daa:	8a 94       	dec	r8
 dac:	f3 01       	movw	r30, r6
 dae:	e8 0d       	add	r30, r8
 db0:	f1 1d       	adc	r31, r1
 db2:	80 81       	ld	r24, Z
 db4:	b6 01       	movw	r22, r12
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	2a d0       	rcall	.+84     	; 0xe0e <fputc>
 dba:	81 10       	cpse	r8, r1
 dbc:	f6 cf       	rjmp	.-20     	; 0xdaa <vfprintf+0x36c>
 dbe:	22 20       	and	r2, r2
 dc0:	09 f4       	brne	.+2      	; 0xdc4 <vfprintf+0x386>
 dc2:	4e ce       	rjmp	.-868    	; 0xa60 <vfprintf+0x22>
 dc4:	b6 01       	movw	r22, r12
 dc6:	80 e2       	ldi	r24, 0x20	; 32
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	21 d0       	rcall	.+66     	; 0xe0e <fputc>
 dcc:	2a 94       	dec	r2
 dce:	f7 cf       	rjmp	.-18     	; 0xdbe <vfprintf+0x380>
 dd0:	f6 01       	movw	r30, r12
 dd2:	86 81       	ldd	r24, Z+6	; 0x06
 dd4:	97 81       	ldd	r25, Z+7	; 0x07
 dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x39e>
 dd8:	8f ef       	ldi	r24, 0xFF	; 255
 dda:	9f ef       	ldi	r25, 0xFF	; 255
 ddc:	2b 96       	adiw	r28, 0x0b	; 11
 dde:	e2 e1       	ldi	r30, 0x12	; 18
 de0:	cc c0       	rjmp	.+408    	; 0xf7a <__epilogue_restores__>

00000de2 <strnlen_P>:
 de2:	fc 01       	movw	r30, r24
 de4:	05 90       	lpm	r0, Z+
 de6:	61 50       	subi	r22, 0x01	; 1
 de8:	70 40       	sbci	r23, 0x00	; 0
 dea:	01 10       	cpse	r0, r1
 dec:	d8 f7       	brcc	.-10     	; 0xde4 <strnlen_P+0x2>
 dee:	80 95       	com	r24
 df0:	90 95       	com	r25
 df2:	8e 0f       	add	r24, r30
 df4:	9f 1f       	adc	r25, r31
 df6:	08 95       	ret

00000df8 <strnlen>:
 df8:	fc 01       	movw	r30, r24
 dfa:	61 50       	subi	r22, 0x01	; 1
 dfc:	70 40       	sbci	r23, 0x00	; 0
 dfe:	01 90       	ld	r0, Z+
 e00:	01 10       	cpse	r0, r1
 e02:	d8 f7       	brcc	.-10     	; 0xdfa <strnlen+0x2>
 e04:	80 95       	com	r24
 e06:	90 95       	com	r25
 e08:	8e 0f       	add	r24, r30
 e0a:	9f 1f       	adc	r25, r31
 e0c:	08 95       	ret

00000e0e <fputc>:
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	fb 01       	movw	r30, r22
 e18:	23 81       	ldd	r18, Z+3	; 0x03
 e1a:	21 fd       	sbrc	r18, 1
 e1c:	03 c0       	rjmp	.+6      	; 0xe24 <fputc+0x16>
 e1e:	8f ef       	ldi	r24, 0xFF	; 255
 e20:	9f ef       	ldi	r25, 0xFF	; 255
 e22:	2c c0       	rjmp	.+88     	; 0xe7c <fputc+0x6e>
 e24:	22 ff       	sbrs	r18, 2
 e26:	16 c0       	rjmp	.+44     	; 0xe54 <fputc+0x46>
 e28:	46 81       	ldd	r20, Z+6	; 0x06
 e2a:	57 81       	ldd	r21, Z+7	; 0x07
 e2c:	24 81       	ldd	r18, Z+4	; 0x04
 e2e:	35 81       	ldd	r19, Z+5	; 0x05
 e30:	42 17       	cp	r20, r18
 e32:	53 07       	cpc	r21, r19
 e34:	44 f4       	brge	.+16     	; 0xe46 <fputc+0x38>
 e36:	a0 81       	ld	r26, Z
 e38:	b1 81       	ldd	r27, Z+1	; 0x01
 e3a:	9d 01       	movw	r18, r26
 e3c:	2f 5f       	subi	r18, 0xFF	; 255
 e3e:	3f 4f       	sbci	r19, 0xFF	; 255
 e40:	31 83       	std	Z+1, r19	; 0x01
 e42:	20 83       	st	Z, r18
 e44:	8c 93       	st	X, r24
 e46:	26 81       	ldd	r18, Z+6	; 0x06
 e48:	37 81       	ldd	r19, Z+7	; 0x07
 e4a:	2f 5f       	subi	r18, 0xFF	; 255
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	37 83       	std	Z+7, r19	; 0x07
 e50:	26 83       	std	Z+6, r18	; 0x06
 e52:	14 c0       	rjmp	.+40     	; 0xe7c <fputc+0x6e>
 e54:	8b 01       	movw	r16, r22
 e56:	ec 01       	movw	r28, r24
 e58:	fb 01       	movw	r30, r22
 e5a:	00 84       	ldd	r0, Z+8	; 0x08
 e5c:	f1 85       	ldd	r31, Z+9	; 0x09
 e5e:	e0 2d       	mov	r30, r0
 e60:	09 95       	icall
 e62:	89 2b       	or	r24, r25
 e64:	e1 f6       	brne	.-72     	; 0xe1e <fputc+0x10>
 e66:	d8 01       	movw	r26, r16
 e68:	16 96       	adiw	r26, 0x06	; 6
 e6a:	8d 91       	ld	r24, X+
 e6c:	9c 91       	ld	r25, X
 e6e:	17 97       	sbiw	r26, 0x07	; 7
 e70:	01 96       	adiw	r24, 0x01	; 1
 e72:	17 96       	adiw	r26, 0x07	; 7
 e74:	9c 93       	st	X, r25
 e76:	8e 93       	st	-X, r24
 e78:	16 97       	sbiw	r26, 0x06	; 6
 e7a:	ce 01       	movw	r24, r28
 e7c:	df 91       	pop	r29
 e7e:	cf 91       	pop	r28
 e80:	1f 91       	pop	r17
 e82:	0f 91       	pop	r16
 e84:	08 95       	ret

00000e86 <__ultoa_invert>:
 e86:	fa 01       	movw	r30, r20
 e88:	aa 27       	eor	r26, r26
 e8a:	28 30       	cpi	r18, 0x08	; 8
 e8c:	51 f1       	breq	.+84     	; 0xee2 <__ultoa_invert+0x5c>
 e8e:	20 31       	cpi	r18, 0x10	; 16
 e90:	81 f1       	breq	.+96     	; 0xef2 <__ultoa_invert+0x6c>
 e92:	e8 94       	clt
 e94:	6f 93       	push	r22
 e96:	6e 7f       	andi	r22, 0xFE	; 254
 e98:	6e 5f       	subi	r22, 0xFE	; 254
 e9a:	7f 4f       	sbci	r23, 0xFF	; 255
 e9c:	8f 4f       	sbci	r24, 0xFF	; 255
 e9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ea0:	af 4f       	sbci	r26, 0xFF	; 255
 ea2:	b1 e0       	ldi	r27, 0x01	; 1
 ea4:	3e d0       	rcall	.+124    	; 0xf22 <__ultoa_invert+0x9c>
 ea6:	b4 e0       	ldi	r27, 0x04	; 4
 ea8:	3c d0       	rcall	.+120    	; 0xf22 <__ultoa_invert+0x9c>
 eaa:	67 0f       	add	r22, r23
 eac:	78 1f       	adc	r23, r24
 eae:	89 1f       	adc	r24, r25
 eb0:	9a 1f       	adc	r25, r26
 eb2:	a1 1d       	adc	r26, r1
 eb4:	68 0f       	add	r22, r24
 eb6:	79 1f       	adc	r23, r25
 eb8:	8a 1f       	adc	r24, r26
 eba:	91 1d       	adc	r25, r1
 ebc:	a1 1d       	adc	r26, r1
 ebe:	6a 0f       	add	r22, r26
 ec0:	71 1d       	adc	r23, r1
 ec2:	81 1d       	adc	r24, r1
 ec4:	91 1d       	adc	r25, r1
 ec6:	a1 1d       	adc	r26, r1
 ec8:	20 d0       	rcall	.+64     	; 0xf0a <__ultoa_invert+0x84>
 eca:	09 f4       	brne	.+2      	; 0xece <__ultoa_invert+0x48>
 ecc:	68 94       	set
 ece:	3f 91       	pop	r19
 ed0:	2a e0       	ldi	r18, 0x0A	; 10
 ed2:	26 9f       	mul	r18, r22
 ed4:	11 24       	eor	r1, r1
 ed6:	30 19       	sub	r19, r0
 ed8:	30 5d       	subi	r19, 0xD0	; 208
 eda:	31 93       	st	Z+, r19
 edc:	de f6       	brtc	.-74     	; 0xe94 <__ultoa_invert+0xe>
 ede:	cf 01       	movw	r24, r30
 ee0:	08 95       	ret
 ee2:	46 2f       	mov	r20, r22
 ee4:	47 70       	andi	r20, 0x07	; 7
 ee6:	40 5d       	subi	r20, 0xD0	; 208
 ee8:	41 93       	st	Z+, r20
 eea:	b3 e0       	ldi	r27, 0x03	; 3
 eec:	0f d0       	rcall	.+30     	; 0xf0c <__ultoa_invert+0x86>
 eee:	c9 f7       	brne	.-14     	; 0xee2 <__ultoa_invert+0x5c>
 ef0:	f6 cf       	rjmp	.-20     	; 0xede <__ultoa_invert+0x58>
 ef2:	46 2f       	mov	r20, r22
 ef4:	4f 70       	andi	r20, 0x0F	; 15
 ef6:	40 5d       	subi	r20, 0xD0	; 208
 ef8:	4a 33       	cpi	r20, 0x3A	; 58
 efa:	18 f0       	brcs	.+6      	; 0xf02 <__ultoa_invert+0x7c>
 efc:	49 5d       	subi	r20, 0xD9	; 217
 efe:	31 fd       	sbrc	r19, 1
 f00:	40 52       	subi	r20, 0x20	; 32
 f02:	41 93       	st	Z+, r20
 f04:	02 d0       	rcall	.+4      	; 0xf0a <__ultoa_invert+0x84>
 f06:	a9 f7       	brne	.-22     	; 0xef2 <__ultoa_invert+0x6c>
 f08:	ea cf       	rjmp	.-44     	; 0xede <__ultoa_invert+0x58>
 f0a:	b4 e0       	ldi	r27, 0x04	; 4
 f0c:	a6 95       	lsr	r26
 f0e:	97 95       	ror	r25
 f10:	87 95       	ror	r24
 f12:	77 95       	ror	r23
 f14:	67 95       	ror	r22
 f16:	ba 95       	dec	r27
 f18:	c9 f7       	brne	.-14     	; 0xf0c <__ultoa_invert+0x86>
 f1a:	00 97       	sbiw	r24, 0x00	; 0
 f1c:	61 05       	cpc	r22, r1
 f1e:	71 05       	cpc	r23, r1
 f20:	08 95       	ret
 f22:	9b 01       	movw	r18, r22
 f24:	ac 01       	movw	r20, r24
 f26:	0a 2e       	mov	r0, r26
 f28:	06 94       	lsr	r0
 f2a:	57 95       	ror	r21
 f2c:	47 95       	ror	r20
 f2e:	37 95       	ror	r19
 f30:	27 95       	ror	r18
 f32:	ba 95       	dec	r27
 f34:	c9 f7       	brne	.-14     	; 0xf28 <__ultoa_invert+0xa2>
 f36:	62 0f       	add	r22, r18
 f38:	73 1f       	adc	r23, r19
 f3a:	84 1f       	adc	r24, r20
 f3c:	95 1f       	adc	r25, r21
 f3e:	a0 1d       	adc	r26, r0
 f40:	08 95       	ret

00000f42 <__prologue_saves__>:
 f42:	2f 92       	push	r2
 f44:	3f 92       	push	r3
 f46:	4f 92       	push	r4
 f48:	5f 92       	push	r5
 f4a:	6f 92       	push	r6
 f4c:	7f 92       	push	r7
 f4e:	8f 92       	push	r8
 f50:	9f 92       	push	r9
 f52:	af 92       	push	r10
 f54:	bf 92       	push	r11
 f56:	cf 92       	push	r12
 f58:	df 92       	push	r13
 f5a:	ef 92       	push	r14
 f5c:	ff 92       	push	r15
 f5e:	0f 93       	push	r16
 f60:	1f 93       	push	r17
 f62:	cf 93       	push	r28
 f64:	df 93       	push	r29
 f66:	cd b7       	in	r28, 0x3d	; 61
 f68:	de b7       	in	r29, 0x3e	; 62
 f6a:	ca 1b       	sub	r28, r26
 f6c:	db 0b       	sbc	r29, r27
 f6e:	0f b6       	in	r0, 0x3f	; 63
 f70:	f8 94       	cli
 f72:	de bf       	out	0x3e, r29	; 62
 f74:	0f be       	out	0x3f, r0	; 63
 f76:	cd bf       	out	0x3d, r28	; 61
 f78:	09 94       	ijmp

00000f7a <__epilogue_restores__>:
 f7a:	2a 88       	ldd	r2, Y+18	; 0x12
 f7c:	39 88       	ldd	r3, Y+17	; 0x11
 f7e:	48 88       	ldd	r4, Y+16	; 0x10
 f80:	5f 84       	ldd	r5, Y+15	; 0x0f
 f82:	6e 84       	ldd	r6, Y+14	; 0x0e
 f84:	7d 84       	ldd	r7, Y+13	; 0x0d
 f86:	8c 84       	ldd	r8, Y+12	; 0x0c
 f88:	9b 84       	ldd	r9, Y+11	; 0x0b
 f8a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f8c:	b9 84       	ldd	r11, Y+9	; 0x09
 f8e:	c8 84       	ldd	r12, Y+8	; 0x08
 f90:	df 80       	ldd	r13, Y+7	; 0x07
 f92:	ee 80       	ldd	r14, Y+6	; 0x06
 f94:	fd 80       	ldd	r15, Y+5	; 0x05
 f96:	0c 81       	ldd	r16, Y+4	; 0x04
 f98:	1b 81       	ldd	r17, Y+3	; 0x03
 f9a:	aa 81       	ldd	r26, Y+2	; 0x02
 f9c:	b9 81       	ldd	r27, Y+1	; 0x01
 f9e:	ce 0f       	add	r28, r30
 fa0:	d1 1d       	adc	r29, r1
 fa2:	0f b6       	in	r0, 0x3f	; 63
 fa4:	f8 94       	cli
 fa6:	de bf       	out	0x3e, r29	; 62
 fa8:	0f be       	out	0x3f, r0	; 63
 faa:	cd bf       	out	0x3d, r28	; 61
 fac:	ed 01       	movw	r28, r26
 fae:	08 95       	ret

00000fb0 <_exit>:
 fb0:	f8 94       	cli

00000fb2 <__stop_program>:
 fb2:	ff cf       	rjmp	.-2      	; 0xfb2 <__stop_program>
